{"version":3,"sources":["BaseBuildingSquare.tsx","UniversalShape.tsx","ClientManager.ts","Register.tsx","LoginForm.tsx","GameRequest.tsx","GameSetupScreen.tsx","UserContainer.tsx","Canvas.tsx","MiniCanvas.tsx","Popup.tsx","WinnerPopup.tsx","AutoComplete.tsx","UniversalShapeContext.tsx","Highscore.tsx","UserInfo.tsx","Menu.tsx","Main.tsx","About.tsx","Nav.tsx","App.tsx","serviceWorker.ts","index.tsx","Events.js","TetrisHelper.js","Factories.js"],"names":["BaseBuildingSquare","left","top","color","size","Object","classCallCheck","this","ctx","fillStyle","strokeStyle","lineWidth","beginPath","fillRect","rect","stroke","matrix","Math","abs","status","pom","UniversalShape","arr","columns","rows","_this","coordiantesArr","blocksArr","currentPosition","setBlocks","blocks","fillArr","move","_this2","map","elem","scale","_this3","floor","_this4","array","forEach","push","x","y","moveDown","areBlockOutOfBoundsRight","moveRight","areBlockOutOfBoundsLeft","moveLeft","moveBack","_this5","updateCanvas","isBlockFreeToMoveLeft","isBlockFreeToMoveRight","isBlockFreeToMoveDown","i","blockStates","length","moveAdjustment","_this6","isBlockFreeToRotate","_this7","_this8","CM","socket","io","initSocket","on","generateShapes","blockSize","GAME_INIT","shapes","generatedShapes","coords","initMainTetrisContext","setGeneratedShapes","setReciever","addShapes","showAccepted","setRecievers","removeSpectator","opponentGameOver","removeReciever","setShapesCoords","setPlayerReady","setDifficulty","displayWinner","USER_READY","obj","tf","user","WINNER","winnerData","USER_DISCONNECTED","name","REQUEST_DENIED","RESET","ADD_SHAPES","newShapes","INITIALIZE_GAME","recievers","difficulty","GAME_OVER","updateGame","updateSecondCanvas","GAME_UPDATE","spectatingGames","updateSpectatingCanvas","SEND_TO_SPECTATOR","initMenu","setHighscore","HIGHSCORE","result","initUserContainer","displayUsers","setSender","setRequest","startGame","setSide","addSpectator","updateAvailableGames","setInitBtn","updateGameSetupScreen","emitGameSetup","reset","removeInvitedPlayer","removeGameMaster","USER_CONNECTED","allUsers","GAME_REQUEST","_ref","sender","GAME_START","_ref2","start","SPECTATE","spectator","SPECTATE_INFO","DISPLAY_GAMES","gamesInProgress","GAME_SETUP","initRegister","setError","setDisplay","REGISTER","success","target","value","emitGameUpdate","shape","reciever","totalScore","score","acceleration","emit","emitUserInGame","username","USER_IN_GAME","emitLogout","LOGOUT","emitUserConnected","emitUserReady","reqSender","emitGameRequest","emitGameStart","to","emitVerifyUser","nickname","password","setUser","VERIFY_USER","emitReset","keepGameMode","emitAddShapes","emitSpectate","game","emitSpectatorData","emitInitializeGame","emitRequestDenied","emitGameOver","master","emitRegister","emitListUpdate","LIST_UPDATE","emitMultiplayer","MULTIPLAYER","Register","props","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","register","event","preventDefault","_this$state","state","changeName","setState","changePass","error","render","react_default","a","createElement","className","onSubmit","onChange","type","placeholder","onClick","React","Component","LoginForm","textInput","isUser","handleChange","handlePassword","handleSubmit","_this$state2","ref","input","id","maxLength","autoComplete","GameRequest","accept","GameSetupScreen","createStringFromArray","str","_this$props","initializeGame","showInitBtn","invitedPlayers","isPlayer","gameMaster","UserContainer","finalizeStart","showStartBtn","reqSent","showReq","showSide","showRequest","isSpectator","changeSpectatingStatus","isGameMaster","_this$props2","index","indexOf","splice","sendInvite","_this$props3","players","selectedPlayers","invited","index1","index2","innerHTML","disabled","style","backgroundColor","users","values","u","inGame","gameMode","key","games","spectate","_this$props4","setTimeout","accepted","_this$props5","isPlayerReady","running","initGame","denied","displayRecievers","displayGames","src_GameSetupScreen","src_GameRequest","_this$props6","Canvas","updateWindowDimensions","canvasBack","canvasFront","fixed","c2","current","width","height","createGrid","getContext","c1","moveTo","lineTo","window","addEventListener","removeEventListener","MiniCanvas","bind","assertThisInitialized","canvasSide","c3","rowScore","style2","Popup","close","resetPopup","WinnerPopup","winner","require","createEmptyMatrix","isRowComplete","AutoComplete","createRef","autoMove","tempShape","coordinatesArr","innerC","c","numberOfFilledFields","newMatrix","max","maxNew","counter","element","clearRow","mat","unshift","sub","j","speed","undefined","gen","concat","bestShape","findBestPosition","rotation","canvas","canvas2","ctx2","setInterval","intervalId","rotate","clearRect","areBlocksFreeToMoveLeft","areBlocksFreeToMoveRight","areBlocksFreeToMoveDown","addShapeToMatrix","fillCanvas","clearInterval","temp","draw","copyBlocks","topNegative","leftNegative","block","rowNum","copyMatrix","moved","rowCountSum","rowCountTemp","k","areBlocksFreeToMoveDownNumber","isShapeAVerticalLine","removeShapeFromMatrix","getMatrixHeight","getColumnHeight","columnIndex","doesShapeNeedOneBlock","row","field","round","changeSpeed","moveCounter","src_Canvas","UniversalShapeContext","canvasBack2","canvasBack3","canvasBack4","nextShape","src_WinnerPopup","hideWinner","shapesCoords","recs","getCanvasBasedOnRecieverIndex","gameOver","newCoords","currentShapes","specs","spectators","reqAccepted","src_Popup","d","_this$state3","logout","e","currentShape","defaultShape","allBlocks","counterId","delay","baseDelay","scorePlayer2","totalScorePlayer2","generatedShapesIndex","_this$state4","acc","userIndex","shape1","totalScorePlayer3","scorePlayer3","totalScorePlayer4","scorePlayer4","defineNewProperties","setScoreBasedOnRecieverIndex","_this$state5","_this$state6","col","run","ctx1","_this$state7","next","deepCopyShape","sidectx","fitToSide","isGameOver","inter","moveShape","font","textAlign","fillText","strokeText","_this$state8","updateStateOfTheGame","stopGame","total","rowsToClear","handleMove","handleRotate","shapehelp","areBlockOutOfRotateBoundsLeft","areBlockOutOfRotateBoundsRight","areBlocksFreeToRotate","rec","specCanvases","windowHeight","innerHeight","windowWidth","innerWidth","generateSpecCanvases","_this$state9","canvases","info","generateCanvasData","data","src_MiniCanvas","_this$state10","_this$state11","singlePlayer","spect","mode","onKeyUp","handleKeyDown","copy","attr","hasOwnProperty","keyCode","_this$state12","src_UserContainer","src_AutoComplete","Highscore","scores","title","UserInfo","show","Menu","display","highscore","highscoreEasy","src_UniversalShapeContext","src_Highscore","src_UserInfo","Main","t","document","getElementsByClassName","animate","TimelineMax","fromTo","ease","Power2","easeInOut","handleClick","src_Menu","react_router_dom","src_LoginForm","src_Register","About","Nav","react_router","path","exact","component","App","src_Nav","Boolean","location","hostname","match","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","READY","numArr","_loop","subEl","uuidv4","shapeCoordinates","0","1","2","3","4","5","6","7","8","9","colors","createUser","arguments","_ref$name","_ref$socketID","socketID","_ref$inGame","_ref$isReady","isReady","_ref$score","_ref$gameMode","_ref$gameName","gameName","createGameData","_ref2$matrix","random"],"mappings":"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","file":"static/js/main.fee79890.chunk.js","sourcesContent":["class BaseBuildingSquare {\r\n    left: number;\r\n    top: number;\r\n    color: string;\r\n    size: number\r\n    constructor(left: number, top: number, color: string, size: number) {\r\n        this.left = left;\r\n        this.top = top;\r\n        this.color = color;\r\n        this.size = size\r\n    }\r\n    setTop(top: number) {\r\n        this.top = top;\r\n    }\r\n    updateCanvas(ctx: any, color?: string) {\r\n        \r\n        ctx.fillStyle = this.color;\r\n        if(color) ctx.fillStyle = color;\r\n        ctx.strokeStyle = 'black';\r\n        ctx.lineWidth = 2;\r\n        ctx.beginPath();\r\n        ctx.fillRect(this.left, this.top, this.size, this.size);\r\n        ctx.rect(this.left, this.top, this.size, this.size);\r\n        ctx.stroke();\r\n    }\r\n    draw(left: number, top: number, ctx: any, color: string) {\r\n        ctx.beginPath();\r\n        ctx.fillStyle = color;\r\n        ctx.strokeStyle = 'black';\r\n        ctx.lineWidth = 2;\r\n        ctx.fillRect(left, top, this.size, this.size);\r\n        ctx.rect(left, top, this.size, this.size);\r\n        ctx.stroke();\r\n    }\r\n    moveDown() {\r\n        this.top += this.size;\r\n    }\r\n    moveBack() {\r\n        this.top -= this.size;\r\n    }\r\n    moveLeft() {\r\n        this.left -= this.size;\r\n    }\r\n    moveRight() {\r\n        this.left += this.size;\r\n    }\r\n    isBlockFreeToMoveLeft(matrix: any) {\r\n        return !matrix[Math.abs(this.top / this.size)][Math.abs(this.left / this.size - 1)].status;\r\n    }\r\n    isBlockFreeToMoveRight(matrix: any) {\r\n        let pom = false;\r\n        if(null != matrix[Math.abs(this.top / this.size)][Math.abs(this.left / this.size + 1)])\r\n        if(!matrix[Math.abs(this.top / this.size)][Math.abs(this.left / this.size + 1)].status) pom = true;\r\n        return pom;\r\n    }\r\n    isBlockFreeToMoveDown(matrix: any) {\r\n        return !(matrix[Math.abs(this.top / this.size)][this.left / this.size].status)\r\n    }\r\n    isBlockFreeToRotate(matrix: any) {\r\n        return !(matrix[Math.abs(this.top / this.size)][Math.abs(this.left / this.size)].status)\r\n    }\r\n}\r\n\r\nexport default BaseBuildingSquare","import BaseBuildingSquare from \"./BaseBuildingSquare\";\r\n\r\nclass UniversalShape {\r\n    coordiantesArr: any[];\r\n    blocksArr: BaseBuildingSquare[];\r\n    top: number;\r\n    left: number;\r\n    columns: number;\r\n    rows: number;\r\n    size: number;\r\n    currentPosition: number;\r\n    color: string;\r\n    constructor(arr: any[], columns: number, rows: number, size: number, color: string) {\r\n        this.coordiantesArr = arr\r\n\r\n        this.top = 0;\r\n        this.left = 0;\r\n        this.rows = rows;\r\n        this.columns = columns;\r\n        this.size = size;\r\n        this.currentPosition = 0;\r\n        this.color = color;\r\n        this.blocksArr = this.fillArr(arr[0], size, columns);\r\n    }\r\n\r\n    setBlocks = (blocks: any[]) => {\r\n        this.blocksArr = blocks\r\n    }\r\n\r\n    fitToSide(move: number) {\r\n        this.blocksArr = this.blocksArr.map((elem: any) => {\r\n            return new BaseBuildingSquare((elem.left - move * this.size), elem.top , this.color, this.size)\r\n        });\r\n    }\r\n    defineNewProperties(blocksArr: any[], scale: number, size: number) {\r\n        this.blocksArr = blocksArr.map((elem: any) => {\r\n            return new BaseBuildingSquare(Math.floor(elem.left / scale * size), Math.floor(elem.top / scale * size), 'red', this.size)\r\n        });\r\n    }\r\n    fillArr(arr: any, size: number, columns: number): BaseBuildingSquare[] {\r\n        let array: BaseBuildingSquare[] = [];\r\n        arr.forEach((elem: any) => {\r\n            array.push(new BaseBuildingSquare((elem.x + Math.floor(columns / 2) - 1) * size, elem.y * size, this.color, size))\r\n        })\r\n        return array;\r\n    }\r\n    moveDown() {\r\n        this.blocksArr.forEach(elem => {\r\n            elem.moveDown();\r\n        })\r\n        this.top += 1;\r\n    }\r\n    moveRight() {\r\n        if (this.areBlockOutOfBoundsRight()) {\r\n            this.blocksArr.forEach(elem => {\r\n                elem.moveRight();\r\n            })\r\n            this.left += 1;\r\n        }\r\n    }\r\n    moveLeft() {\r\n        if (this.areBlockOutOfBoundsLeft()) {\r\n            this.blocksArr.forEach(elem => {\r\n                elem.moveLeft();\r\n            })\r\n            this.left -= 1;\r\n        }\r\n    }\r\n    moveBack(): void {\r\n        this.blocksArr.forEach(elem => {\r\n            elem.moveBack();\r\n        })\r\n    }\r\n    updateCanvas(ctx: any) {\r\n        this.blocksArr.forEach(elem => {\r\n            elem.updateCanvas(ctx, this.color);\r\n        })\r\n    }\r\n    areBlocksFreeToMoveLeft(matrix: any) {\r\n        let pom = true;\r\n        this.blocksArr.forEach(elem => {\r\n            if (!elem.isBlockFreeToMoveLeft(matrix)) {\r\n                pom = false;\r\n            }\r\n        })\r\n        return pom;\r\n    }\r\n    areBlocksFreeToMoveRight(matrix: any) {\r\n        let pom = true;\r\n        this.blocksArr.forEach(elem => {\r\n            if (!elem.isBlockFreeToMoveRight(matrix)) {\r\n                pom = false;\r\n            }\r\n        })\r\n        return pom;\r\n    }\r\n    areBlocksFreeToMoveDown(matrix: any) {\r\n        let pom = true;\r\n        this.blocksArr.forEach(elem => {\r\n            if (!elem.isBlockFreeToMoveDown(matrix)) {\r\n                pom = false;\r\n            }\r\n        })\r\n        return pom;\r\n    }\r\n\r\n    areBlocksFreeToMoveDownNumber(matrix: any) {\r\n        let pom = 0;\r\n        this.blocksArr.forEach(elem => {\r\n            if (!elem.isBlockFreeToMoveDown(matrix)) {\r\n                pom += 1;\r\n            }\r\n        })\r\n        if(pom>0){\r\n            if (this.blocksArr[0].left == this.blocksArr[3].left && this.blocksArr[0].left == this.blocksArr[1].left && this.blocksArr[0].left == this.blocksArr[2].left){\r\n                pom == 4;\r\n            }\r\n            else if (this.blocksArr[0].top == this.blocksArr[3].top && this.blocksArr[0].top == this.blocksArr[1].top && this.blocksArr[0].top == this.blocksArr[2].top){\r\n                \r\n            }\r\n            else if (this.blocksArr[0].left == this.blocksArr[3].left && this.blocksArr[0].left == this.blocksArr[1].left && this.blocksArr[0].top == this.blocksArr[2].top){\r\n                pom *= 2;\r\n            }\r\n            else if (this.blocksArr[0].top == this.blocksArr[3].top && this.blocksArr[0].top == this.blocksArr[1].top && this.blocksArr[0].left == this.blocksArr[2].left){\r\n                pom+=1;\r\n            }\r\n            else if (this.blocksArr[0].top == this.blocksArr[2].top && this.blocksArr[0].top == this.blocksArr[1].top && this.blocksArr[2].left == this.blocksArr[3].left){\r\n                pom+=1;\r\n            }\r\n            else if (this.blocksArr[0].left == this.blocksArr[2].left && this.blocksArr[0].left == this.blocksArr[1].left && this.blocksArr[2].top == this.blocksArr[3].top){\r\n                pom*=2;\r\n            }\r\n            else if (this.blocksArr[0].left == this.blocksArr[2].left && this.blocksArr[0].left == this.blocksArr[1].left && this.blocksArr[1].top == this.blocksArr[3].top){\r\n                pom*=2;\r\n            }\r\n            else if (this.blocksArr[0].top == this.blocksArr[2].top && this.blocksArr[0].top == this.blocksArr[1].top && this.blocksArr[1].left == this.blocksArr[3].left){\r\n                pom+=1;\r\n            }\r\n            else if (this.blocksArr[0].left == this.blocksArr[2].left && this.blocksArr[1].left == this.blocksArr[3].left && this.blocksArr[0].top == this.blocksArr[1].top){\r\n                pom*=2;\r\n            }\r\n            else if (this.blocksArr[0].top == this.blocksArr[2].top && this.blocksArr[1].top == this.blocksArr[3].top && this.blocksArr[0].left == this.blocksArr[1].left){\r\n                pom+=1;\r\n            }\r\n            else if (this.blocksArr[0].left == this.blocksArr[1].left && this.blocksArr[2].left == this.blocksArr[3].left && this.blocksArr[0].top == this.blocksArr[2].top){\r\n                pom*=2;\r\n            }\r\n            else if (this.blocksArr[0].top == this.blocksArr[1].top && this.blocksArr[2].top == this.blocksArr[3].top && this.blocksArr[0].left == this.blocksArr[2].left){\r\n                pom+=1;\r\n            }\r\n        }\r\n        return pom;\r\n    }\r\n\r\n    rotate() {\r\n        let i = this.currentPosition;\r\n        let blockStates = this.coordiantesArr\r\n        if (i < blockStates.length - 1) {\r\n            i += 1;\r\n            this.blocksArr = this.fillArr(this.moveAdjustment(blockStates[i]), this.size, this.columns);\r\n            this.currentPosition = i;\r\n        }\r\n        else {\r\n            i = 0;\r\n            this.blocksArr = this.fillArr(this.moveAdjustment(blockStates[i]), this.size, this.columns);\r\n            this.currentPosition = i;\r\n        }\r\n\r\n    }\r\n    moveAdjustment(blocksArr: any) {\r\n        let arr: any[] = [];\r\n        blocksArr.forEach((elem: any) => {\r\n            arr.push({ x: elem.x + this.left, y: elem.y + this.top });\r\n        })\r\n        return arr;\r\n    }\r\n    areBlocksFreeToRotate(matrix: any) {\r\n        let pom = true;\r\n        this.blocksArr.forEach(elem => {\r\n            if (!elem.isBlockFreeToRotate(matrix)) {\r\n                pom = false;\r\n            }\r\n        })\r\n        return pom;\r\n    }\r\n    areBlockOutOfBoundsLeft() {\r\n        let pom = true;\r\n        this.blocksArr.forEach(elem => {\r\n            if (elem.left <= 0) {\r\n                pom = false;\r\n            }\r\n        })\r\n        return pom;\r\n    }\r\n    areBlockOutOfRotateBoundsLeft() {\r\n        let pom = true;\r\n        this.blocksArr.forEach(elem => {\r\n            if (elem.left < 0) {\r\n                pom = false;\r\n            }\r\n        })\r\n        return pom;\r\n    }\r\n    areBlockOutOfBoundsRight() {\r\n        let pom = true;\r\n        this.blocksArr.forEach(elem => {\r\n            if (elem.left >= (this.columns - 1) * this.size) {\r\n                pom = false;\r\n            }\r\n        })\r\n        return pom;\r\n    }\r\n    areBlockOutOfRotateBoundsRight() {\r\n        let pom = true;\r\n        this.blocksArr.forEach(elem => {\r\n            if (elem.left > (this.columns - 1) * this.size) {\r\n                pom = false;\r\n            }\r\n        })\r\n        return pom;\r\n    }\r\n}\r\n\r\nexport default UniversalShape","import io from 'socket.io-client';\r\nimport { LIST_UPDATE, REGISTER, WINNER, HIGHSCORE, GAME_OVER, INITIALIZE_GAME, USER_CONNECTED, USER_DISCONNECTED, GAME_UPDATE, GAME_INIT, USER_READY, GAME_REQUEST, GAME_START, VERIFY_USER, LOGOUT, USER_IN_GAME, REQUEST_DENIED, RESET, ADD_SHAPES, SPECTATE, SPECTATE_INFO, SEND_TO_SPECTATOR, DISPLAY_GAMES, GAME_SETUP, MULTIPLAYER } from './Events'\r\nimport UniversalShape from './UniversalShape';\r\n\r\nconst socketUrl = \"http://localhost:3231\"; // change to local ip with same port for testing // port must match port defined in socket\r\n\r\nclass ClientManager {\r\n    socket = io(socketUrl);\r\n    initSocket = () => {\r\n\r\n        this.socket.on('connect', () => {\r\n        })\r\n        return this.socket;\r\n    }\r\n    generateShapes = (columns: number, rows: number, blockSize: number): any[] => {\r\n        let shapes: any[] = [];\r\n        this.socket.on(GAME_INIT, (shapes: any) => {\r\n            let generatedShapes = shapes.map((elem: any) => {\r\n                return new UniversalShape(elem.coords, columns, rows, blockSize, elem.color);\r\n            })\r\n\r\n            shapes = generatedShapes;\r\n        })\r\n        return shapes;\r\n    }\r\n\r\n    initMainTetrisContext = (setGeneratedShapes: any, setReciever: any, addShapes: any, showAccepted: any, setRecievers: any, removeSpectator: any, opponentGameOver: any, removeReciever: any, setShapesCoords: any, setPlayerReady: any, setDifficulty: any, displayWinner: any) => {\r\n        this.socket.on(USER_READY, (obj: any) => {\r\n            if (obj.tf) {\r\n                setReciever(obj.user);\r\n                showAccepted(obj.user, true);\r\n            }\r\n        });\r\n\r\n        this.socket.on(WINNER, (winnerData: any) => {\r\n            displayWinner(winnerData);\r\n        })\r\n\r\n        this.socket.on(USER_DISCONNECTED, (obj: any) => {\r\n            removeReciever(obj.name);\r\n        })\r\n\r\n        this.socket.on(REQUEST_DENIED, (user: string) => {\r\n            showAccepted(user, false);\r\n        })\r\n\r\n        this.socket.on(RESET, (user: any) => {\r\n            removeSpectator(user);\r\n            removeReciever(user);\r\n        })\r\n\r\n        this.socket.on(ADD_SHAPES, (newShapes: any) => {\r\n            addShapes(newShapes);\r\n        });\r\n        this.socket.on(INITIALIZE_GAME, (obj: any) => {\r\n            setGeneratedShapes(obj.generatedShapes);\r\n            setShapesCoords(obj.generatedShapes)\r\n            setRecievers(obj.recievers);\r\n            setDifficulty(obj.difficulty);\r\n            setPlayerReady(true);\r\n        })\r\n\r\n        this.socket.on(GAME_OVER, (user: string) => {\r\n            opponentGameOver(user);\r\n        })\r\n    }\r\n\r\n    updateGame = (updateSecondCanvas: any) => {\r\n        this.socket.on(GAME_UPDATE, (obj: any) => {\r\n            updateSecondCanvas(obj);\r\n        })\r\n    }\r\n    spectatingGames = (updateSpectatingCanvas: any) => {\r\n        this.socket.on(SEND_TO_SPECTATOR, (obj: any) => {\r\n            updateSpectatingCanvas(obj);\r\n        })\r\n\r\n    }\r\n\r\n    initMenu = (setHighscore: any) => {\r\n        this.socket.on(HIGHSCORE, (result: any) => {\r\n            setHighscore(result);\r\n        })\r\n    }\r\n    initUserContainer = (displayUsers: any,\r\n        setSender: any, setRequest: any, startGame: any, setSide: any, setRecievers: any,\r\n        addSpectator: any, updateAvailableGames: any, setInitBtn: any, updateGameSetupScreen: any,\r\n        emitGameSetup: any, reset: any, removeInvitedPlayer: any, removeGameMaster: any) => {\r\n        this.socket.on(RESET, (user: string) => {\r\n            removeInvitedPlayer(user);\r\n            removeGameMaster(user);\r\n        })\r\n        this.socket.on(USER_CONNECTED, (allUsers: any) => {\r\n            displayUsers(allUsers);\r\n        })\r\n        this.socket.on(USER_DISCONNECTED, (obj: any) => {\r\n            displayUsers(obj.allUsers);\r\n        })\r\n\r\n        this.socket.on(INITIALIZE_GAME, (obj: any) => {\r\n            setSide(false);\r\n            setInitBtn(false);\r\n        })\r\n        this.socket.on(GAME_REQUEST, ({ sender }: any) => {\r\n            setSender(sender);\r\n        })\r\n        this.socket.on(GAME_START, ({ start }: any) => {\r\n            if (start) {\r\n                setRequest();\r\n                startGame();\r\n            }\r\n        })\r\n\r\n        this.socket.on(SPECTATE, (spectator: string) => {\r\n            addSpectator(spectator);\r\n        })\r\n        this.socket.on(SPECTATE_INFO, (recievers: any) => {\r\n            setRecievers(recievers);\r\n        })\r\n        this.socket.on(DISPLAY_GAMES, (gamesInProgress: any) => {\r\n            updateAvailableGames(gamesInProgress);\r\n        })\r\n        this.socket.on(GAME_SETUP, (obj: any) => {\r\n            updateGameSetupScreen(obj);\r\n        })\r\n        this.socket.on(USER_READY, (obj: any) => {\r\n            if (obj.tf)\r\n                emitGameSetup();\r\n            else reset();\r\n        })\r\n    }\r\n\r\n    initRegister = (setError: any, setDisplay: any) => {\r\n        this.socket.on(REGISTER, (success: boolean) => {\r\n            if(success){\r\n                setDisplay({target: {value: 3}})\r\n            }\r\n            else {\r\n                setError(\"User already exists!\");\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    emitGameUpdate = (matrix: any, shape: any, reciever: string[], sender: string, totalScore: number, score: number, acceleration: number, blockSize: number) => {\r\n        this.socket.emit(GAME_UPDATE, { matrix, shape, reciever, sender, totalScore, score, acceleration, blockSize });\r\n    }\r\n    emitUserInGame = (username: string) => {\r\n        this.socket.emit(USER_IN_GAME, { username });\r\n    }\r\n    emitLogout = () => {\r\n        this.socket.emit(LOGOUT);\r\n    }\r\n    emitUserConnected = (user: any) => {\r\n        this.socket.emit(USER_CONNECTED, user);\r\n    }\r\n    emitUserReady = (user: string, reqSender: string) => {\r\n        this.socket.emit(USER_READY, { user, reqSender });\r\n    }\r\n    emitGameRequest = (sender: string, reciever: string) => {\r\n        this.socket.emit(GAME_REQUEST, { sender, reciever });\r\n    }\r\n    emitGameStart = (to: string[], user: string) => {\r\n        this.socket.emit(GAME_START, { to, user });\r\n    }\r\n    emitVerifyUser = (nickname: string, password: string, setUser: any) => {\r\n        this.socket.emit(VERIFY_USER, nickname, password, setUser);\r\n    }\r\n    emitReset = (to: string[], user: string, keepGameMode? : boolean) => {\r\n        this.socket.emit(RESET, { to, user, keepGameMode });\r\n    }\r\n    emitAddShapes = (reciever: string[]) => {\r\n        this.socket.emit(ADD_SHAPES, reciever);\r\n    }\r\n    emitSpectate = (user: string, game: string) => {\r\n        this.socket.emit(SPECTATE, { user, game });\r\n    }\r\n    emitSpectatorData = (matrix: any, shape: any, spectator: string, user: string, totalScore: number, score: number, blockSize: number) => {\r\n        this.socket.emit(SEND_TO_SPECTATOR, { matrix, shape, spectator, user, totalScore, score, blockSize });\r\n    }\r\n    emitInitializeGame = (sender: string, recievers: string[], difficulty: number) => {\r\n        this.socket.emit(INITIALIZE_GAME, { sender, recievers, difficulty });\r\n    }\r\n    emitRequestDenied = (user: string, reqSender: string) => {\r\n        this.socket.emit(REQUEST_DENIED, { user, reqSender })\r\n    }\r\n    emitGameOver = (user: string, recievers: string[], score: number, totalScore: number, difficulty: number) => {\r\n        this.socket.emit(GAME_OVER, { user, recievers, score, totalScore, difficulty });\r\n    }\r\n    emitGameSetup = (master: string, recievers: string[]) => {\r\n        this.socket.emit(GAME_SETUP, { master, recievers });\r\n    }\r\n\r\n    emitRegister = (name: string, password: string) => {\r\n        this.socket.emit(REGISTER, { name, password })\r\n    }\r\n\r\n    emitListUpdate = () => {\r\n        this.socket.emit(LIST_UPDATE);\r\n    }\r\n\r\n    emitMultiplayer = (user: string) => {\r\n        this.socket.emit(MULTIPLAYER, user);\r\n    }\r\n\r\n}\r\n\r\nlet CM = new ClientManager();\r\nexport default CM;","import React from 'react';\r\n\r\nimport CM from './ClientManager';\r\n\r\nclass Register extends React.Component<{ setDisplay: any }, {\r\n    name: string, password: string, error: string;\r\n}> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            name: '',\r\n            password: '',\r\n            error: ''\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        CM.initRegister(this.setError, this.props.setDisplay);\r\n    }\r\n\r\n    register = (event: any) => {\r\n        event.preventDefault();\r\n        const { name, password } = this.state;\r\n        if (password.length > 5) {\r\n            CM.emitRegister(name, password);\r\n            this.setError(\"\");\r\n\r\n        }\r\n        else {\r\n            this.setError(\"Password must contain at least 6 characters!\");\r\n        }\r\n    }\r\n    changeName = (event: any) => {\r\n        event.preventDefault();\r\n        this.setState({\r\n            name: event.target.value\r\n        })\r\n    }\r\n    changePass = (event: any) => {\r\n        event.preventDefault();\r\n        this.setState({\r\n            password: event.target.value\r\n        })\r\n    }\r\n    setError = (error: string) => {\r\n        this.setState({ error });\r\n    }\r\n    render = () => {\r\n        const { error } = this.state;\r\n        const { setDisplay } = this.props;\r\n        return (\r\n            <div className='loginForm'>\r\n            <div className='loginFormTitle'>\r\n                        Registration\r\n            </div>\r\n            \r\n                <div className='error'>{error ? error : null}</div>\r\n                <form onSubmit={this.register}>\r\n\r\n                    <div className='loginFormText'>\r\n                        Enter username:\r\n            </div>\r\n                    <input\r\n                        onChange={this.changeName}\r\n                        type='text'\r\n                        placeholder='username...'></input>\r\n                    <div className='loginFormText'>\r\n                        Enter password:\r\n            </div>\r\n                    <input\r\n                        onChange={this.changePass}\r\n                        type='password'\r\n                        placeholder='password...'></input>\r\n                    <input type='submit' value={'Submit'}></input>\r\n                </form>\r\n                <div>\r\n                <button value={0} onClick={setDisplay}>Back</button>\r\n                <button value={1} onClick={setDisplay}>Login</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Register;\r\n","import React from 'react'\r\nimport CM from './ClientManager'\r\n\r\nclass LoginForm extends React.Component<{ setUser: any; setDisplay: any}, { nickname: string; error: string; password: string;}> {\r\n\r\n    textInput: HTMLInputElement | null | undefined;\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            nickname: \"\",\r\n            error: \"\",\r\n            password: \"\"\r\n        }\r\n    }\r\n    setError = (error: string) => {\r\n        this.setState({ error: error })\r\n    }\r\n    setUser = ({ user, isUser }: any) => {\r\n        if (isUser == 0) {\r\n            this.setError('User is already logged in!');\r\n        }\r\n        else if (isUser == 1) {\r\n            this.setError('Incorrect username or password!');\r\n        }\r\n        else if(isUser == 2){\r\n            this.props.setUser(user);\r\n            this.setError('');\r\n        }\r\n    }\r\n    handleChange = (event: any) => {\r\n        const { value } = event.target\r\n        this.setState({\r\n            nickname: value\r\n        })\r\n    }\r\n    handlePassword = (event: any) => {\r\n        const { value } = event.target\r\n        this.setState({\r\n            password: value\r\n        }) \r\n    }\r\n    handleSubmit = (event: any) => {\r\n        event.preventDefault();\r\n        const { nickname, password } = this.state;\r\n        CM.emitVerifyUser(nickname, password, this.setUser);\r\n    }\r\n\r\n    render() {\r\n        const { nickname, error } = this.state;\r\n        const {setDisplay}= this.props;\r\n        return (\r\n            <div className={'loginForm'}>\r\n            <div className='loginFormTitle'>\r\n            Login\r\n            </div>\r\n                <form onSubmit={this.handleSubmit}>\r\n                <div className=\"error\">{error ? error : null}</div>\r\n                    <div className='loginFormText'>Username:</div>\r\n                    <input\r\n                        ref={(input) => { this.textInput = input }}\r\n                        type='text'\r\n                        id='nickname'\r\n                        value={nickname}\r\n                        onChange={this.handleChange}\r\n                        maxLength={16}\r\n                        placeholder={'username'}\r\n                        autoComplete={'off'}\r\n                    />\r\n                    <div className='loginFormText'>Password:</div>\r\n                    <input\r\n                        \r\n                        type='password'\r\n                        id='password'\r\n                        onChange={this.handlePassword}\r\n                        maxLength={16}\r\n                        placeholder={'password'}\r\n                    />\r\n                    <input type=\"submit\" onClick={this.handleSubmit} value=\"Login\"></input>\r\n\r\n                    \r\n                </form>\r\n                <div>\r\n                <button value={0} onClick={setDisplay}>Back</button>\r\n                <button value={2} onClick={setDisplay}>Register</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LoginForm","import React from 'react';\r\n\r\nclass GameRequest extends React.Component<{ name: string, accept: any }, {}> {\r\n    accept = (event: any) => {\r\n        if(event.target.value == 1)\r\n        this.props.accept(true);\r\n        else if(event.target.value == 0)\r\n        this.props.accept(false);\r\n    }\r\n    render() {\r\n        return (\r\n            <div className={'request'}>\r\n            <p>\r\n            {this.props.name} wants to play a game.\r\n            </p>\r\n            <div>\r\n                <button onClick={this.accept} value={1}>Accept</button>\r\n                <button onClick={this.accept} value={0}>Decline</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GameRequest","import React from 'react'\r\n\r\nclass GameSetupScreen extends React.Component<\r\n    {\r\n        selectedPlayers: string[],\r\n        recievers: string[], user: string,\r\n        initializeGame: any,\r\n        denied: string[],\r\n        showInitBtn: boolean,\r\n        invitedPlayers: string[],\r\n        isPlayer: boolean,\r\n        gameMaster: string,\r\n\r\n    },\r\n    {}> {\r\n\r\n    createStringFromArray = (array: string[], str: string) => {\r\n        array.forEach(name => {\r\n            if (str) {\r\n                str += ', ' + name;\r\n            }\r\n            else str += name;\r\n        })\r\n        return str;\r\n    }\r\n\r\n    render() {\r\n        const { recievers, initializeGame, showInitBtn, invitedPlayers, isPlayer, gameMaster } = this.props;\r\n        \r\n      \r\n\r\n        return (\r\n            <div className={'gameSetup'}>\r\n                <p>Game Setup</p>\r\n\r\n                {invitedPlayers.length > 0 ?\r\n                    <div>\r\n                        <table className='tableLeft'>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td className='tdNarrow'>\r\n                                        Player 1\r\n                            </td>\r\n                                    <td className='tdWide' id='leftAlign'>\r\n                                        {gameMaster ? gameMaster : ' '}\r\n                                    </td>\r\n\r\n                                </tr>\r\n                                <tr>\r\n                                    <td className='tdNarrow'>\r\n                                        Player 3\r\n                            </td>\r\n                                    <td className='tdWide' id='leftAlign'>\r\n                                        {invitedPlayers[1] ? invitedPlayers[1] : '  '}\r\n                                    </td>\r\n\r\n                                </tr>\r\n\r\n                            </tbody>\r\n                        </table>\r\n                        <table className='tableRight'>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td className='tdWide' id='rightAlign'>\r\n                                        {invitedPlayers[0] ? invitedPlayers[0] : '  '}\r\n                                    </td>\r\n                                    <td className='tdNarrow'>\r\n                                        Player 2\r\n                                </td>\r\n\r\n                                </tr>\r\n                                <tr>\r\n\r\n                                    <td className='tdWide' id='rightAlign'>\r\n                                        {invitedPlayers[2] ? invitedPlayers[2] : '  '}\r\n                                    </td>\r\n                                    <td className='tdNarrow'>\r\n                                        Player 4\r\n                                </td>\r\n                                </tr>\r\n\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                    : <p>Select players from left sidebar and then invite them or wait for an invite to enter a multiplayer game</p>}\r\n\r\n                \r\n                {(recievers.length > 0 && showInitBtn) ? <button className=\"roundBtn\" onClick={initializeGame} >Initialize Game</button> : null}\r\n                {isPlayer ? <div className=\"roundDiv\"><div className='innerRound'>Waiting for other players...</div></div> : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GameSetupScreen","import React from 'react';\r\nimport { values } from 'lodash';\r\nimport GameRequest from './GameRequest';\r\nimport CM from './ClientManager';\r\nimport GameSetupScreen from './GameSetupScreen';\r\n\r\n\r\nclass UserContainer extends React.Component<{\r\n    user: any, logout: any, setGeneratedShapes: any,\r\n    setRecievers: any, reciever: string[], startGame: any, isPlayerReady: boolean,\r\n    changeSpectatingStatus: any, running: boolean, reset: any,\r\n    addSpectator: any, initGame: any, denied: string[],\r\n    isSpectator: boolean\r\n},\r\n    {\r\n        users: any[],\r\n        reqSent: boolean,\r\n        sender: string,\r\n        showReq: boolean,\r\n        showSide: boolean,\r\n        selectedPlayers: string[],\r\n        games: any,\r\n        showInitBtn: boolean,\r\n        showStartBtn: boolean,\r\n        invitedPlayers: string[],\r\n        accepted: string[],\r\n        isGameMaster: boolean,\r\n        isPlayer: boolean,\r\n        gameMaster: string,\r\n\r\n    }>{\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            users: [],\r\n            reqSent: false,\r\n            sender: '',\r\n            showReq: true,\r\n            showSide: true,\r\n            selectedPlayers: [],\r\n            games: [],\r\n            showInitBtn: true,\r\n            showStartBtn: true,\r\n            invitedPlayers: [],\r\n            accepted: [],\r\n            isGameMaster: false,\r\n            isPlayer: false,\r\n            gameMaster: '',\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        CM.initUserContainer(\r\n            this.displayUsers,\r\n            this.setSender, this.finalizeStart,\r\n            this.showRequest, this.setSide,\r\n            this.props.setRecievers, this.props.addSpectator,\r\n            this.updateAvailableGames,\r\n            this.setInitBtn, this.updateGameSetupScreen, this.emitGameSetup,\r\n            this.reset, this.removeInvitedPlayer, this.removeGameMaster\r\n        )\r\n        CM.emitListUpdate();\r\n    }\r\n\r\n    componentWillUpdate() {\r\n        const { reciever, user, isPlayerReady } = this.props;\r\n        const { gameMaster } = this.state;\r\n        if (user == gameMaster && !isPlayerReady) {\r\n            CM.emitGameSetup(user, reciever);\r\n            \r\n        }\r\n    }\r\n    componentWillUnmount(){\r\n        const {isGameMaster, gameMaster, invitedPlayers} = this.state;\r\n        if(isGameMaster){\r\n            CM.emitReset(invitedPlayers, this.props.user, false);\r\n        }\r\n        else CM.emitReset([gameMaster], this.props.user, false);\r\n    }\r\n\r\n    updateGameSetupScreen = (obj: any) => {\r\n        \r\n        this.setState({\r\n            invitedPlayers: obj.recievers,\r\n            gameMaster: obj.master\r\n        })\r\n\r\n    }\r\n\r\n    removeGameMaster = (user: string) => {\r\n        const {gameMaster} = this.state;\r\n        if(user == gameMaster) {\r\n            this.reset();\r\n            CM.emitReset([], this.props.user, true);\r\n        }\r\n    }\r\n\r\n    finalizeStart = () => {\r\n        this.props.startGame();\r\n        this.setState({ showStartBtn: false })\r\n    }\r\n\r\n    setSender = (sender: string) => {\r\n        this.setState({ sender, reqSent: true })\r\n    }\r\n    setRequest = () => {\r\n        this.setState({ reqSent: true, showReq: false });\r\n    }\r\n    setSide = (status: boolean) => {\r\n        this.setState({ showSide: status });\r\n    }\r\n    showRequest = (status: boolean) => {\r\n        this.setState({\r\n            showReq: status,\r\n            reqSent: false\r\n        })\r\n    }\r\n\r\n\r\n    accept = (tf: boolean) => {\r\n        const { user, isSpectator, reciever, changeSpectatingStatus, setRecievers } = this.props;\r\n        const { sender } = this.state;\r\n        this.setState({ showReq: false });\r\n        if (tf) {\r\n\r\n            if (isSpectator) {\r\n                CM.emitReset(reciever, user, false);\r\n                changeSpectatingStatus(false);\r\n                setRecievers([]);\r\n                this.setInitBtn(true);\r\n            }\r\n\r\n            CM.emitUserReady(user, sender);\r\n            this.setState({\r\n                isGameMaster: false,\r\n                isPlayer: true\r\n            })\r\n        }\r\n        else {\r\n            CM.emitRequestDenied(user, sender);\r\n            if(!isSpectator)this.reset();\r\n        }\r\n    }\r\n    emitGameSetup = () => {\r\n        const { user, reciever } = this.props;\r\n        this.setState({ invitedPlayers: reciever })\r\n        CM.emitGameSetup(user, reciever);\r\n    }\r\n    removeInvitedPlayer = (user: string) => {\r\n        let {invitedPlayers}= this.state;\r\n        const index = invitedPlayers.indexOf(user);\r\n        if(index != -1){\r\n            invitedPlayers.splice(index, 1);\r\n            this.setState({\r\n                invitedPlayers\r\n            })\r\n        }\r\n    }\r\n\r\n    sendInvite = (event: any) => {\r\n        const { isPlayer } = this.state;\r\n        const { isSpectator, reciever, user, changeSpectatingStatus, setRecievers } = this.props;\r\n        let players = this.state.selectedPlayers;\r\n        let invited = this.state.invitedPlayers;\r\n        let index1 = players.indexOf(event.target.value);\r\n        let index2 = invited.indexOf(event.target.value);\r\n        if (!isPlayer) {\r\n            if (isSpectator) {\r\n                CM.emitReset(reciever, user, false);\r\n                changeSpectatingStatus(false);\r\n                setRecievers([]);\r\n                this.setInitBtn(true);\r\n            }\r\n            if (index1 == -1 && index2 == -1) {\r\n                players.push(event.target.value);\r\n                event.target.innerHTML = \"Invited\";\r\n                event.target.disabled = true;\r\n                event.target.style.backgroundColor = \"green\";\r\n                this.setState({ isGameMaster: true, gameMaster: user });\r\n                CM.emitGameRequest(user, event.target.value);\r\n            }\r\n        }\r\n    }\r\n\r\n    setInitBtn = (showInitBtn: boolean) => {\r\n        this.setState({ showInitBtn });\r\n    }\r\n\r\n\r\n    displayUsers = (allUsers: any) => {\r\n        const { user } = this.props;\r\n\r\n        let users: any = [];\r\n        users = values(allUsers).map((u) => {\r\n            if (u.name != user && !u.inGame && u.gameMode == 1) {\r\n                const className = (u.name.length >= 12) ? 'sideBtnSmall' : 'sideBtn';\r\n                return <div key={u.name} className={className}>{u.name}<button value={u.name} onClick={this.sendInvite}>Invite</button></div>;\r\n            }\r\n        })\r\n        /*let i =0;\r\n        while(i<20){\r\n            i++;\r\n            users.push(<div className='sideBtn'>Js<button>Invite</button></div>)\r\n        }*/\r\n        this.setState({ users: users })\r\n    }\r\n    updateAvailableGames = (games: any) => {\r\n        let users = values(games).map((u) => {\r\n            const className = (u.sender.length >= 12) ? 'sideBtnSmall' : 'sideBtn';\r\n            return <div className={className}>{u.sender}'s game<button value={u.sender} onClick={this.spectate}>Watch</button></div>;\r\n        })\r\n        this.setState({\r\n            games: users,\r\n        })\r\n    }\r\n    startGame = (event: any) => {\r\n        const { user, reciever } = this.props;\r\n        this.setState({ showReq: false });\r\n        setTimeout(() => CM.emitGameStart(reciever, user), 1500);\r\n    }\r\n    reset = () => {\r\n        let recievers = this.props.reciever;\r\n        if (this.state.gameMaster)\r\n            recievers.push(this.state.gameMaster);\r\n        CM.emitReset(recievers, this.props.user, true);\r\n\r\n        this.props.reset();\r\n        this.setState({\r\n            users: [],\r\n            reqSent: false,\r\n            sender: '',\r\n            showReq: true,\r\n            showSide: true,\r\n            selectedPlayers: [],\r\n            showInitBtn: true,\r\n            showStartBtn: true,\r\n            invitedPlayers: [],\r\n            accepted: [],\r\n            isGameMaster: false,\r\n            isPlayer: false,\r\n            gameMaster: ''\r\n\r\n        });\r\n\r\n    }\r\n\r\n    spectate = (event: any) => {\r\n        //this.reset();\r\n        CM.emitSpectate(this.props.user, event.target.value);\r\n        this.props.changeSpectatingStatus(true);\r\n        this.setInitBtn(false);\r\n    }\r\n\r\n    render = () => {\r\n        const { user, isPlayerReady, running, reciever, initGame, denied, isSpectator } = this.props;\r\n        const { sender, reqSent, showReq, showSide, games, showInitBtn, showStartBtn, invitedPlayers, selectedPlayers, isGameMaster, isPlayer, gameMaster } = this.state;\r\n        let displayRecievers = \"\";\r\n        let displayGames = null;\r\n        if (games && !running) {\r\n            displayGames = games;\r\n        }\r\n        reciever.forEach(name => {\r\n            if (displayRecievers == \"\") {\r\n                displayRecievers += name;\r\n            }\r\n            else displayRecievers += \", \" + name;\r\n        })\r\n        return (\r\n            <div className='setupWrapper'>\r\n                {(showSide && !isSpectator) ?\r\n                    <div className={'sideTab'}>\r\n                        <p>Available players:</p>{this.state.users}\r\n                    </div>\r\n                    : null}\r\n\r\n                {(showSide && isSpectator) ?\r\n                    <div className={'sideTab'}>\r\n                        <p>Games:</p>{displayGames}\r\n                    </div>\r\n                    : null}\r\n\r\n                {showInitBtn ?\r\n                    <div>\r\n\r\n                        <GameSetupScreen\r\n                            user={user}\r\n                            initializeGame={initGame}\r\n                            selectedPlayers={selectedPlayers}\r\n                            recievers={reciever} denied={denied}\r\n                            showInitBtn={showInitBtn && isGameMaster && !isPlayer}\r\n                            invitedPlayers={invitedPlayers}\r\n                            isPlayer={isPlayer}\r\n                            gameMaster={gameMaster}\r\n                        />\r\n                    </div> : null}\r\n\r\n                {(reqSent && showReq) ? <GameRequest name={sender} accept={this.accept} /> : null}\r\n                {(isPlayerReady && showStartBtn && isGameMaster) ? <div className='buttonsBlock'>\r\n\r\n                    <button className={'startBtn'} onClick={this.startGame}>Start</button><br></br>\r\n                </div> : null}\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UserContainer\r\n\r\n","import React from 'react'\r\n\r\nclass Canvas extends React.Component<\r\n    {\r\n         rows: number,\r\n        columns: number, blockSize: number, canvasFront: any,\r\n        canvasBack: any, running? : boolean, isPlayerReady?: boolean, fixed?: boolean\r\n    },\r\n    {}> {\r\n    constructor(props: any) {\r\n        super(props);\r\n       // this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\r\n    } \r\n    componentDidMount() {\r\n        const { canvasBack, canvasFront, rows, columns, blockSize } = this.props;\r\n        if (canvasBack) {\r\n            let c2: any = canvasBack.current;          \r\n            c2.width = columns * blockSize;\r\n            c2.height = rows * blockSize;\r\n            this.createGrid(c2.getContext('2d'));\r\n        }\r\n        if(canvasFront){\r\n            let c1: any = canvasFront.current;\r\n            c1.width = columns * blockSize;\r\n            c1.height = rows * blockSize;\r\n        }\r\n       \r\n        this.updateWindowDimensions();\r\n        window.addEventListener('resize', this.updateWindowDimensions);\r\n        \r\n    }\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.updateWindowDimensions);\r\n    }\r\n\r\n\r\n    updateWindowDimensions = () => {\r\n        const { canvasBack, canvasFront, rows, columns, blockSize, running, isPlayerReady, fixed } = this.props;\r\n        if(!running && isPlayerReady && !fixed){\r\n        if (canvasBack) {\r\n            let c2: any = canvasBack.current;          \r\n            c2.width = columns * blockSize;\r\n            c2.height = rows * blockSize;\r\n            this.createGrid(c2.getContext('2d'));\r\n        }\r\n        if(canvasFront){\r\n            let c1: any = canvasFront.current;\r\n            c1.width = columns * blockSize;\r\n            c1.height = rows * blockSize;\r\n        }\r\n    }\r\n    }\r\n    \r\n    createGrid = (ctx: any) => {\r\n        const { rows, columns, blockSize } = this.props;\r\n        ctx.lineWidth = 1;\r\n        ctx.strokeStyle = '#ccc';\r\n        for (let i = 1; i < rows; i++) {\r\n            ctx.beginPath()\r\n            ctx.moveTo(0, i * blockSize);\r\n            ctx.lineTo(columns * blockSize, i * blockSize);\r\n            ctx.stroke();\r\n        }\r\n        for (let i = 1; i < columns; i++) {\r\n            ctx.beginPath()\r\n            ctx.moveTo(i * blockSize, 0);\r\n            ctx.lineTo(i * blockSize, rows * blockSize);\r\n            ctx.stroke();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { rows, columns, blockSize, canvasFront, canvasBack } = this.props\r\n        const style = { \"height\": rows * blockSize, \"width\": columns * blockSize };\r\n        return (\r\n            <div >\r\n\r\n                <div className='canvasBlock'>\r\n                    <canvas className='FrontCanvas' style={style} ref={canvasFront}></canvas>\r\n                    <canvas className='BackCanvas' style={style} ref={canvasBack}></canvas>\r\n\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Canvas","import React from 'react';\r\n\r\nclass MiniCanvas extends React.Component<{\r\n    canvasSide: any, rowScore: number,\r\n     totalScore: number, blockSize: number, columns: number,\r\n      showSide: boolean, name: string, running?: boolean, isPlayerReady?: boolean\r\n},{}> {\r\n    constructor(props: any){\r\n        super(props);\r\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        const {canvasSide, columns, blockSize} = this.props;\r\n        if (canvasSide != null) {\r\n        let c3: any = canvasSide.current;\r\n        if(c3){\r\n            c3.width = columns / 2 * blockSize;\r\n            c3.height = blockSize * 2;\r\n        }\r\n        }\r\n        this.updateWindowDimensions();\r\n        window.addEventListener('resize', this.updateWindowDimensions);\r\n    }\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.updateWindowDimensions);\r\n    }\r\n\r\n\r\n    updateWindowDimensions() {\r\n        const { canvasSide, columns, blockSize, running, isPlayerReady } = this.props;\r\n        if(!running && isPlayerReady){\r\n            if (canvasSide != null) {\r\n                let c3: any = canvasSide.current;\r\n                if(c3){\r\n                    c3.width = columns / 2 * blockSize;\r\n                    c3.height = blockSize * 2;\r\n                }\r\n                }\r\n    }\r\n    }\r\n    render() {\r\n        const {canvasSide, rowScore, totalScore, blockSize, columns, showSide, name} = this.props;\r\n        const style2 = { \"height\": blockSize * 2, \"width\": columns / 2  * blockSize };      \r\n        return (\r\n            <div className='sideBlock'>\r\n                    {showSide ? <canvas className='SideCanvas' style={style2} ref={canvasSide}></canvas> : null }\r\n                    <div className={'score'}>\r\n                    <table className={'infoTable'}>\r\n                        <tbody>\r\n                        <tr>\r\n                            <td>User:</td><td className={'rightTD'}>{name}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Lines:</td><td className={'rightTD'}>{rowScore}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Score:</td><td className={'rightTD'}>{totalScore}</td>\r\n                        </tr>\r\n                        </tbody>\r\n                    </table>\r\n                    </div>\r\n                </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MiniCanvas;","import React from 'react';\r\n\r\nclass Popup extends React.Component<{user: string, accepted: boolean, resetPopup: any}, {}> {\r\n    close = () => {\r\n        this.props.resetPopup();\r\n    }\r\n    render() {\r\n        const {user, accepted} = this.props;\r\n        return (\r\n            <div className={'request'} >\r\n                \r\n                <p>\r\n                {user}{accepted ? ' accepted your request' : ' denied your request'}\r\n                </p>\r\n                <div>\r\n                <button onClick={this.close}>Close</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Popup;","import React from 'react';\r\n\r\nfunction WinnerPopup(props: any) {\r\n    return (\r\n        <div className='winnerPopup'>\r\n        <button onClick={props.close}>Close</button>\r\n        Winner is: {props.winner}<br></br>\r\n        Score is: {props.score}</div>\r\n    )\r\n}\r\n\r\nexport default WinnerPopup","import React from 'react';\r\nimport Canvas from './Canvas';\r\nimport UniversalShape from './UniversalShape';\r\nimport BaseBuildingSquare from './BaseBuildingSquare';\r\nconst { createEmptyMatrix, isRowComplete, createGrid } = require('./TetrisHelper')\r\nconst { generateShapes } = require('./Factories')\r\n\r\ninterface AutoProps {\r\n    rows: number, columns: number, blockSize: number\r\n}\r\ninterface AutoState {\r\n    index: number, moveCounter: number, matrix: any[], generatedShapes: any[], speed: number, intervalId: any\r\n}\r\n\r\nclass AutoComplete extends React.Component<AutoProps, AutoState> {\r\n    canvasBack = React.createRef<HTMLCanvasElement>();\r\n    canvasFront = React.createRef<HTMLCanvasElement>();\r\n\r\n    constructor(props: AutoProps) {\r\n        super(props);\r\n        let generatedShapes = this.setGeneratedShapes(generateShapes(1000, 7));\r\n        let matrix = createEmptyMatrix(props.columns, props.rows)\r\n        this.state = {\r\n            index: 0,\r\n            moveCounter: 0,\r\n            matrix,\r\n            generatedShapes,\r\n            speed: 50,\r\n            intervalId: null\r\n        }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        // this.setState({ matrix: this.props.createEmptyMatrix(), generatedShapes: this.setGeneratedShapes(generateShapes(1000, 7)) })\r\n        if (this.state.generatedShapes)\r\n            this.autoMove();\r\n\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.state.intervalId)\r\n    }\r\n\r\n    setGeneratedShapes = (shapes: any) => {\r\n        let generatedShapes = [];\r\n        const { columns, rows, blockSize } = this.props;\r\n        generatedShapes = shapes.map((elem: any) => {\r\n            const color = elem.color;\r\n            return new UniversalShape(elem.coords, columns, rows, blockSize, color);\r\n        });\r\n        return generatedShapes;\r\n    }\r\n\r\n    tempShape = (shape: UniversalShape): UniversalShape => {\r\n        let coordinatesArr: any[] = [];\r\n\r\n        shape.coordiantesArr.forEach((coords: any) => {\r\n            let innerC: any[] = []\r\n            coords.forEach((c: any) => {\r\n                innerC.push({ y: c.y, x: c.x });\r\n            })\r\n            coordinatesArr.push(innerC);\r\n        })\r\n        let copy: UniversalShape = new UniversalShape(coordinatesArr, shape.columns, shape.rows, shape.size, shape.color);\r\n        return copy;\r\n    }\r\n\r\n    numberOfFilledFields = (matrix: any[], newMatrix: any[]) => {\r\n        let counter = 0;\r\n        let max: number, maxNew: number, maxi = 0;\r\n        for (let i = 0; i < matrix.length - 1; i++) {\r\n            max = 0;\r\n            maxNew = 0;\r\n            matrix[i].forEach((element: any) => {\r\n                if (element.status) max++;\r\n            })\r\n            newMatrix[i].forEach((element: any) => {\r\n                if (element.status) maxNew++;\r\n            })\r\n            if (maxNew > max) {\r\n                counter = counter + (maxNew - max) * i;\r\n\r\n            }\r\n        }\r\n        return counter;\r\n    }\r\n\r\n    clearRow = (index: number) => {\r\n        const { columns } = this.props;\r\n        let mat = this.state.matrix;\r\n        function x() {\r\n            let sub: any[] = [];\r\n            for (let j = 0; j < columns; j++) {\r\n                sub.push({ status: false, color: 'white' });\r\n            }\r\n            return sub;\r\n        }\r\n        mat.splice(index, 1);\r\n        mat.unshift(x());\r\n\r\n        this.setState({\r\n            matrix: mat\r\n        })\r\n    }\r\n\r\n    autoMove = () => {\r\n        const { index, matrix, speed } = this.state;\r\n        let { generatedShapes } = this.state\r\n        const { columns, rows, blockSize } = this.props;\r\n        if (undefined == generatedShapes[index]) {\r\n            let gen = this.setGeneratedShapes(generateShapes(1000, 7));\r\n            generatedShapes = generatedShapes.concat(gen);\r\n            this.setState({ generatedShapes })\r\n        }\r\n        let shape: UniversalShape = generatedShapes[index];\r\n        const bestShape = this.findBestPosition(shape);\r\n        let rotation = 0;\r\n        let canvas = this.canvasFront.current;\r\n        let canvas2 = this.canvasBack.current;\r\n        if (canvas && canvas2) {\r\n            let ctx = canvas.getContext('2d');\r\n            let ctx2 = canvas2.getContext('2d');\r\n            let id = setInterval(() => {\r\n                this.setState({ intervalId: id });\r\n                if (rotation < bestShape.rotation) {\r\n                    shape.rotate();\r\n                    rotation++;\r\n                    if (ctx)\r\n                        ctx.clearRect(0, 0, 2000, 2000)\r\n                    if (shape)\r\n                        shape.updateCanvas(ctx);\r\n                }\r\n                else if (bestShape.bestShape.blocksArr)\r\n                    if (shape.blocksArr[0].left > bestShape.bestShape.blocksArr[0].left) {\r\n                        if (shape.areBlocksFreeToMoveLeft(matrix)) {\r\n                            shape.moveLeft();\r\n                            if (ctx)\r\n                                ctx.clearRect(0, 0, 2000, 2000)\r\n                            shape.updateCanvas(ctx);\r\n                        }\r\n                    }\r\n                    else if (shape && shape.blocksArr[0].left < bestShape.bestShape.blocksArr[0].left) {\r\n                        if (shape.areBlocksFreeToMoveRight(matrix)) {\r\n                            shape.moveRight();\r\n                            if (ctx)\r\n                                ctx.clearRect(0, 0, 2000, 2000)\r\n                            shape.updateCanvas(ctx);\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (shape && shape.areBlocksFreeToMoveDown(matrix)) {\r\n\r\n                            if (ctx)\r\n                                ctx.clearRect(0, 0, 2000, 2000);\r\n                            shape.updateCanvas(ctx);\r\n                            shape.moveDown();\r\n                        }\r\n                        else {\r\n                            shape.moveBack();\r\n                            shape.updateCanvas(ctx);\r\n                            let newMatrix = this.addShapeToMatrix(bestShape.bestShape, matrix);\r\n                            this.setState({ matrix: newMatrix, index: index + 1 })\r\n                            if (isRowComplete(columns, rows, matrix).length > 0) {\r\n                                isRowComplete(columns, rows, matrix).forEach((index: number) => {\r\n                                    this.clearRow(index);\r\n                                    if (ctx2)\r\n                                        ctx2.clearRect(0, 0, 2000, 2000)\r\n                                    createGrid(ctx2, columns, rows, blockSize);\r\n                                    this.fillCanvas(ctx2);\r\n                                });\r\n                            }\r\n                            if (ctx2)\r\n                                ctx2.clearRect(0, 0, 2000, 2000)\r\n                            createGrid(ctx2, columns, rows, blockSize);\r\n                            this.fillCanvas(ctx2);\r\n                            clearInterval(id);\r\n                            this.autoMove();\r\n                        }\r\n                    }\r\n            }, speed)\r\n        }\r\n\r\n    }\r\n\r\n    fillCanvas = (ctx: any) => {\r\n        const { matrix } = this.state;\r\n        const { columns, rows, blockSize } = this.props;\r\n        let temp: BaseBuildingSquare = new BaseBuildingSquare(0, blockSize, \"red\", blockSize)\r\n        for (let i = 0; i < rows; i++) {\r\n            for (let j = 0; j < columns; j++) {\r\n                if (matrix[i][j].status) {\r\n                    temp.draw(j * blockSize, i * blockSize, ctx, matrix[i][j].color);\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    copyBlocks = (blocks: BaseBuildingSquare[]): BaseBuildingSquare[] => {\r\n\r\n        let topNegative = false;\r\n        let leftNegative = false;\r\n        for (let i = 0; i < 4; i++) {\r\n            if (blocks[i].top < 0) topNegative = true;\r\n            if (blocks[i].left < 0) leftNegative = true;\r\n        }\r\n        let temp: BaseBuildingSquare[] = blocks.map(block => {\r\n\r\n            if (!topNegative && !leftNegative)\r\n                return new BaseBuildingSquare(block.left, block.top, block.color, block.size);\r\n            else return new BaseBuildingSquare(0, 0, block.color, block.size);\r\n        })\r\n        return temp\r\n    }\r\n\r\n    findBestPosition = (shape: UniversalShape) => {\r\n        const { rows, columns, blockSize } = this.props;\r\n        const { matrix } = this.state;\r\n        let counter = columns;\r\n        let max = 0;\r\n        let rowsToClean = 0, rowNum;\r\n        let bestShape: any = [];\r\n        let arr = this.copyMatrix(matrix);\r\n        let maxMoves = 0;\r\n        let moved = 0;\r\n        let rotation = 0;\r\n        let rowCountSum: number = 0;\r\n        let rowCountTemp: number = 0;\r\n\r\n        if (shape)\r\n            for (let j = 0; j < shape.coordiantesArr.length; j++) {\r\n                let temp: UniversalShape = this.tempShape(shape);\r\n                for (let i = 0; i < columns; i++) {\r\n                    temp = this.tempShape(shape);\r\n\r\n                    //if (temp.areBlocksFreeToRotate(matrix))\r\n                    temp.setBlocks(shape.fillArr(shape.coordiantesArr[j], blockSize, columns));\r\n                    if (temp.areBlocksFreeToMoveRight(matrix)) {\r\n                        while (temp.areBlockOutOfBoundsLeft()) temp.moveLeft();\r\n                        //if (i != 0) {\r\n                        for (let k = 0; k < i; k++)\r\n                            temp.moveRight();\r\n                        // }\r\n                        moved = 0;\r\n                        while (temp.areBlocksFreeToMoveDown(matrix)) {\r\n                            temp.moveDown();\r\n                            moved++;\r\n                        }\r\n                        counter = temp.areBlocksFreeToMoveDownNumber(matrix);\r\n                        temp.moveBack();\r\n\r\n                        arr = this.addShapeToMatrix(temp, arr);\r\n                        rowCountTemp = this.numberOfFilledFields(matrix, arr);\r\n                        rowNum = isRowComplete(columns, rows, arr).length\r\n                        if (this.isShapeAVerticalLine(temp)) {\r\n                            counter = 4;\r\n                            max = 4;\r\n                        }\r\n\r\n                        if (rowNum > 0 && counter == 4) {\r\n                            max = counter;\r\n                            bestShape = temp;\r\n                            rotation = j;\r\n                            rowsToClean = rowNum;\r\n                            return { bestShape, rotation };\r\n                        }\r\n                        else if (rowCountSum <= rowCountTemp && counter == 4) {\r\n\r\n                            max = counter;\r\n\r\n                            rowCountSum = rowCountTemp;\r\n                            maxMoves = moved;\r\n                            rotation = j;\r\n                            bestShape = temp;\r\n\r\n                        }\r\n\r\n                        else if (max <= counter && max != 4) {\r\n\r\n                            max = counter;\r\n                            rowCountSum = rowCountTemp;\r\n                            maxMoves = moved;\r\n                            rotation = j;\r\n                            bestShape = temp;\r\n\r\n                        }\r\n\r\n                        /*   else if (max < counter) {\r\n                               if (rowCountSum <= rowCountTemp) {\r\n       \r\n                                   max = counter;\r\n       \r\n                                   rowCountSum = rowCountTemp;\r\n                                   maxMoves = moved;\r\n                                   rotation = j;\r\n                                   bestShape = temp;\r\n                               }\r\n                               else if (!bestShape) {\r\n                                   bestShape = temp;\r\n                                   rotation = j\r\n                               }\r\n                           }*/\r\n                        /* rowCountSum = rowCountTemp;\r\n                         bestShape = temp;\r\n                         rotation = j;\r\n                         }\r\n                     \r\n                    else \r\n                   */\r\n                        /* if (rowNum > 0 && rowNum > rowsToClean) {\r\n                                bestShape = temp;\r\n                                rotation = j;\r\n                                rowsToClean = rowNum;\r\n                                \r\n                            }\r\n                            else if(rowCountSum<rowCountTemp){\r\n                                rowCountSum = rowCountTemp;\r\n                            if ((max < counter || this.isShapeAVerticalLine(temp)) && rowsToClean == 0) {\r\n                                if (this.isShapeAVerticalLine(temp) && max != 4) counter == 4;\r\n                                max = counter;\r\n                                \r\n                                if (maxMoves - 1 <= moved && moved > 4) {\r\n                                    maxMoves = moved;\r\n                                    rotation = j;\r\n                                    bestShape = temp;\r\n                                }\r\n                            }\r\n                                else if (!bestShape) {\r\n                                    bestShape = temp;\r\n                                    rotation = j\r\n                                }\r\n                            }*/\r\n                        else if (!bestShape) bestShape = temp;\r\n                        arr = this.removeShapeFromMatrix(temp, arr);\r\n                    }\r\n                }\r\n\r\n\r\n            }\r\n        return { bestShape, rotation }\r\n    }\r\n\r\n    getMatrixHeight = (columns: number, rows: number, matrix: any[]) => {\r\n        for (let i = 0; i < rows; i++) {\r\n            for (let j = 0; j < columns; j++) {\r\n                if (matrix[i][j].status) {\r\n                    return rows - i;\r\n                }\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n    getColumnHeight = (columnIndex: number, rows: number, matrix: any[]) => {\r\n        for (let i = 0; i < rows; i++) {\r\n\r\n            if (matrix[i][columnIndex].status) {\r\n                return rows - i;\r\n            }\r\n\r\n        }\r\n        return 0;\r\n    }\r\n\r\n\r\n\r\n    isShapeAVerticalLine = (shape: UniversalShape) => {\r\n        if (shape.blocksArr[0].left == shape.blocksArr[3].left && shape.blocksArr[0].left == shape.blocksArr[1].left && shape.blocksArr[0].left == shape.blocksArr[2].left) return true;\r\n        else return false;\r\n    }\r\n    doesShapeNeedOneBlock = (shape: UniversalShape) => {\r\n        if (\r\n            shape.blocksArr[0].left == shape.blocksArr[3].left && shape.blocksArr[0].left == shape.blocksArr[1].left\r\n        ) return true;\r\n        else return false;\r\n    }\r\n\r\n    copyMatrix = (matrix: any[]) => {\r\n        let newMatrix = matrix.map((row: any) => {\r\n            return row.map((field: any) => {\r\n                return { status: field.status, color: field.color };\r\n            })\r\n        });\r\n        return newMatrix\r\n    }\r\n\r\n    addShapeToMatrix = (shape: UniversalShape, matrix: any[]) => {\r\n        if (shape)\r\n            shape.blocksArr.forEach((element: any) => {\r\n                if (element && matrix) {\r\n                    if (matrix[Math.round(element.top / shape.size)]) {\r\n                        if (matrix[Math.round(element.top / shape.size)][Math.round(element.left / shape.size)]) {\r\n                            matrix[Math.round(element.top / shape.size)][Math.round(element.left / shape.size)].status = true;\r\n                            matrix[Math.round(element.top / shape.size)][Math.round(element.left / shape.size)].color = element.color;\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        return matrix;\r\n    }\r\n\r\n    removeShapeFromMatrix = (shape: any, matrix: any[]) => {\r\n        if (shape)\r\n            shape.blocksArr.forEach((element: any) => {\r\n                if (element && matrix) {\r\n                    if (matrix[Math.round(element.top / shape.size)]) {\r\n                        if (matrix[Math.round(element.top / shape.size)][Math.round(element.left / shape.size)]) {\r\n                            matrix[Math.round(element.top / shape.size)][Math.round(element.left / shape.size)].status = false;\r\n                            matrix[Math.round(element.top / shape.size)][Math.round(element.left / shape.size)].color = 'white';\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        return matrix;\r\n    }\r\n\r\n    changeSpeed = (event: any) => {\r\n        let speed: number = this.state.speed;\r\n        speed += (event.target.value) * 1;\r\n        if (speed >= 10) {\r\n            this.setState({ speed });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { rows, columns, blockSize } = this.props;\r\n        return (\r\n            <div className=\"transparent\">\r\n\r\n                <Canvas rows={rows} columns={columns} blockSize={blockSize} canvasBack={this.canvasBack} canvasFront={this.canvasFront} fixed={true} />\r\n                <button onClick={this.changeSpeed} value={-10}>Faster</button><button onClick={this.changeSpeed} value={10}>Slower</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AutoComplete","import React from 'react';\r\nimport BaseBuildingSquare from './BaseBuildingSquare';\r\nimport UniversalShape from './UniversalShape';\r\nimport UserContainer from './UserContainer';\r\nimport Canvas from './Canvas';\r\nimport MiniCanvas from './MiniCanvas';\r\nimport CM from './ClientManager';\r\nimport Popup from './Popup';\r\nimport WinnerPopup from './WinnerPopup';\r\nimport AutoComplete from './AutoComplete';\r\nconst { generateShapes } = require('./Factories')\r\nconst { createEmptyMatrix, isRowComplete, createGrid } = require('./TetrisHelper')\r\n\r\ninterface MyState {\r\n    currentShape: UniversalShape;\r\n    nextShape: UniversalShape;\r\n    allBlocks: UniversalShape[];\r\n    running: boolean;\r\n    matrix: any[];\r\n    score: number;\r\n    scorePlayer2: number;\r\n    totalScorePlayer2: number;\r\n    scorePlayer3: number;\r\n    totalScorePlayer3: number;\r\n    scorePlayer4: number;\r\n    totalScorePlayer4: number;\r\n    totalScore: number;\r\n    speed: number;\r\n    counterId: number;\r\n    delay: number;\r\n    baseDelay: number;\r\n    acceleration: number;\r\n    columns: number;\r\n    rows: number;\r\n    blockSize: number;\r\n    user: any;\r\n    recievers: string[];\r\n    generatedShapes: any;\r\n    generatedShapesIndex: number;\r\n    isPlayerReady: boolean;\r\n    spectators: string[];\r\n    isSpectator: boolean;\r\n    specCanvases: any;\r\n    reqAccepted: any;\r\n    denied: string[];\r\n    difficulty: number;\r\n    gameMode: number;\r\n    windowHeight: number;\r\n    windowWidth: number;\r\n    shapesCoords: any[];\r\n    winner: any;\r\n}\r\ninterface USCProps {\r\n    setDisplay: any;\r\n    user: any;\r\n    difficulty: number;\r\n    mode: number;\r\n}\r\n\r\nclass UniversalShapeContext extends React.Component<USCProps, MyState>{\r\n    canvasBack = React.createRef<HTMLCanvasElement>();\r\n    canvasFront = React.createRef<HTMLCanvasElement>();\r\n    canvasSide = React.createRef<HTMLCanvasElement>();\r\n    canvasBack2 = React.createRef<HTMLCanvasElement>();\r\n    canvasBack3 = React.createRef<HTMLCanvasElement>();\r\n    canvasBack4 = React.createRef<HTMLCanvasElement>();\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        let spect = (props.mode == 3) ? true : false;\r\n        this.state = {\r\n            currentShape: this.defaultShape(),\r\n            nextShape: this.defaultShape(),\r\n            allBlocks: [],\r\n            running: false,\r\n            matrix: [],\r\n            score: 0,\r\n            speed: 900,\r\n            counterId: -1,\r\n            delay: 1,\r\n            baseDelay: 20,\r\n            totalScore: 0,\r\n            acceleration: 0,\r\n            columns: 10,\r\n            rows: 20,\r\n            blockSize: 40,\r\n            user: props.user,\r\n            recievers: [],\r\n            scorePlayer2: 0,\r\n            totalScorePlayer2: 0,\r\n            scorePlayer3: 0,\r\n            totalScorePlayer3: 0,\r\n            scorePlayer4: 0,\r\n            totalScorePlayer4: 0,\r\n            generatedShapes: null,\r\n            generatedShapesIndex: 0,\r\n            isPlayerReady: false,\r\n            spectators: [],\r\n            isSpectator: spect,\r\n            specCanvases: null,\r\n            reqAccepted: null,\r\n            denied: [],\r\n            difficulty: props.difficulty,\r\n            gameMode: props.mode,\r\n            windowHeight: window.innerHeight,\r\n            windowWidth: window.innerWidth,\r\n            shapesCoords: [],\r\n            winner: null\r\n        }\r\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\r\n        this.onKeyUp = this.onKeyUp.bind(this);\r\n        this.handleKeyDown = this.handleKeyDown.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            matrix: createEmptyMatrix(10, 20)\r\n        })\r\n        window.addEventListener('keydown', this.handleKeyDown);\r\n        window.addEventListener('keyup', this.onKeyUp);\r\n        this.initSocket();\r\n\r\n        this.updateWindowDimensions();\r\n        window.addEventListener('resize', this.updateWindowDimensions);\r\n        if (this.state.gameMode == 1) {\r\n            this.singlePlayer();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.state.counterId);\r\n        CM.emitReset(this.state.recievers, this.state.user.name, false);\r\n\r\n        window.removeEventListener('resize', this.updateWindowDimensions);\r\n        window.removeEventListener('keydown', this.handleKeyDown);\r\n        window.removeEventListener('keyup', this.onKeyUp);\r\n\r\n        //   CM.emitLogout(this.stopGame)\r\n\r\n    }\r\n\r\n\r\n    updateWindowDimensions() {\r\n        const width = window.innerWidth;\r\n        const height = window.innerHeight;\r\n        this.setState({ windowWidth: width, windowHeight: height });\r\n        if (!this.state.running) {\r\n            let size = 40;\r\n            if (height >= 900) {\r\n                size = 40;\r\n            }\r\n            if (height < 900) {\r\n                size = 35;\r\n            }\r\n            if (height < 800) {\r\n                size = 30;\r\n            }\r\n            if (height < 700) {\r\n                size = 25;\r\n            }\r\n            this.setState({\r\n                blockSize: size\r\n\r\n            })\r\n            if (this.state.user) {\r\n\r\n                const shapes = this.setGeneratedShapes(this.state.shapesCoords);\r\n                this.setState({ generatedShapes: shapes });\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    initSocket = () => {\r\n        const { columns, rows, blockSize } = this.state;\r\n        const generatedShapes = CM.generateShapes(columns, rows, blockSize);\r\n        this.setState({\r\n            generatedShapes,\r\n            nextShape: generatedShapes[0]\r\n        });\r\n        CM.initMainTetrisContext(this.setGeneratedShapes, this.setReciever, this.addShapes, this.showAccepted, this.setRecievers, this.removeSpectator, this.opponentGameOver, this.removeReciever, this.setShapesCoords, this.setPlayerReady, this.setDifficulty, this.displayWinner);\r\n        CM.updateGame(this.updateSecondCanvas);\r\n        CM.spectatingGames(this.updateSpectatingCanvas);\r\n\r\n    }\r\n\r\n    displayWinner = (winnerData: any) => {\r\n        this.setState({\r\n            winner: <WinnerPopup winner={winnerData.winner} score={winnerData.score} close={this.hideWinner} />\r\n        })\r\n    }\r\n    hideWinner = () => {\r\n        this.setState({ winner: null });\r\n    }\r\n\r\n    setShapesCoords = (shapesCoords: any[]) => {\r\n        this.setState({ shapesCoords })\r\n    }\r\n\r\n    setDifficulty = (difficulty: number) => {\r\n        this.setState({ difficulty });\r\n    }\r\n\r\n    setRecievers = (recievers: string[]) => {\r\n        this.setState({ recievers });\r\n    }\r\n\r\n    removeReciever = (reciever: string) => {        \r\n        let recs = this.state.recievers;\r\n        const { running } = this.state;\r\n        let index = recs.indexOf(reciever);\r\n        if (index != -1 && !running) {\r\n            recs.splice(index, 1);\r\n            this.setState({\r\n                recievers: recs\r\n            })\r\n        }\r\n    }\r\n\r\n    opponentGameOver = (user: string) => {\r\n        const { recievers } = this.state;\r\n        const index = recievers.indexOf(user);\r\n        if(index !=-1){\r\n        let canvas = this.getCanvasBasedOnRecieverIndex(index);\r\n        this.gameOver(canvas);\r\n        }\r\n    }\r\n\r\n    addShapes = (newCoords: any) => {\r\n        let currentShapes = this.state.generatedShapes;\r\n        let generatedShapes = [];\r\n        const { columns, rows, blockSize } = this.state;\r\n        let newShapes = newCoords.map((elem: any) => {\r\n            const color = elem.color;\r\n            return new UniversalShape(elem.coords, columns, rows, blockSize, color);\r\n        });\r\n        generatedShapes = currentShapes.concat(newShapes);\r\n        this.setState({\r\n            generatedShapes\r\n        });\r\n    }\r\n\r\n    addSpectator = (spectator: string) => {\r\n        let specs = this.state.spectators;\r\n        let index = specs.indexOf(spectator);\r\n        if (index == -1) {\r\n            specs.push(spectator);\r\n            this.setState({\r\n                spectators: specs\r\n            })\r\n        }\r\n    }\r\n\r\n    removeSpectator = (spectator: string) => {\r\n        let specs = this.state.spectators;\r\n        let index = specs.indexOf(spectator)\r\n        if (index != -1) {\r\n            specs.splice(index, 1);\r\n        }\r\n        this.setState({\r\n            spectators: specs\r\n        })\r\n    }\r\n\r\n    showAccepted = (user: string, tf: boolean) => {\r\n        this.setState({\r\n            reqAccepted: <Popup user={user} accepted={tf} resetPopup={this.resetPopup} />\r\n        })\r\n        if (!tf) {\r\n            let d = this.state.denied;\r\n            d.push(user);\r\n            this.setState({\r\n                denied: d\r\n            })\r\n        }\r\n        setTimeout(this.resetPopup, 5000);\r\n    }\r\n\r\n    resetPopup = () => {\r\n        this.setState({\r\n            reqAccepted: null\r\n        })\r\n    }\r\n\r\n    setGeneratedShapes = (shapes: any) => {\r\n        let generatedShapes = [];\r\n        const { columns, rows, blockSize } = this.state;\r\n        generatedShapes = shapes.map((elem: any) => {\r\n            const color = elem.color;\r\n            return new UniversalShape(elem.coords, columns, rows, blockSize, color);\r\n        });\r\n        this.setState({\r\n            generatedShapes,\r\n            nextShape: generatedShapes[0],\r\n\r\n        });\r\n        return generatedShapes;\r\n    }\r\n\r\n    changeSpectatingStatus = (tf: boolean) => {\r\n        this.setState({\r\n            isSpectator: tf\r\n        })\r\n    }\r\n\r\n    setUser = (user: any) => {\r\n        CM.emitUserConnected(user);\r\n        this.setState({ user })\r\n    }\r\n\r\n    logout = (e: any) => {\r\n        e.preventDefault();\r\n        CM.emitLogout();\r\n        this.setState({\r\n            currentShape: this.defaultShape(),\r\n            allBlocks: [],\r\n            running: false,\r\n            score: 0,\r\n            speed: 900,\r\n            counterId: -1,\r\n            delay: 1,\r\n            baseDelay: 20,\r\n            totalScore: 0,\r\n            acceleration: 0,\r\n            columns: 10,\r\n            rows: 20,\r\n            blockSize: 40,\r\n            user: null,\r\n            recievers: [],\r\n            scorePlayer2: 0,\r\n            totalScorePlayer2: 0,\r\n            generatedShapes: null,\r\n            generatedShapesIndex: 0,\r\n            isPlayerReady: false,\r\n            matrix: createEmptyMatrix(10, 20),\r\n            nextShape: this.defaultShape(),\r\n        })\r\n    }\r\n\r\n\r\n    deepCopyShape(obj: any): any {\r\n        var copy: any = obj;\r\n        if (null == obj || \"object\" != typeof obj) return obj;\r\n        if (obj instanceof Object) {\r\n            for (var attr in obj) {\r\n                if (obj.hasOwnProperty(attr)) copy[attr] = this.deepCopyShape(obj[attr]);\r\n            }\r\n            return copy;\r\n        }\r\n    }\r\n\r\n    updateSecondCanvas = (obj: any) => {\r\n        const { columns, blockSize, rows, recievers } = this.state;\r\n        let acc = this.state.acceleration;\r\n        const userIndex = recievers.indexOf(obj.sender);\r\n        let c2: any;\r\n        if (obj.acceleration > acc) {\r\n            this.setState({ acceleration: obj.acceleration });\r\n\r\n        }\r\n        const shape1 = new BaseBuildingSquare(0, 0, 'red', blockSize / 2);\r\n        switch (userIndex) {\r\n            case 0: {\r\n                c2 = this.canvasBack2.current; this.setState({\r\n                    totalScorePlayer2: obj.totalScore,\r\n                    scorePlayer2: obj.score\r\n                });\r\n            };\r\n                break;\r\n            case 1: {\r\n                c2 = this.canvasBack3.current;\r\n                this.setState({\r\n                    totalScorePlayer3: obj.totalScore,\r\n                    scorePlayer3: obj.score\r\n                });\r\n            }; break;\r\n            case 2: {\r\n                c2 = this.canvasBack4.current;\r\n                this.setState({\r\n                    totalScorePlayer4: obj.totalScore,\r\n                    scorePlayer4: obj.score\r\n                });\r\n            }; break;\r\n        }\r\n        if (c2) {\r\n            let ctx2: any = c2.getContext('2d');\r\n            ctx2.clearRect(0, 0, columns * blockSize / 2, rows * blockSize / 2);\r\n            let shape = new UniversalShape(obj.shape.coordiantesArr, columns, rows, blockSize / 2, 'red');\r\n            shape.defineNewProperties(obj.shape.blocksArr, 2, blockSize / obj.blockSize);\r\n            createGrid(ctx2, columns, rows, blockSize, 0.5);\r\n            shape.updateCanvas(ctx2)\r\n\r\n            for (let i = 0; i < rows; i++) {\r\n                for (let j = 0; j < columns; j++) {\r\n                    if (obj.matrix[i][j].status) {\r\n                        shape1.draw(j * blockSize / 2, i * blockSize / 2, ctx2, 'red');\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    getCanvasBasedOnRecieverIndex = (index: number) => {\r\n        let c2: any = this.canvasBack.current;\r\n        switch (index) {\r\n            case 0:\r\n                c2 = this.canvasBack2.current;\r\n                ;\r\n                break;\r\n            case 1:\r\n                c2 = this.canvasBack3.current;\r\n                ; break;\r\n            case 2:\r\n                c2 = this.canvasBack4.current;\r\n                ; break;\r\n            case 3:\r\n                c2 = this.canvasBack.current;\r\n                ; break;\r\n\r\n        }\r\n        return c2;\r\n    }\r\n\r\n    setScoreBasedOnRecieverIndex = (index: number, obj: any) => {\r\n        switch (index) {\r\n            case 0:\r\n                this.setState({\r\n                    totalScorePlayer2: obj.totalScore,\r\n                    scorePlayer2: obj.score\r\n                }); break;\r\n            case 1:\r\n                this.setState({\r\n                    totalScorePlayer3: obj.totalScore,\r\n                    scorePlayer3: obj.score\r\n                })\r\n                    ; break;\r\n            case 2:\r\n                this.setState({\r\n                    totalScorePlayer4: obj.totalScore,\r\n                    scorePlayer4: obj.score\r\n                })\r\n                    ; break;\r\n            case 3:\r\n                this.setState({\r\n                    totalScore: obj.totalScore,\r\n                    score: obj.score\r\n                })\r\n                    ; break;\r\n\r\n        }\r\n    }\r\n\r\n    updateSpectatingCanvas = (obj: any) => {\r\n        const { recievers, columns, blockSize, rows } = this.state;\r\n        let c2: any = this.canvasBack.current;\r\n        const userIndex = recievers.indexOf(obj.user);\r\n        const shape1 = new BaseBuildingSquare(0, 0, 'red', blockSize / 2);\r\n        c2 = this.getCanvasBasedOnRecieverIndex(userIndex);\r\n        this.setScoreBasedOnRecieverIndex(userIndex, obj);\r\n        if (c2) {\r\n            let ctx2: any = c2.getContext('2d');\r\n            ctx2.clearRect(0, 0, columns * blockSize / 2, rows * blockSize / 2);\r\n            let shape = new UniversalShape(obj.shape.coordiantesArr, columns, rows, blockSize / 2, 'red');\r\n            shape.defineNewProperties(obj.shape.blocksArr, 2, blockSize / obj.blockSize);\r\n            createGrid(ctx2, columns, rows, blockSize, 0.5);\r\n            shape.updateCanvas(ctx2)\r\n\r\n            for (let i = 0; i < rows; i++) {\r\n                for (let j = 0; j < columns; j++) {\r\n                    if (obj.matrix[i][j].status) {\r\n                        shape1.draw(j * blockSize / 2, i * blockSize / 2, ctx2, 'red');\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    handleKeyDown(event: any) {\r\n        event.preventDefault();\r\n        if (this.state.running) {\r\n            let c1: any = this.canvasFront.current;\r\n            const ctx1: any = c1.getContext('2d');\r\n            let shape = this.state.currentShape;\r\n            const mat = this.state.matrix;\r\n            const col = this.state.columns;\r\n            const row = this.state.rows;\r\n            const size = this.state.blockSize;\r\n            const acc = this.state.acceleration;\r\n            let score = this.state.totalScore;\r\n            let delay = 22 - acc;\r\n\r\n            if (event.keyCode == 39 && shape.areBlocksFreeToMoveRight(mat)) {\r\n                shape.moveRight();\r\n                this.setState({\r\n                    baseDelay: delay\r\n                })\r\n            }\r\n            else if (event.keyCode == 37 && shape.areBlocksFreeToMoveLeft(mat)) {\r\n                shape.moveLeft();\r\n                this.setState({\r\n                    baseDelay: delay\r\n                })\r\n            }\r\n            ctx1.clearRect(0, 0, col * size, row * size);\r\n            shape.updateCanvas(ctx1);\r\n            if (event.keyCode == 38) {\r\n                this.handleRotate();\r\n                this.setState({\r\n                    baseDelay: delay\r\n                })\r\n            }\r\n            if (event.keyCode == 40) {\r\n                this.setState({\r\n                    baseDelay: 1\r\n                })\r\n            }\r\n            if (event.keyCode == 32) {\r\n                let i = 0;\r\n                while (shape.areBlocksFreeToMoveDown(mat)) {\r\n                    shape.moveDown();\r\n                    i += 1;\r\n                }\r\n                if (!shape.areBlocksFreeToMoveDown(mat)) {\r\n                    this.state.currentShape.moveBack()\r\n                    this.state.currentShape.blocksArr.forEach((element: any) => {\r\n                        if (element) {\r\n                            mat[Math.round(element.top / size)][Math.round(element.left / size)].status = true;\r\n                            mat[Math.round(element.top / size)][Math.round(element.left / size)].color = element.color;\r\n                        }\r\n                    });\r\n                    this.setState({\r\n                        matrix: mat,\r\n                        totalScore: score + i\r\n                    })\r\n                    this.updateStateOfTheGame(shape);\r\n                    clearInterval(this.state.counterId);\r\n                    this.run();\r\n\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    onKeyUp(event: any) {\r\n        event.preventDefault();\r\n        if (event.keyCode == 40) {\r\n            let acc = this.state.acceleration;\r\n            this.setState({\r\n                baseDelay: 20 - acc\r\n            })\r\n        }\r\n    }\r\n\r\n    defaultShape = (): UniversalShape => {\r\n        return new UniversalShape([[{ x: 0, y: 0 }]], 10, 20, 40, 'red');\r\n    }\r\n\r\n    startGame = () => {\r\n\r\n        if (!this.state.running) {\r\n            const { user, gameMode } = this.state;\r\n            if (gameMode == 2)\r\n                CM.emitUserInGame(user.name);\r\n            const col = this.state.columns;\r\n            const row = this.state.rows;\r\n            const size = this.state.blockSize;\r\n\r\n            this.run();\r\n            let c1: any = this.canvasBack.current;\r\n            if (c1) {\r\n                const ctx1: any = c1.getContext('2d');\r\n                ctx1.clearRect(0, 0, col * size, row * size);\r\n                this.setState({\r\n                    matrix: createEmptyMatrix(col, row),\r\n                    score: 0,\r\n                    totalScore: 0\r\n                })\r\n                createGrid(ctx1, col, row, size);\r\n            }\r\n        }\r\n    }\r\n\r\n    run = () => {\r\n        this.setState({\r\n            running: true\r\n        })\r\n        const col = this.state.columns;\r\n        const row = this.state.rows;\r\n        const size = this.state.blockSize;\r\n        let arr = this.state.matrix;\r\n        const { generatedShapes, nextShape, recievers, user, gameMode, score, totalScore, difficulty } = this.state;\r\n        let index = this.state.generatedShapesIndex;\r\n        let acc = this.state.acceleration;\r\n        if (generatedShapes)\r\n            if (index + 10 == generatedShapes.length) {\r\n                if (gameMode == 2)\r\n                    CM.emitAddShapes(recievers);\r\n            }\r\n        this.setState({\r\n            baseDelay: 20 - acc\r\n        })\r\n        let c1: any = this.canvasFront.current;\r\n        if (c1) {\r\n            const ctx1: any = c1.getContext('2d');\r\n            index += 1;\r\n            this.setState({ generatedShapesIndex: index });\r\n            const shape = generatedShapes[index];\r\n\r\n            const next: UniversalShape = this.deepCopyShape(nextShape);\r\n            ctx1.clearRect(0, 0, col * size, row * size);\r\n            const sidec: any = this.canvasSide.current;\r\n            const sidectx = sidec.getContext('2d');\r\n            sidectx.clearRect(0, 0, col * size, row * size);\r\n            if (nextShape != null) {\r\n                nextShape.updateCanvas(ctx1);\r\n            }\r\n            if (sidectx) {\r\n                let tempShape = this.deepCopyShape(shape);\r\n                tempShape.fitToSide(2.5);\r\n                tempShape.updateCanvas(sidectx);\r\n                tempShape.fitToSide(-2.5);\r\n            }\r\n            this.setState({\r\n                currentShape: next,\r\n                nextShape: shape\r\n            })\r\n            if (isRowComplete(col, row, arr).length > 0) {\r\n                isRowComplete(col, row, arr).forEach((index: number) => {\r\n                    this.clearRow(index);\r\n                });\r\n            }\r\n            if (!this.isGameOver(shape, arr)) {\r\n                let inter: any = setInterval(() => this.moveShape(next, inter), 50);\r\n                this.setState({\r\n                    counterId: inter,\r\n                })\r\n            }\r\n            else {\r\n                let totalScore = this.state.totalScore - 10;\r\n                this.setState({\r\n                    running: false, totalScore\r\n                });\r\n                this.gameOver(c1);\r\n\r\n                CM.emitGameOver(user.name, recievers, score, totalScore, difficulty);\r\n            }\r\n        }\r\n    }\r\n    gameOver = (canvas: any) => {\r\n        if (canvas) {\r\n            let ctx = canvas.getContext('2d');\r\n            let size = canvas.width / 10 + \"px\";\r\n            ctx.font = \"bold \" + size + \" Verdana\";\r\n            ctx.textAlign = \"center\";\r\n            ctx.fillText(\"GAME OVER\", canvas.width / 2, canvas.height / 2)\r\n            ctx.strokeStyle = 'black';\r\n            ctx.strokeText(\"GAME OVER\", canvas.width / 2, canvas.height / 2)\r\n        }\r\n    }\r\n    moveShape = (shape: any, inter: any) => {\r\n        let delay = this.state.delay;\r\n\r\n        const { user, columns, rows, blockSize, totalScore, score, recievers, acceleration, spectators, gameMode } = this.state;\r\n        let arr = this.state.matrix;\r\n        if (user && shape) {\r\n            if (gameMode == 2) {\r\n                CM.emitGameUpdate(arr, shape, recievers, user.name, totalScore, score, acceleration, blockSize);\r\n            }\r\n\r\n        }\r\n        if (spectators) {\r\n            spectators.forEach(name => {\r\n                CM.emitSpectatorData(arr, shape, name, user.name, totalScore, score, blockSize);\r\n            })\r\n        }\r\n        if (delay <= this.state.baseDelay) {\r\n            delay++;\r\n            this.setState({\r\n                delay: delay\r\n            })\r\n        }\r\n        else {\r\n            this.setState({\r\n                delay: 1,\r\n                baseDelay: 20 - acceleration\r\n            })\r\n            let c1: any = this.canvasFront.current;\r\n            if (c1) {\r\n                const ctx1: any = c1.getContext('2d');\r\n                ctx1.clearRect(0, 0, columns * blockSize, rows * blockSize);\r\n\r\n                shape.moveDown();\r\n\r\n                if (shape.areBlocksFreeToMoveDown(arr))\r\n                    shape.updateCanvas(ctx1);\r\n            }\r\n            if (!shape.areBlocksFreeToMoveDown(arr)) {\r\n                this.state.currentShape.moveBack();\r\n                this.state.currentShape.blocksArr.forEach((element: any) => {\r\n                    arr[Math.round(element.top / blockSize)][Math.round(element.left / blockSize)].status = true;\r\n                    arr[Math.round(element.top / blockSize)][Math.round(element.left / blockSize)].color = element.color;\r\n                });\r\n                this.setState({\r\n                    matrix: arr,\r\n\r\n                })\r\n\r\n                this.updateStateOfTheGame(shape);\r\n                clearInterval(inter);\r\n                this.run();\r\n\r\n            }\r\n        }\r\n    }\r\n    stopGame = () => {\r\n        clearInterval(this.state.counterId);\r\n    }\r\n    updateStateOfTheGame = (shape: any) => {\r\n        const col = this.state.columns;\r\n        const row = this.state.rows;\r\n        const size = this.state.blockSize;\r\n        let mat = this.state.matrix;\r\n        let c1: any = this.canvasBack.current;\r\n        let total = this.state.totalScore;\r\n        const ctx1: any = c1.getContext('2d');\r\n        const rowsToClear = isRowComplete(col, row, mat);\r\n        if (rowsToClear.length > 0) {\r\n            switch (rowsToClear.length) {\r\n                case 1: total += 100; break;\r\n                case 2: total += 250; break;\r\n                case 3: total += 450; break;\r\n                case 4: total += 800; break;\r\n            }\r\n            rowsToClear.forEach((index: number) => {\r\n                this.clearRow(index);\r\n            });\r\n            ctx1.clearRect(0, 0, col * size, row * size);\r\n            createGrid(ctx1, col, row, size);\r\n        }\r\n\r\n        const shape1 = new BaseBuildingSquare(0, 0, 'blue', size)\r\n        for (let i = 0; i < row; i++) {\r\n            for (let j = 0; j < col; j++) {\r\n                if (mat[i][j].status) {\r\n                    shape1.draw(j * size, i * size, ctx1, mat[i][j].color);\r\n                }\r\n            }\r\n        }\r\n        total += 10;\r\n        let arr = this.state.allBlocks;\r\n        shape.moveBack();\r\n        arr.push(this.state.currentShape);\r\n        this.setState({\r\n            totalScore: total\r\n        })\r\n        let acc = this.state.acceleration;\r\n        if (this.state.totalScore > 400 * (acc + 1)) {\r\n            acc++;\r\n            if (acc < 20)\r\n                this.setState({\r\n                    acceleration: acc\r\n                })\r\n        }\r\n    }\r\n\r\n    isGameOver = (shape: any, matrix: any[]) => {\r\n        return !shape.areBlocksFreeToMoveDown(matrix)\r\n    }\r\n\r\n    clearRow = (index: number) => {\r\n        const col = this.state.columns;\r\n        let mat = this.state.matrix;\r\n        function x() {\r\n            let sub: any[] = [];\r\n            for (let j = 0; j < col; j++) {\r\n                sub.push({ status: false, color: 'white' });\r\n            }\r\n            return sub;\r\n        }\r\n        mat.splice(index, 1);\r\n        mat.unshift(x());\r\n        let score = this.state.score;\r\n        score += 1;\r\n\r\n        this.setState({\r\n            matrix: mat,\r\n            score: score,\r\n        })\r\n    }\r\n\r\n    handleMove = (event: any) => {\r\n        const col = this.state.columns;\r\n        const row = this.state.rows;\r\n        const size = this.state.blockSize;\r\n        if (this.state.running) {\r\n            const id = event.target.id;\r\n            let c1: any = this.canvasFront.current;\r\n            const ctx1: any = c1.getContext('2d');\r\n            let shape = this.state.currentShape;\r\n            const mat = this.state.matrix;\r\n\r\n            if (id == 'right' && shape.areBlocksFreeToMoveRight(mat)) {\r\n                shape.moveRight();\r\n            }\r\n            else if (id == 'left' && shape.areBlocksFreeToMoveLeft(mat)) {\r\n                shape.moveLeft();\r\n\r\n            }\r\n            ctx1.clearRect(0, 0, size * col, size * row);\r\n            shape.updateCanvas(ctx1);\r\n        }\r\n    }\r\n\r\n    handleRotate = () => {\r\n        const col = this.state.columns;\r\n        const row = this.state.rows;\r\n        const size = this.state.blockSize;\r\n        if (this.state.running) {\r\n            let shape: UniversalShape = this.deepCopyShape(this.state.currentShape);\r\n            let shapehelp = this.state.currentShape;\r\n            shape.rotate();\r\n            if (!shape.areBlockOutOfRotateBoundsLeft() || !shape.areBlockOutOfRotateBoundsRight()) {\r\n                shape.rotate();\r\n                shape.rotate();\r\n                shape.rotate();\r\n                this.setState({\r\n                    currentShape: shapehelp\r\n                })\r\n            }\r\n            else if (shape.areBlocksFreeToRotate(this.state.matrix)) {\r\n\r\n                let c1: any = this.canvasFront.current;\r\n                const ctx1: any = c1.getContext('2d');\r\n                ctx1.clearRect(0, 0, size * col, size * row);\r\n                shape.updateCanvas(ctx1);\r\n            }\r\n            else {\r\n                shape.rotate();\r\n                shape.rotate();\r\n                shape.rotate();\r\n                this.setState({\r\n                    currentShape: shapehelp\r\n                })\r\n            }\r\n\r\n            this.setState({\r\n                currentShape: shape\r\n            });\r\n        }\r\n    }\r\n    setReciever = (reciever: any) => {\r\n        let rec = this.state.recievers;\r\n        if (rec.length < 3) {\r\n            rec.push(reciever);\r\n        }\r\n        this.setState({\r\n            recievers: rec\r\n        })\r\n    }\r\n    reset = () => {\r\n        clearInterval(this.state.counterId);\r\n        this.setState({\r\n            currentShape: this.defaultShape(),\r\n            nextShape: this.defaultShape(),\r\n            allBlocks: [],\r\n            running: false,\r\n            matrix: createEmptyMatrix(10, 20),\r\n            score: 0,\r\n            speed: 900,\r\n            counterId: -1,\r\n            delay: 1,\r\n            baseDelay: 20,\r\n            totalScore: 0,\r\n            acceleration: 0,\r\n            columns: 10,\r\n            rows: 20,\r\n            blockSize: 40,\r\n            recievers: [],\r\n            scorePlayer2: 0,\r\n            totalScorePlayer2: 0,\r\n            scorePlayer3: 0,\r\n            totalScorePlayer3: 0,\r\n            scorePlayer4: 0,\r\n            totalScorePlayer4: 0,\r\n            generatedShapes: null,\r\n            generatedShapesIndex: 0,\r\n            isPlayerReady: false,\r\n            spectators: [],\r\n            isSpectator: false,\r\n            specCanvases: null,\r\n            reqAccepted: null,\r\n            denied: [],\r\n            difficulty: 7,\r\n            windowHeight: window.innerHeight,\r\n            windowWidth: window.innerWidth\r\n        })\r\n    }\r\n\r\n    generateSpecCanvases = () => {\r\n        const { rows, columns, blockSize, recievers, running, isPlayerReady } = this.state;\r\n        let canvases = [];\r\n        for (let i = 0; i < recievers.length; i++) {\r\n            let info = this.generateCanvasData(i);\r\n            if (info) {\r\n                let data = (recievers[i]) ? <div key={'canvas'+i} className={info.className}>\r\n                    <Canvas\r\n                        rows={rows}\r\n                        columns={columns}\r\n                        blockSize={blockSize / 2}\r\n                        canvasFront={null}\r\n                        canvasBack={info.canvasBack}\r\n                        running={false}\r\n                        isPlayerReady={true}\r\n\r\n                    />\r\n                    <MiniCanvas\r\n                        canvasSide={null}\r\n                        showSide={false}\r\n                        rowScore={info.rowScore}\r\n                        totalScore={info.totalScore}\r\n                        columns={columns}\r\n                        blockSize={blockSize}\r\n                        name={recievers[i]}\r\n                    />\r\n                </div> : null;\r\n                canvases.push(data);\r\n            }\r\n        }\r\n        return canvases;\r\n    }\r\n\r\n\r\n    generateCanvasData = (index: number) => {\r\n        const { score, scorePlayer2, scorePlayer3, scorePlayer4, totalScore, totalScorePlayer2, totalScorePlayer3, totalScorePlayer4 } = this.state;\r\n        let data = null;\r\n        switch (index) {\r\n            case 0: data = {\r\n                className: 'canvas1',\r\n                rowScore: scorePlayer2,\r\n                totalScore: totalScorePlayer2,\r\n                canvasBack: this.canvasBack2\r\n            }; break;\r\n            case 1: data = {\r\n                className: 'canvas2',\r\n                rowScore: scorePlayer3,\r\n                totalScore: totalScorePlayer3,\r\n                canvasBack: this.canvasBack3\r\n            }; break;\r\n            case 2: data = {\r\n                className: 'canvas3',\r\n                rowScore: scorePlayer4,\r\n                totalScore: totalScorePlayer4,\r\n                canvasBack: this.canvasBack4\r\n            }; break;\r\n            case 3: data = {\r\n                className: 'canvas4',\r\n                rowScore: score,\r\n                totalScore: totalScore,\r\n                canvasBack: this.canvasBack\r\n            }; break;\r\n        }\r\n        return data;\r\n    }\r\n\r\n    initGame = () => {\r\n        const { user, recievers, difficulty } = this.state;\r\n        CM.emitInitializeGame(user.name, recievers, difficulty);\r\n        this.setPlayerReady(true);\r\n    }\r\n\r\n    setPlayerReady = (tf: boolean) => {\r\n        this.setState({ isPlayerReady: tf })\r\n    }\r\n\r\n    singlePlayer = () => {\r\n        const shapesCoords = generateShapes(1000, this.state.difficulty);\r\n        const shapes = this.setGeneratedShapes(shapesCoords);\r\n        this.setState({\r\n            shapesCoords,\r\n            generatedShapes: shapes,\r\n            nextShape: shapes[0],\r\n            gameMode: 1,\r\n            isPlayerReady: true,\r\n\r\n        })\r\n        CM.emitInitializeGame(this.state.user.name, [], this.state.difficulty)\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        const {\r\n            isSpectator, columns,\r\n            rows, blockSize, score,\r\n            totalScore, user, recievers,\r\n            isPlayerReady, running,\r\n            reqAccepted, denied, gameMode, winner } = this.state;\r\n        const canvases = this.generateSpecCanvases();\r\n        return (\r\n            <div onKeyUp={this.onKeyUp} className='mainWrapper' >\r\n                <div>\r\n                    {gameMode == 2 || gameMode == 3 ?\r\n                        <div>\r\n\r\n                            <UserContainer\r\n                                setGeneratedShapes={this.setGeneratedShapes}\r\n                                reciever={recievers} startGame={this.startGame}\r\n                                user={user.name} logout={this.logout}\r\n                                setRecievers={this.setRecievers}\r\n                                isPlayerReady={isPlayerReady}\r\n                                changeSpectatingStatus={this.changeSpectatingStatus}\r\n                                running={running} reset={this.reset}\r\n                                addSpectator={this.addSpectator}\r\n                                initGame={this.initGame}\r\n                                denied={denied}\r\n                                isSpectator={isSpectator}\r\n                            />\r\n                           \r\n                                {!isPlayerReady && !isSpectator ?\r\n                                <div className=\"transparentCanvasBackground\">\r\n                                    <AutoComplete\r\n                                        rows={20}\r\n                                        columns={25}\r\n                                        blockSize={40}\r\n                                    /> \r\n                                    </div>: null}\r\n                                \r\n                            \r\n                        </div>\r\n                        : null}\r\n\r\n\r\n                    {(isPlayerReady) ? <div className={'main'}>\r\n                    <div className='mainCanvasWrapper'>\r\n                        <div className='wrap'>\r\n                            <Canvas\r\n                                rows={rows}\r\n                                columns={columns}\r\n                                blockSize={blockSize}\r\n                                canvasFront={this.canvasFront}\r\n                                canvasBack={this.canvasBack}\r\n                                running={running}\r\n                                isPlayerReady={isPlayerReady}\r\n                            />\r\n                        </div>\r\n                        <div className='sideWrap'>\r\n                            <MiniCanvas\r\n                                canvasSide={this.canvasSide}\r\n                                showSide={true}\r\n                                rowScore={score}\r\n                                totalScore={totalScore}\r\n                                columns={columns}\r\n                                blockSize={blockSize}\r\n                                name={user.name}\r\n                                running={running}\r\n                                isPlayerReady={isPlayerReady}\r\n                            />\r\n                            {gameMode == 1 ? <div>\r\n                                <button className=\"startBtn\" onClick={this.startGame}>Start</button>\r\n                            </div> : null}\r\n                        </div>\r\n                        </div>\r\n                        {canvases}\r\n                        {winner}\r\n                    </div> : null}\r\n                    {isSpectator ? <div className='main'> \r\n                        <br></br>\r\n                        {canvases}\r\n                    </div> : null}\r\n                </div>\r\n                {reqAccepted}\r\n\r\n            </div>\r\n\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default UniversalShapeContext","import React from 'react'\r\n\r\nfunction Highscore(props: any) {\r\n\r\n    let scores: any[] = [];\r\n\r\n    for (let i = 0; i < 10; i++) {\r\n        if (props.scores[i])\r\n            scores.push(<tr>\r\n                <td>{i+1}.</td>\r\n                <td>{props.scores[i].name}</td>\r\n                <td>{props.scores[i].score}</td>\r\n                <td>{props.scores[i].rows}</td>\r\n            </tr>)\r\n\r\n    }\r\n    return (\r\n        <div className=\"highscore\">\r\n        Highscores - {props.title}\r\n        <table>\r\n            <tbody>\r\n                \r\n                <tr>\r\n                    <td> </td>\r\n                    <td>Name</td>\r\n                    <td>Score</td>\r\n                    <td>Lines</td>\r\n                </tr>\r\n                {scores}\r\n            </tbody>\r\n        </table>-----------</div>\r\n    )\r\n}\r\n\r\nexport default Highscore","import React from 'react'\r\n\r\nfunction UserInfo(props: any) {\r\n    let show;\r\n    switch (props.gameMode) {\r\n        case 1: show = '- Game mode: Singleplayer'; break;\r\n        case 2: show = '- Game mode: Multiplayer'; break;\r\n        case 3: show = '- Game mode: Spectating'; break;\r\n        default: show = null; break;\r\n    }\r\n    \r\n    return (\r\n        <div className={\"userInfo\"}>\r\n            <div className='usernameDisplay'>\r\n                User: {props.user} {show}\r\n            </div>\r\n            <div className='buttonDisplay'>\r\n                <button className=\"resetBtn\" onClick={props.setDisplay} value={0}>Menu</button>\r\n                <button onClick={props.logout}>Logout</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserInfo\r\n\r\n//{props.reciever.length > 0 && props.isPlayerReady ? 'Users in game: ' + props.displayRecievers : null}","import React from 'react';\r\nimport UniversalShapeContext from './UniversalShapeContext';\r\nimport Highscore from './Highscore';\r\nimport CM from './ClientManager';\r\nimport AutoComplete from './AutoComplete';\r\nimport UserInfo from './UserInfo';\r\n\r\nclass Menu extends React.Component<{ user: any, logout: any }, { width: number, display: number; difficulty: number; highscore: any[], highscoreEasy: any[] }> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            display: 0,\r\n            difficulty: 7,\r\n            highscore: [],\r\n            highscoreEasy: [],\r\n            width: window.innerWidth\r\n        }\r\n    }\r\n    componentDidMount = () => {\r\n        this.setState({width: window.innerWidth})\r\n        // change MySQL connetion first\r\n        CM.initMenu(this.setHighscore)\r\n    }\r\n    setDisplay = (event: any) => {\r\n        const value = event.target.value * 1\r\n        if (value == 2 || value == 3) {\r\n            CM.emitMultiplayer(this.props.user.name)\r\n        }\r\n        this.setState({\r\n            display: event.target.value * 1\r\n        })\r\n        \r\n    }\r\n\r\n    setHighscore = (highscore: any) => {\r\n        highscore.mode == 'normal' ? this.setState({ highscore: highscore.result }) : this.setState({ highscoreEasy: highscore.result });\r\n        \r\n    }\r\n\r\n    setDifficulty = (event: any) => {\r\n        this.setState({\r\n            difficulty: event.target.value * 1,\r\n            display: 0\r\n        })\r\n    }\r\n\r\n    logout = () => {\r\n        CM.emitLogout();\r\n        this.props.logout();\r\n    }\r\n\r\n    render() {\r\n        const { display, difficulty, highscore, highscoreEasy, width } = this.state;\r\n        const { user } = this.props\r\n        let show = <div></div>;\r\n        switch (display) {\r\n            case 0:\r\n                show =\r\n                    \r\n                        <div className=\"leftMenu\">\r\n                            <p className='title2'>TETRIS</p>\r\n\r\n                            <div className=\"menuButtons\">\r\n\r\n                                <p>Menu</p>\r\n                                <button onClick={this.setDisplay} value={1}>SINGLEPLAYER</button>\r\n                                <button onClick={this.setDisplay} value={2}>MULTIPLAYER</button>\r\n                                <button onClick={this.setDisplay} value={3}>SPECTATE</button>\r\n                                <button onClick={this.setDisplay} value={4}>SETTINGS</button>\r\n                                <button onClick={this.setDisplay} value={5}>HIGHSCORES</button>\r\n                            </div>\r\n                        </div>\r\n\r\n                    ; break;\r\n            case 1:\r\n                show = <UniversalShapeContext setDisplay={this.setDisplay} difficulty={difficulty} user={user} mode={display} />;\r\n                \r\n                    ; break;\r\n            case 2:\r\n                show = <UniversalShapeContext setDisplay={null} difficulty={difficulty} user={user} mode={display} />\r\n                    ; break;\r\n            case 3:\r\n                show = <UniversalShapeContext setDisplay={null} difficulty={difficulty} user={user} mode={display} />\r\n                    ; break;\r\n            case 4:\r\n                show =\r\n                    <div className=\"leftMenu\">\r\n                        <p className='title2'>TETRIS</p>\r\n                        <div className=\"menuButtons\">\r\n                            <p>Select difficulty</p>\r\n                            <button onClick={this.setDifficulty} value={7}>NORMAL</button>\r\n                            <button onClick={this.setDifficulty} value={10}>EASY</button>\r\n                            <button onClick={this.setDisplay} value={0}>Back</button>\r\n                        </div>\r\n                    </div>\r\n                    ; break;\r\n            case 5:\r\n                show = <div className=\"leftMenu\"><div className=\"highscoreWrapper\">\r\n\r\n                    {highscore != [] ? <Highscore scores={highscore} title={\"Normal\"} /> : null}\r\n                    {highscoreEasy != [] ? <Highscore scores={highscoreEasy} title={\"Easy\"} /> : null}\r\n                    <button onClick={this.setDisplay} value={0}>Back</button>\r\n                </div>\r\n                </div>; break;\r\n        }\r\n\r\n\r\n        return (\r\n            <div className='mainWrapper'>\r\n                <UserInfo user={user.name} logout={this.logout} setDisplay={this.setDisplay} gameMode={display} />\r\n                <div className='menuWrapper'>\r\n                    {show}\r\n                    {display == 0 || display == 4 || display == 5 ?\r\n                        <AutoComplete\r\n                            rows={20}\r\n                            columns={20}\r\n                            blockSize={Math.round(width / 2 / 22)}\r\n                        /> : null}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Menu;","import React, { Component } from 'react';\r\nimport Register from './Register';\r\nimport LoginForm from './LoginForm';\r\nimport CM from './ClientManager'\r\nimport Menu from './Menu';\r\nimport { Router, Link } from 'react-router-dom';\r\nimport { Timeline, TimelineLite, TimelineMax, Power2, TweenLite, TweenMax } from 'gsap';\r\n\r\n\r\n\r\nclass Main extends Component<{}, { display: number; user: any }> {\r\n  title = React.createRef<HTMLDivElement>();\r\n  t = document.getElementsByClassName('title');\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      display: 0,\r\n      user: null\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.animate();\r\n  }\r\n  componentDidUpdate() {\r\n    if (this.state.display == 0) {\r\n      this.animate();\r\n    }\r\n  }\r\n  animate = () => {\r\n    let tl = new TimelineMax();\r\n    tl.fromTo(this.t, 1, { width: \"0\", left: '50%' }, { width: '100%', left: '0%' })\r\n      .fromTo(this.t, 1, { color: 'rgba(255, 255, 255, 0)' }, { color: '#595959', ease: Power2.easeInOut, }, \"-=0.5\");\r\n  }\r\n  setDisplay = (display: number) => {\r\n    this.setState({\r\n      display\r\n    })\r\n  }\r\n  handleClick = (event: any) => {\r\n    this.setState({ display: event.target.value });\r\n  }\r\n  setUser = (user: any) => {\r\n    CM.emitUserConnected(user);\r\n    this.setState({ user, display: 4 })\r\n  }\r\n\r\n  logout = () => {\r\n    this.setState({\r\n      display: 0,\r\n      user: null\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { display, user } = this.state;\r\n    return (\r\n      <div className='main-container'>\r\n\r\n\r\n\r\n        {user ? <div ><Menu user={user} logout={this.logout} /> </div> : <div>\r\n\r\n          {display == 0 ? <div>\r\n            <nav>\r\n              <div className=\"register\">\r\n                <button onClick={this.handleClick} value={1}>Login</button>\r\n                <button onClick={this.handleClick} value={2}>Register</button>\r\n                <Link className={'mainLink'} to=\"/about/\">About</Link>\r\n                <Link className={'mainLink'} to=\"/\">Main</Link>\r\n              </div>\r\n            </nav>\r\n            <div className='title' id={'title'} ref={this.title}>TETRIS</div>\r\n          </div> : null}\r\n          {display == 1 ? <div><LoginForm setUser={this.setUser} setDisplay={this.handleClick} /> </div> : null}\r\n          {display == 2 ? <div ><Register setDisplay={this.handleClick} /> </div> : null}\r\n          {display == 3 ? <div className=\"register\">\r\n            Register Successful!\r\n          <button onClick={this.handleClick} value={1}>Login</button>\r\n          </div> : null}</div>}\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nfunction About() {\r\n    return (\r\n        <div className='title'>\r\n           <Link to=\"/about/\">About</Link>\r\n            \r\n            <Link to=\"/\">Main</Link>\r\n            This is a tetris app.\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default About;","import React from 'react';\r\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\r\nimport Main from './Main';\r\nimport About from './About';\r\n\r\nfunction Nav () {\r\n    return (\r\n        <Router>\r\n            <div>\r\n            <Switch>\r\n            <Route path=\"/\" exact component={Main} />\r\n            <Route path=\"/about/\" component={About} />\r\n            </Switch>\r\n            </div>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default Nav;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Nav from './Nav';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Nav />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './styles/style.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = {\r\n\tUSER_CONNECTED: \"USER_CONNECTED\",\r\n\tUSER_DISCONNECTED: \"USER_DISCONNECTED\",\r\n\tGAME_UPDATE: \"GAME_UPDATE\",\r\n\tVERIFY_USER: \"VERIFY_USER\",\r\n\tLOGOUT: \"LOGOUT\",\r\n\tUSER_READY: \"USER_READY\",\r\n\tGAME_START: \"GAME_START\",\r\n\tGAME_INIT: \"GAME_INIT\",\r\n\tREADY: \"READY\",\r\n\tUSER_IN_GAME: \"USER_IN_GAME\",\r\n\tGAME_REQUEST: \"GAME_REQUEST\",\r\n\tREQUEST_DENIED: \"REQUEST_DENIED\",\r\n\tRESET: \"RESET\",\r\n\tADD_SHAPES: \"ADD_SHAPES\",\r\n\tSEND_TO_SPECTATOR: \"SEND_TO_SPECTATOR\",\r\n\tSPECTATE: \"SPECTATE\",\r\n\tSPECTATE_INFO: \"SPECTATE_INFO\",\r\n\tDISPLAY_GAMES: \"DISPLAY_GAMES\",\r\n\tINITIALIZE_GAME: \"INITIALIZE_GAME\",\r\n\tGAME_OVER: \"GAME_OVER\",\r\n\tGAME_SETUP: \"GAME_SETUP\",\r\n\tHIGHSCORE: \"HIGHSCORE\",\r\n\tWINNER: \"WINNER\",\r\n\tREGISTER: \"REGISTER\",\r\n\tLIST_UPDATE: \"LIST_UPDATE\",\r\n\tMULTIPLAYER: \"MULTIPLAYER\"\r\n\t\r\n}","\r\n\r\nfunction createEmptyMatrix (col, row) {\r\n    let arr = [];\r\n    function sub() {\r\n        let sub = [];\r\n        for (let j = 0; j < col; j++) {\r\n            sub.push({ status: false, color: 'white' });\r\n        }\r\n        return sub;\r\n    }\r\n    for (let i = 0; i < row; i++) {\r\n        arr.push(sub());\r\n    }\r\n    function x() {\r\n        let sub = [];\r\n        for (let j = 0; j < col; j++) {\r\n            sub.push({ status: true, color: 'black' });\r\n        }\r\n        return sub;\r\n    }\r\n    arr.push(x())\r\n    return arr;\r\n}\r\n\r\n function isRowComplete (col, row, arr) {\r\n    let numArr = []\r\n    for (let i = 0; i < row; i++) {\r\n        let counter = 0;\r\n        arr[i].forEach((subEl) => {\r\n            if (subEl.status) counter++;\r\n        })\r\n        if (counter === col) {\r\n            numArr.push(i);\r\n        }\r\n    }\r\n    return numArr;\r\n}\r\n\r\n function isGameOver (shape, matrix) {\r\n    return !shape.areBlocksFreeToMoveDown(matrix)\r\n}\r\n\r\n function createGrid (ctx, col, row, size, scale) {\r\n    if (scale) size = size / 2;\r\n    ctx.lineWidth = 1;\r\n    ctx.strokeStyle = '#ccc';\r\n    for (let i = 1; i < row; i++) {\r\n        ctx.beginPath()\r\n        ctx.moveTo(0, i * size);\r\n        ctx.lineTo(col * size, i * size);\r\n        ctx.stroke();\r\n    }\r\n    for (let i = 1; i < col; i++) {\r\n        ctx.beginPath()\r\n        ctx.moveTo(i * size, 0);\r\n        ctx.lineTo(i * size, row * size);\r\n        ctx.stroke();\r\n    }\r\n}\r\n\r\nmodule.exports = {\r\n\tcreateEmptyMatrix,\r\n\tisGameOver,\r\n    isRowComplete,\r\n    createGrid\r\n}","\r\nvar uuidv4 = require(\"uuid/v4\");\r\nvar shapeCoordinates = {\r\n    0: [\r\n        [{ x: 0, y: 0 }, { x: 1, y: 0 }, { x: 0, y: 1 }, { x: -1, y: 1 }], [{ x: 0, y: 0 }, { x: 0, y: -1 }, { x: 1, y: 0 }, { x: 1, y: 1 }]\r\n    ],\r\n    1: [\r\n        [{ x: 0, y: 0 }, { x: -1, y: 0 }, { x: 0, y: 1 }, { x: 1, y: 1 }], [{ x: 0, y: 0 }, { x: 0, y: 1 }, { x: 1, y: 0 }, { x: 1, y: -1 }]\r\n    ],\r\n    2: [\r\n        [{ x: 0, y: 0 }, { x: -1, y: 0 }, { x: 0, y: 1 }, { x: 1, y: 0 }], [{ x: 0, y: 0 }, { x: 0, y: 1 }, { x: 1, y: 0 }, { x: 0, y: -1 }],\r\n        [{ x: 0, y: 0 }, { x: 1, y: 0 }, { x: 0, y: -1 }, { x: -1, y: 0 }], [{ x: 0, y: 0 }, { x: 0, y: -1 }, { x: -1, y: 0 }, { x: 0, y: 1 }]\r\n    ],\r\n    3: [\r\n        [{ x: 0, y: 0 }, { x: 1, y: 0 }, { x: -1, y: 0 }, { x: 2, y: 0 }], [{ x: 0, y: 0 }, { x: 0, y: -1 }, { x: 0, y: -2 }, { x: 0, y: 1 }]\r\n    ],\r\n    4: [\r\n        [{ x: 0, y: 0 }, { x: 1, y: 0 }, { x: -1, y: 0 }, { x: -1, y: 1 }], [{ x: 0, y: 0 }, { x: 0, y: -1 }, { x: 0, y: 1 }, { x: 1, y: 1 }],\r\n        [{ x: 0, y: 0 }, { x: -1, y: 0 }, { x: 1, y: 0 }, { x: 1, y: -1 }], [{ x: 0, y: 0 }, { x: 0, y: 1 }, { x: 0, y: -1 }, { x: -1, y: -1 }]\r\n    ],\r\n    5: [\r\n        [{ x: 0, y: 0 }, { x: 1, y: 0 }, { x: -1, y: 0 }, { x: 1, y: 1 }], [{ x: 0, y: 0 }, { x: 0, y: -1 }, { x: 0, y: 1 }, { x: 1, y: -1 }],\r\n        [{ x: 0, y: 0 }, { x: -1, y: 0 }, { x: 1, y: 0 }, { x: -1, y: -1 }], [{ x: 0, y: 0 }, { x: 0, y: 1 }, { x: 0, y: -1 }, { x: -1, y: 1 }]\r\n    ],\r\n    6: [\r\n        [{ x: 0, y: 0 }, { x: 1, y: 0 }, { x: 0, y: 1 }, { x: 1, y: 1 }]\r\n    ],\r\n    7: [\r\n        [{ x: 0, y: 0 }]\r\n    ],\r\n    8: [\r\n        [{ x: 0, y: 0 }, { x: 1, y: 0 }], [{ x: 0, y: 0 }, { x: 0, y: 1 }]\r\n    ],\r\n    9: [\r\n        [{ x: 0, y: 0 }, { x: 1, y: 0 }, { x: -1, y: 0 }], [{ x: 0, y: 0 }, { x: 0, y: -1 }, { x: 0, y: 1 }]\r\n    ],\r\n};\r\nvar colors = {\r\n    0: 'OrangeRed', \r\n    1: 'blue',\r\n    2: 'yellow',\r\n    3: 'orange',\r\n    4: 'GreenYellow',\r\n    5: 'Aqua',\r\n    6: 'DeepPink',\r\n    7: 'dodgerblue',\r\n    8: 'red',\r\n    9: 'green'\r\n\r\n}\r\nconst createUser = ({name = \"\", socketID = null, inGame = false, isReady = false, score = 0, gameMode = 0, gameName = ''} = {})=>(\r\n\t{\r\n\t\tid:uuidv4(),\r\n\t\tname,\r\n\t\tsocketID,\r\n\t\tinGame,\r\n        isReady, \r\n        score, \r\n        gameMode,\r\n        gameName\r\n\t}\r\n)\r\n\r\nconst createGameData = ({matrix = []} = {})=>(\r\n\t{\r\n\t\tmatrix\t\r\n\t}\r\n)\r\nfunction generateShapes (max, difficulty) { \r\n\tlet index = Math.floor(Math.random() * Math.floor(difficulty));\r\n\tlet array = [];\r\n\tfor(var i = 0 ;i<max;i++){\r\n\t\tindex = Math.floor(Math.random() * Math.floor(difficulty));\r\n\t\tarray.push({coords: shapeCoordinates[index], color: colors[index]});\r\n\t\t\r\n\t}\r\n\treturn array;\r\n}\r\n\r\nmodule.exports = {\r\n\tcreateUser,\r\n\tcreateGameData,\r\n\tgenerateShapes\r\n}\r\n\r\n"],"sourceRoot":""}