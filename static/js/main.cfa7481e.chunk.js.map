{"version":3,"sources":["Events.js","TetrisHelper.js","Factories.js","BaseBuildingSquare.tsx","UniversalShape.tsx","ClientManager.ts","Register.tsx","LoginForm.tsx","GameRequest.tsx","GameSetupScreen.tsx","UserContainer.tsx","Canvas.tsx","MiniCanvas.tsx","Popup.tsx","WinnerPopup.tsx","AutoComplete.tsx","UniversalShapeContext.tsx","Highscore.tsx","UserInfo.tsx","Menu.tsx","Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","USER_CONNECTED","USER_DISCONNECTED","GAME_UPDATE","VERIFY_USER","LOGOUT","USER_READY","GAME_START","GAME_INIT","READY","USER_IN_GAME","GAME_REQUEST","REQUEST_DENIED","RESET","ADD_SHAPES","SEND_TO_SPECTATOR","SPECTATE","SPECTATE_INFO","DISPLAY_GAMES","INITIALIZE_GAME","GAME_OVER","GAME_SETUP","HIGHSCORE","WINNER","REGISTER","LIST_UPDATE","MULTIPLAYER","createEmptyMatrix","col","row","arr","sub","j","push","status","color","i","x","isGameOver","shape","matrix","areBlocksFreeToMoveDown","isRowComplete","numArr","_loop","counter","forEach","subEl","createGrid","ctx","size","scale","lineWidth","strokeStyle","beginPath","moveTo","lineTo","stroke","uuidv4","require","shapeCoordinates","0","y","1","2","3","4","5","6","7","8","9","colors","createUser","_ref","arguments","length","undefined","_ref$name","name","_ref$socketID","socketID","_ref$inGame","inGame","_ref$isReady","isReady","_ref$score","score","_ref$gameMode","gameMode","_ref$gameName","gameName","id","createGameData","_ref2$matrix","generateShapes","max","difficulty","index","Math","floor","random","array","coords","BaseBuildingSquare","left","top","Object","classCallCheck","this","fillStyle","fillRect","rect","abs","pom","UniversalShape","columns","rows","_this","coordiantesArr","blocksArr","currentPosition","setBlocks","blocks","fillArr","move","_this2","map","elem","_this3","_this4","moveDown","areBlockOutOfBoundsRight","moveRight","areBlockOutOfBoundsLeft","moveLeft","moveBack","_this5","updateCanvas","isBlockFreeToMoveLeft","isBlockFreeToMoveRight","isBlockFreeToMoveDown","blockStates","moveAdjustment","_this6","isBlockFreeToRotate","_this7","_this8","CM","socket","io","initSocket","on","blockSize","shapes","generatedShapes","initMainTetrisContext","setGeneratedShapes","setReciever","addShapes","showAccepted","setRecievers","removeSpectator","opponentGameOver","removeReciever","setShapesCoords","setPlayerReady","setDifficulty","displayWinner","obj","tf","user","winnerData","newShapes","recievers","updateGame","updateSecondCanvas","spectatingGames","updateSpectatingCanvas","initMenu","setHighscore","result","initUserContainer","displayUsers","setSender","setRequest","startGame","setSide","addSpectator","updateAvailableGames","setInitBtn","updateGameSetupScreen","emitGameSetup","reset","removeInvitedPlayer","removeGameMaster","allUsers","sender","_ref2","start","spectator","gamesInProgress","initRegister","setError","setDisplay","success","target","value","emitGameUpdate","reciever","totalScore","acceleration","emit","emitUserInGame","username","emitLogout","emitUserConnected","emitUserReady","reqSender","emitGameRequest","emitGameStart","to","emitVerifyUser","nickname","password","setUser","emitReset","keepGameMode","emitAddShapes","emitSpectate","game","emitSpectatorData","emitInitializeGame","emitRequestDenied","emitGameOver","master","emitRegister","emitListUpdate","emitMultiplayer","Register","props","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","register","event","preventDefault","_this$state","state","changeName","setState","changePass","error","render","react_default","a","createElement","className","onSubmit","onChange","type","placeholder","onClick","React","Component","LoginForm","textInput","isUser","handleChange","handlePassword","handleSubmit","_this$state2","ref","input","maxLength","autoComplete","GameRequest","accept","GameSetupScreen","createStringFromArray","str","_this$props","initializeGame","showInitBtn","invitedPlayers","isPlayer","gameMaster","UserContainer","finalizeStart","showStartBtn","reqSent","showReq","showSide","showRequest","isSpectator","changeSpectatingStatus","isGameMaster","_this$props2","indexOf","splice","sendInvite","_this$props3","players","selectedPlayers","invited","index1","index2","innerHTML","disabled","style","backgroundColor","users","values","u","key","games","spectate","_this$props4","setTimeout","accepted","_this$props5","isPlayerReady","running","initGame","denied","displayRecievers","displayGames","src_GameSetupScreen","src_GameRequest","_this$props6","Canvas","updateWindowDimensions","canvasBack","canvasFront","fixed","c2","current","width","height","getContext","c1","window","addEventListener","removeEventListener","MiniCanvas","bind","assertThisInitialized","canvasSide","c3","rowScore","style2","Popup","close","resetPopup","WinnerPopup","winner","AutoComplete","createRef","autoMove","tempShape","coordinatesArr","innerC","c","numberOfFilledFields","newMatrix","maxNew","element","clearRow","mat","unshift","speed","gen","concat","bestShape","findBestPosition","rotation","canvas","canvas2","ctx2","setInterval","intervalId","rotate","clearRect","areBlocksFreeToMoveLeft","areBlocksFreeToMoveRight","addShapeToMatrix","fillCanvas","clearInterval","temp","draw","copyBlocks","topNegative","leftNegative","block","rowNum","copyMatrix","moved","rowCountSum","rowCountTemp","k","areBlocksFreeToMoveDownNumber","isShapeAVerticalLine","removeShapeFromMatrix","getMatrixHeight","getColumnHeight","columnIndex","doesShapeNeedOneBlock","field","round","changeSpeed","moveCounter","src_Canvas","UniversalShapeContext","canvasBack2","canvasBack3","canvasBack4","nextShape","src_WinnerPopup","hideWinner","shapesCoords","recs","getCanvasBasedOnRecieverIndex","gameOver","newCoords","currentShapes","specs","spectators","reqAccepted","src_Popup","d","_this$state3","logout","e","currentShape","defaultShape","allBlocks","counterId","delay","baseDelay","scorePlayer2","totalScorePlayer2","generatedShapesIndex","_this$state4","acc","userIndex","shape1","totalScorePlayer3","scorePlayer3","totalScorePlayer4","scorePlayer4","defineNewProperties","setScoreBasedOnRecieverIndex","_this$state5","_this$state6","run","ctx1","_this$state7","next","deepCopyShape","sidectx","fitToSide","inter","moveShape","font","textAlign","fillText","strokeText","_this$state8","updateStateOfTheGame","stopGame","total","rowsToClear","handleMove","handleRotate","shapehelp","areBlockOutOfRotateBoundsLeft","areBlockOutOfRotateBoundsRight","areBlocksFreeToRotate","rec","specCanvases","windowHeight","innerHeight","windowWidth","innerWidth","generateSpecCanvases","_this$state9","canvases","info","generateCanvasData","data","src_MiniCanvas","_this$state10","_this$state11","singlePlayer","spect","mode","onKeyUp","handleKeyDown","copy","attr","hasOwnProperty","keyCode","_this$state12","src_UserContainer","src_AutoComplete","Highscore","scores","title","UserInfo","show","Menu","display","highscore","highscoreEasy","src_UniversalShapeContext","src_Highscore","src_UserInfo","Main","t","document","getElementsByClassName","animate","TimelineMax","fromTo","ease","Power2","easeInOut","handleClick","src_Menu","src_LoginForm","src_Register","App","src_Main","Boolean","location","hostname","match","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cfa7481e.chunk.js","sourcesContent":["module.exports = {\r\n\tUSER_CONNECTED: \"USER_CONNECTED\",\r\n\tUSER_DISCONNECTED: \"USER_DISCONNECTED\",\r\n\tGAME_UPDATE: \"GAME_UPDATE\",\r\n\tVERIFY_USER: \"VERIFY_USER\",\r\n\tLOGOUT: \"LOGOUT\",\r\n\tUSER_READY: \"USER_READY\",\r\n\tGAME_START: \"GAME_START\",\r\n\tGAME_INIT: \"GAME_INIT\",\r\n\tREADY: \"READY\",\r\n\tUSER_IN_GAME: \"USER_IN_GAME\",\r\n\tGAME_REQUEST: \"GAME_REQUEST\",\r\n\tREQUEST_DENIED: \"REQUEST_DENIED\",\r\n\tRESET: \"RESET\",\r\n\tADD_SHAPES: \"ADD_SHAPES\",\r\n\tSEND_TO_SPECTATOR: \"SEND_TO_SPECTATOR\",\r\n\tSPECTATE: \"SPECTATE\",\r\n\tSPECTATE_INFO: \"SPECTATE_INFO\",\r\n\tDISPLAY_GAMES: \"DISPLAY_GAMES\",\r\n\tINITIALIZE_GAME: \"INITIALIZE_GAME\",\r\n\tGAME_OVER: \"GAME_OVER\",\r\n\tGAME_SETUP: \"GAME_SETUP\",\r\n\tHIGHSCORE: \"HIGHSCORE\",\r\n\tWINNER: \"WINNER\",\r\n\tREGISTER: \"REGISTER\",\r\n\tLIST_UPDATE: \"LIST_UPDATE\",\r\n\tMULTIPLAYER: \"MULTIPLAYER\"\r\n\t\r\n}","\r\n\r\nfunction createEmptyMatrix (col, row) {\r\n    let arr = [];\r\n    function sub() {\r\n        let sub = [];\r\n        for (let j = 0; j < col; j++) {\r\n            sub.push({ status: false, color: 'white' });\r\n        }\r\n        return sub;\r\n    }\r\n    for (let i = 0; i < row; i++) {\r\n        arr.push(sub());\r\n    }\r\n    function x() {\r\n        let sub = [];\r\n        for (let j = 0; j < col; j++) {\r\n            sub.push({ status: true, color: 'black' });\r\n        }\r\n        return sub;\r\n    }\r\n    arr.push(x())\r\n    return arr;\r\n}\r\n\r\n function isRowComplete (col, row, arr) {\r\n    let numArr = []\r\n    for (let i = 0; i < row; i++) {\r\n        let counter = 0;\r\n        arr[i].forEach((subEl) => {\r\n            if (subEl.status) counter++;\r\n        })\r\n        if (counter === col) {\r\n            numArr.push(i);\r\n        }\r\n    }\r\n    return numArr;\r\n}\r\n\r\n function isGameOver (shape, matrix) {\r\n    return !shape.areBlocksFreeToMoveDown(matrix)\r\n}\r\n\r\n function createGrid (ctx, col, row, size, scale) {\r\n    if (scale) size = size / 2;\r\n    ctx.lineWidth = 1;\r\n    ctx.strokeStyle = '#ccc';\r\n    for (let i = 1; i < row; i++) {\r\n        ctx.beginPath()\r\n        ctx.moveTo(0, i * size);\r\n        ctx.lineTo(col * size, i * size);\r\n        ctx.stroke();\r\n    }\r\n    for (let i = 1; i < col; i++) {\r\n        ctx.beginPath()\r\n        ctx.moveTo(i * size, 0);\r\n        ctx.lineTo(i * size, row * size);\r\n        ctx.stroke();\r\n    }\r\n}\r\n\r\nmodule.exports = {\r\n\tcreateEmptyMatrix,\r\n\tisGameOver,\r\n    isRowComplete,\r\n    createGrid\r\n}","\r\nvar uuidv4 = require(\"uuid/v4\");\r\nvar shapeCoordinates = {\r\n    0: [\r\n        [{ x: 0, y: 0 }, { x: 1, y: 0 }, { x: 0, y: 1 }, { x: -1, y: 1 }], [{ x: 0, y: 0 }, { x: 0, y: -1 }, { x: 1, y: 0 }, { x: 1, y: 1 }]\r\n    ],\r\n    1: [\r\n        [{ x: 0, y: 0 }, { x: -1, y: 0 }, { x: 0, y: 1 }, { x: 1, y: 1 }], [{ x: 0, y: 0 }, { x: 0, y: 1 }, { x: 1, y: 0 }, { x: 1, y: -1 }]\r\n    ],\r\n    2: [\r\n        [{ x: 0, y: 0 }, { x: -1, y: 0 }, { x: 0, y: 1 }, { x: 1, y: 0 }], [{ x: 0, y: 0 }, { x: 0, y: 1 }, { x: 1, y: 0 }, { x: 0, y: -1 }],\r\n        [{ x: 0, y: 0 }, { x: 1, y: 0 }, { x: 0, y: -1 }, { x: -1, y: 0 }], [{ x: 0, y: 0 }, { x: 0, y: -1 }, { x: -1, y: 0 }, { x: 0, y: 1 }]\r\n    ],\r\n    3: [\r\n        [{ x: 0, y: 0 }, { x: 1, y: 0 }, { x: -1, y: 0 }, { x: 2, y: 0 }], [{ x: 0, y: 0 }, { x: 0, y: -1 }, { x: 0, y: -2 }, { x: 0, y: 1 }]\r\n    ],\r\n    4: [\r\n        [{ x: 0, y: 0 }, { x: 1, y: 0 }, { x: -1, y: 0 }, { x: -1, y: 1 }], [{ x: 0, y: 0 }, { x: 0, y: -1 }, { x: 0, y: 1 }, { x: 1, y: 1 }],\r\n        [{ x: 0, y: 0 }, { x: -1, y: 0 }, { x: 1, y: 0 }, { x: 1, y: -1 }], [{ x: 0, y: 0 }, { x: 0, y: 1 }, { x: 0, y: -1 }, { x: -1, y: -1 }]\r\n    ],\r\n    5: [\r\n        [{ x: 0, y: 0 }, { x: 1, y: 0 }, { x: -1, y: 0 }, { x: 1, y: 1 }], [{ x: 0, y: 0 }, { x: 0, y: -1 }, { x: 0, y: 1 }, { x: 1, y: -1 }],\r\n        [{ x: 0, y: 0 }, { x: -1, y: 0 }, { x: 1, y: 0 }, { x: -1, y: -1 }], [{ x: 0, y: 0 }, { x: 0, y: 1 }, { x: 0, y: -1 }, { x: -1, y: 1 }]\r\n    ],\r\n    6: [\r\n        [{ x: 0, y: 0 }, { x: 1, y: 0 }, { x: 0, y: 1 }, { x: 1, y: 1 }]\r\n    ],\r\n    7: [\r\n        [{ x: 0, y: 0 }]\r\n    ],\r\n    8: [\r\n        [{ x: 0, y: 0 }, { x: 1, y: 0 }], [{ x: 0, y: 0 }, { x: 0, y: 1 }]\r\n    ],\r\n    9: [\r\n        [{ x: 0, y: 0 }, { x: 1, y: 0 }, { x: -1, y: 0 }], [{ x: 0, y: 0 }, { x: 0, y: -1 }, { x: 0, y: 1 }]\r\n    ],\r\n};\r\nvar colors = {\r\n    0: 'OrangeRed', \r\n    1: 'blue',\r\n    2: 'yellow',\r\n    3: 'orange',\r\n    4: 'GreenYellow',\r\n    5: 'Aqua',\r\n    6: 'DeepPink',\r\n    7: 'dodgerblue',\r\n    8: 'red',\r\n    9: 'green'\r\n\r\n}\r\nconst createUser = ({name = \"\", socketID = null, inGame = false, isReady = false, score = 0, gameMode = 0, gameName = ''} = {})=>(\r\n\t{\r\n\t\tid:uuidv4(),\r\n\t\tname,\r\n\t\tsocketID,\r\n\t\tinGame,\r\n        isReady, \r\n        score, \r\n        gameMode,\r\n        gameName\r\n\t}\r\n)\r\n\r\nconst createGameData = ({matrix = []} = {})=>(\r\n\t{\r\n\t\tmatrix\t\r\n\t}\r\n)\r\nfunction generateShapes (max, difficulty) { \r\n\tlet index = Math.floor(Math.random() * Math.floor(difficulty));\r\n\tlet array = [];\r\n\tfor(var i = 0 ;i<max;i++){\r\n\t\tindex = Math.floor(Math.random() * Math.floor(difficulty));\r\n\t\tarray.push({coords: shapeCoordinates[index], color: colors[index]});\r\n\t\t\r\n\t}\r\n\treturn array;\r\n}\r\n\r\nmodule.exports = {\r\n\tcreateUser,\r\n\tcreateGameData,\r\n\tgenerateShapes\r\n}\r\n\r\n","class BaseBuildingSquare {\r\n    left: number;\r\n    top: number;\r\n    color: string;\r\n    size: number\r\n    constructor(left: number, top: number, color: string, size: number) {\r\n        this.left = left;\r\n        this.top = top;\r\n        this.color = color;\r\n        this.size = size\r\n    }\r\n    setTop(top: number) {\r\n        this.top = top;\r\n    }\r\n    updateCanvas(ctx: any, color?: string) {\r\n        \r\n        ctx.fillStyle = this.color;\r\n        if(color) ctx.fillStyle = color;\r\n        ctx.strokeStyle = 'black';\r\n        ctx.lineWidth = 2;\r\n        ctx.beginPath();\r\n        ctx.fillRect(this.left, this.top, this.size, this.size);\r\n        ctx.rect(this.left, this.top, this.size, this.size);\r\n        ctx.stroke();\r\n    }\r\n    draw(left: number, top: number, ctx: any, color: string) {\r\n        ctx.beginPath();\r\n        ctx.fillStyle = color;\r\n        ctx.strokeStyle = 'black';\r\n        ctx.lineWidth = 2;\r\n        ctx.fillRect(left, top, this.size, this.size);\r\n        ctx.rect(left, top, this.size, this.size);\r\n        ctx.stroke();\r\n    }\r\n    moveDown() {\r\n        this.top += this.size;\r\n    }\r\n    moveBack() {\r\n        this.top -= this.size;\r\n    }\r\n    moveLeft() {\r\n        this.left -= this.size;\r\n    }\r\n    moveRight() {\r\n        this.left += this.size;\r\n    }\r\n    isBlockFreeToMoveLeft(matrix: any) {\r\n        return !matrix[Math.abs(this.top / this.size)][Math.abs(this.left / this.size - 1)].status;\r\n    }\r\n    isBlockFreeToMoveRight(matrix: any) {\r\n        let pom = false;\r\n        if(null != matrix[Math.abs(this.top / this.size)][Math.abs(this.left / this.size + 1)])\r\n        if(!matrix[Math.abs(this.top / this.size)][Math.abs(this.left / this.size + 1)].status) pom = true;\r\n        return pom;\r\n    }\r\n    isBlockFreeToMoveDown(matrix: any) {\r\n        return !(matrix[Math.abs(this.top / this.size)][this.left / this.size].status)\r\n    }\r\n    isBlockFreeToRotate(matrix: any) {\r\n        return !(matrix[Math.abs(this.top / this.size)][Math.abs(this.left / this.size)].status)\r\n    }\r\n}\r\n\r\nexport default BaseBuildingSquare","import BaseBuildingSquare from \"./BaseBuildingSquare\";\r\n\r\nclass UniversalShape {\r\n    coordiantesArr: any[];\r\n    blocksArr: BaseBuildingSquare[];\r\n    top: number;\r\n    left: number;\r\n    columns: number;\r\n    rows: number;\r\n    size: number;\r\n    currentPosition: number;\r\n    color: string;\r\n    constructor(arr: any[], columns: number, rows: number, size: number, color: string) {\r\n        this.coordiantesArr = arr\r\n\r\n        this.top = 0;\r\n        this.left = 0;\r\n        this.rows = rows;\r\n        this.columns = columns;\r\n        this.size = size;\r\n        this.currentPosition = 0;\r\n        this.color = color;\r\n        this.blocksArr = this.fillArr(arr[0], size, columns);\r\n    }\r\n\r\n    setBlocks = (blocks: any[]) => {\r\n        this.blocksArr = blocks\r\n    }\r\n\r\n    fitToSide(move: number) {\r\n        this.blocksArr = this.blocksArr.map((elem: any) => {\r\n            return new BaseBuildingSquare((elem.left - move * this.size), elem.top , this.color, this.size)\r\n        });\r\n    }\r\n    defineNewProperties(blocksArr: any[], scale: number, size: number) {\r\n        this.blocksArr = blocksArr.map((elem: any) => {\r\n            return new BaseBuildingSquare(Math.floor(elem.left / scale * size), Math.floor(elem.top / scale * size), 'red', this.size)\r\n        });\r\n    }\r\n    fillArr(arr: any, size: number, columns: number): BaseBuildingSquare[] {\r\n        let array: BaseBuildingSquare[] = [];\r\n        arr.forEach((elem: any) => {\r\n            array.push(new BaseBuildingSquare((elem.x + Math.floor(columns / 2) - 1) * size, elem.y * size, this.color, size))\r\n        })\r\n        return array;\r\n    }\r\n    moveDown() {\r\n        this.blocksArr.forEach(elem => {\r\n            elem.moveDown();\r\n        })\r\n        this.top += 1;\r\n    }\r\n    moveRight() {\r\n        if (this.areBlockOutOfBoundsRight()) {\r\n            this.blocksArr.forEach(elem => {\r\n                elem.moveRight();\r\n            })\r\n            this.left += 1;\r\n        }\r\n    }\r\n    moveLeft() {\r\n        if (this.areBlockOutOfBoundsLeft()) {\r\n            this.blocksArr.forEach(elem => {\r\n                elem.moveLeft();\r\n            })\r\n            this.left -= 1;\r\n        }\r\n    }\r\n    moveBack(): void {\r\n        this.blocksArr.forEach(elem => {\r\n            elem.moveBack();\r\n        })\r\n    }\r\n    updateCanvas(ctx: any) {\r\n        this.blocksArr.forEach(elem => {\r\n            elem.updateCanvas(ctx, this.color);\r\n        })\r\n    }\r\n    areBlocksFreeToMoveLeft(matrix: any) {\r\n        let pom = true;\r\n        this.blocksArr.forEach(elem => {\r\n            if (!elem.isBlockFreeToMoveLeft(matrix)) {\r\n                pom = false;\r\n            }\r\n        })\r\n        return pom;\r\n    }\r\n    areBlocksFreeToMoveRight(matrix: any) {\r\n        let pom = true;\r\n        this.blocksArr.forEach(elem => {\r\n            if (!elem.isBlockFreeToMoveRight(matrix)) {\r\n                pom = false;\r\n            }\r\n        })\r\n        return pom;\r\n    }\r\n    areBlocksFreeToMoveDown(matrix: any) {\r\n        let pom = true;\r\n        this.blocksArr.forEach(elem => {\r\n            if (!elem.isBlockFreeToMoveDown(matrix)) {\r\n                pom = false;\r\n            }\r\n        })\r\n        return pom;\r\n    }\r\n\r\n    areBlocksFreeToMoveDownNumber(matrix: any) {\r\n        let pom = 0;\r\n        this.blocksArr.forEach(elem => {\r\n            if (!elem.isBlockFreeToMoveDown(matrix)) {\r\n                pom += 1;\r\n            }\r\n        })\r\n        if(pom>0){\r\n            if (this.blocksArr[0].left == this.blocksArr[3].left && this.blocksArr[0].left == this.blocksArr[1].left && this.blocksArr[0].left == this.blocksArr[2].left){\r\n                pom == 4;\r\n            }\r\n            else if (this.blocksArr[0].top == this.blocksArr[3].top && this.blocksArr[0].top == this.blocksArr[1].top && this.blocksArr[0].top == this.blocksArr[2].top){\r\n                \r\n            }\r\n            else if (this.blocksArr[0].left == this.blocksArr[3].left && this.blocksArr[0].left == this.blocksArr[1].left && this.blocksArr[0].top == this.blocksArr[2].top){\r\n                pom *= 2;\r\n            }\r\n            else if (this.blocksArr[0].top == this.blocksArr[3].top && this.blocksArr[0].top == this.blocksArr[1].top && this.blocksArr[0].left == this.blocksArr[2].left){\r\n                pom+=1;\r\n            }\r\n            else if (this.blocksArr[0].top == this.blocksArr[2].top && this.blocksArr[0].top == this.blocksArr[1].top && this.blocksArr[2].left == this.blocksArr[3].left){\r\n                pom+=1;\r\n            }\r\n            else if (this.blocksArr[0].left == this.blocksArr[2].left && this.blocksArr[0].left == this.blocksArr[1].left && this.blocksArr[2].top == this.blocksArr[3].top){\r\n                pom*=2;\r\n            }\r\n            else if (this.blocksArr[0].left == this.blocksArr[2].left && this.blocksArr[0].left == this.blocksArr[1].left && this.blocksArr[1].top == this.blocksArr[3].top){\r\n                pom*=2;\r\n            }\r\n            else if (this.blocksArr[0].top == this.blocksArr[2].top && this.blocksArr[0].top == this.blocksArr[1].top && this.blocksArr[1].left == this.blocksArr[3].left){\r\n                pom+=1;\r\n            }\r\n            else if (this.blocksArr[0].left == this.blocksArr[2].left && this.blocksArr[1].left == this.blocksArr[3].left && this.blocksArr[0].top == this.blocksArr[1].top){\r\n                pom*=2;\r\n            }\r\n            else if (this.blocksArr[0].top == this.blocksArr[2].top && this.blocksArr[1].top == this.blocksArr[3].top && this.blocksArr[0].left == this.blocksArr[1].left){\r\n                pom+=1;\r\n            }\r\n            else if (this.blocksArr[0].left == this.blocksArr[1].left && this.blocksArr[2].left == this.blocksArr[3].left && this.blocksArr[0].top == this.blocksArr[2].top){\r\n                pom*=2;\r\n            }\r\n            else if (this.blocksArr[0].top == this.blocksArr[1].top && this.blocksArr[2].top == this.blocksArr[3].top && this.blocksArr[0].left == this.blocksArr[2].left){\r\n                pom+=1;\r\n            }\r\n        }\r\n        return pom;\r\n    }\r\n\r\n    rotate() {\r\n        let i = this.currentPosition;\r\n        let blockStates = this.coordiantesArr\r\n        if (i < blockStates.length - 1) {\r\n            i += 1;\r\n            this.blocksArr = this.fillArr(this.moveAdjustment(blockStates[i]), this.size, this.columns);\r\n            this.currentPosition = i;\r\n        }\r\n        else {\r\n            i = 0;\r\n            this.blocksArr = this.fillArr(this.moveAdjustment(blockStates[i]), this.size, this.columns);\r\n            this.currentPosition = i;\r\n        }\r\n\r\n    }\r\n    moveAdjustment(blocksArr: any) {\r\n        let arr: any[] = [];\r\n        blocksArr.forEach((elem: any) => {\r\n            arr.push({ x: elem.x + this.left, y: elem.y + this.top });\r\n        })\r\n        return arr;\r\n    }\r\n    areBlocksFreeToRotate(matrix: any) {\r\n        let pom = true;\r\n        this.blocksArr.forEach(elem => {\r\n            if (!elem.isBlockFreeToRotate(matrix)) {\r\n                pom = false;\r\n            }\r\n        })\r\n        return pom;\r\n    }\r\n    areBlockOutOfBoundsLeft() {\r\n        let pom = true;\r\n        this.blocksArr.forEach(elem => {\r\n            if (elem.left <= 0) {\r\n                pom = false;\r\n            }\r\n        })\r\n        return pom;\r\n    }\r\n    areBlockOutOfRotateBoundsLeft() {\r\n        let pom = true;\r\n        this.blocksArr.forEach(elem => {\r\n            if (elem.left < 0) {\r\n                pom = false;\r\n            }\r\n        })\r\n        return pom;\r\n    }\r\n    areBlockOutOfBoundsRight() {\r\n        let pom = true;\r\n        this.blocksArr.forEach(elem => {\r\n            if (elem.left >= (this.columns - 1) * this.size) {\r\n                pom = false;\r\n            }\r\n        })\r\n        return pom;\r\n    }\r\n    areBlockOutOfRotateBoundsRight() {\r\n        let pom = true;\r\n        this.blocksArr.forEach(elem => {\r\n            if (elem.left > (this.columns - 1) * this.size) {\r\n                pom = false;\r\n            }\r\n        })\r\n        return pom;\r\n    }\r\n}\r\n\r\nexport default UniversalShape","import io from 'socket.io-client';\r\nimport { LIST_UPDATE, REGISTER, WINNER, HIGHSCORE, GAME_OVER, INITIALIZE_GAME, USER_CONNECTED, USER_DISCONNECTED, GAME_UPDATE, GAME_INIT, USER_READY, GAME_REQUEST, GAME_START, VERIFY_USER, LOGOUT, USER_IN_GAME, REQUEST_DENIED, RESET, ADD_SHAPES, SPECTATE, SPECTATE_INFO, SEND_TO_SPECTATOR, DISPLAY_GAMES, GAME_SETUP, MULTIPLAYER } from './Events'\r\nimport UniversalShape from './UniversalShape';\r\n\r\nconst socketUrl = \"http://localhost:3231\"; // change to local ip with same port for testing // port must match port defined in socket\r\n\r\nclass ClientManager {\r\n    socket = io(socketUrl);\r\n    initSocket = () => {\r\n\r\n        this.socket.on('connect', () => {\r\n        })\r\n        return this.socket;\r\n    }\r\n    generateShapes = (columns: number, rows: number, blockSize: number): any[] => {\r\n        let shapes: any[] = [];\r\n        this.socket.on(GAME_INIT, (shapes: any) => {\r\n            let generatedShapes = shapes.map((elem: any) => {\r\n                return new UniversalShape(elem.coords, columns, rows, blockSize, elem.color);\r\n            })\r\n\r\n            shapes = generatedShapes;\r\n        })\r\n        return shapes;\r\n    }\r\n\r\n    initMainTetrisContext = (setGeneratedShapes: any, setReciever: any, addShapes: any, showAccepted: any, setRecievers: any, removeSpectator: any, opponentGameOver: any, removeReciever: any, setShapesCoords: any, setPlayerReady: any, setDifficulty: any, displayWinner: any) => {\r\n        this.socket.on(USER_READY, (obj: any) => {\r\n            if (obj.tf) {\r\n                setReciever(obj.user);\r\n                showAccepted(obj.user, true);\r\n            }\r\n        });\r\n\r\n        this.socket.on(WINNER, (winnerData: any) => {\r\n            displayWinner(winnerData);\r\n        })\r\n\r\n        this.socket.on(USER_DISCONNECTED, (obj: any) => {\r\n            removeReciever(obj.name);\r\n        })\r\n\r\n        this.socket.on(REQUEST_DENIED, (user: string) => {\r\n            showAccepted(user, false);\r\n        })\r\n\r\n        this.socket.on(RESET, (user: any) => {\r\n            removeSpectator(user);\r\n            removeReciever(user);\r\n        })\r\n\r\n        this.socket.on(ADD_SHAPES, (newShapes: any) => {\r\n            addShapes(newShapes);\r\n        });\r\n        this.socket.on(INITIALIZE_GAME, (obj: any) => {\r\n            setGeneratedShapes(obj.generatedShapes);\r\n            setShapesCoords(obj.generatedShapes)\r\n            setRecievers(obj.recievers);\r\n            setDifficulty(obj.difficulty);\r\n            setPlayerReady(true);\r\n        })\r\n\r\n        this.socket.on(GAME_OVER, (user: string) => {\r\n            opponentGameOver(user);\r\n        })\r\n    }\r\n\r\n    updateGame = (updateSecondCanvas: any) => {\r\n        this.socket.on(GAME_UPDATE, (obj: any) => {\r\n            updateSecondCanvas(obj);\r\n        })\r\n    }\r\n    spectatingGames = (updateSpectatingCanvas: any) => {\r\n        this.socket.on(SEND_TO_SPECTATOR, (obj: any) => {\r\n            updateSpectatingCanvas(obj);\r\n        })\r\n\r\n    }\r\n\r\n    initMenu = (setHighscore: any) => {\r\n        this.socket.on(HIGHSCORE, (result: any) => {\r\n            setHighscore(result);\r\n        })\r\n    }\r\n    initUserContainer = (displayUsers: any,\r\n        setSender: any, setRequest: any, startGame: any, setSide: any, setRecievers: any,\r\n        addSpectator: any, updateAvailableGames: any, setInitBtn: any, updateGameSetupScreen: any,\r\n        emitGameSetup: any, reset: any, removeInvitedPlayer: any, removeGameMaster: any) => {\r\n        this.socket.on(RESET, (user: string) => {\r\n            removeInvitedPlayer(user);\r\n            removeGameMaster(user);\r\n        })\r\n        this.socket.on(USER_CONNECTED, (allUsers: any) => {\r\n            displayUsers(allUsers);\r\n        })\r\n        this.socket.on(USER_DISCONNECTED, (obj: any) => {\r\n            displayUsers(obj.allUsers);\r\n        })\r\n\r\n        this.socket.on(INITIALIZE_GAME, (obj: any) => {\r\n            setSide(false);\r\n            setInitBtn(false);\r\n        })\r\n        this.socket.on(GAME_REQUEST, ({ sender }: any) => {\r\n            setSender(sender);\r\n        })\r\n        this.socket.on(GAME_START, ({ start }: any) => {\r\n            if (start) {\r\n                setRequest();\r\n                startGame();\r\n            }\r\n        })\r\n\r\n        this.socket.on(SPECTATE, (spectator: string) => {\r\n            addSpectator(spectator);\r\n        })\r\n        this.socket.on(SPECTATE_INFO, (recievers: any) => {\r\n            setRecievers(recievers);\r\n        })\r\n        this.socket.on(DISPLAY_GAMES, (gamesInProgress: any) => {\r\n            updateAvailableGames(gamesInProgress);\r\n        })\r\n        this.socket.on(GAME_SETUP, (obj: any) => {\r\n            updateGameSetupScreen(obj);\r\n        })\r\n        this.socket.on(USER_READY, (obj: any) => {\r\n            if (obj.tf)\r\n                emitGameSetup();\r\n            else reset();\r\n        })\r\n    }\r\n\r\n    initRegister = (setError: any, setDisplay: any) => {\r\n        this.socket.on(REGISTER, (success: boolean) => {\r\n            if(success){\r\n                setDisplay({target: {value: 3}})\r\n            }\r\n            else {\r\n                setError(\"User already exists!\");\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    emitGameUpdate = (matrix: any, shape: any, reciever: string[], sender: string, totalScore: number, score: number, acceleration: number, blockSize: number) => {\r\n        this.socket.emit(GAME_UPDATE, { matrix, shape, reciever, sender, totalScore, score, acceleration, blockSize });\r\n    }\r\n    emitUserInGame = (username: string) => {\r\n        this.socket.emit(USER_IN_GAME, { username });\r\n    }\r\n    emitLogout = () => {\r\n        this.socket.emit(LOGOUT);\r\n    }\r\n    emitUserConnected = (user: any) => {\r\n        this.socket.emit(USER_CONNECTED, user);\r\n    }\r\n    emitUserReady = (user: string, reqSender: string) => {\r\n        this.socket.emit(USER_READY, { user, reqSender });\r\n    }\r\n    emitGameRequest = (sender: string, reciever: string) => {\r\n        this.socket.emit(GAME_REQUEST, { sender, reciever });\r\n    }\r\n    emitGameStart = (to: string[], user: string) => {\r\n        this.socket.emit(GAME_START, { to, user });\r\n    }\r\n    emitVerifyUser = (nickname: string, password: string, setUser: any) => {\r\n        this.socket.emit(VERIFY_USER, nickname, password, setUser);\r\n    }\r\n    emitReset = (to: string[], user: string, keepGameMode? : boolean) => {\r\n        this.socket.emit(RESET, { to, user, keepGameMode });\r\n    }\r\n    emitAddShapes = (reciever: string[]) => {\r\n        this.socket.emit(ADD_SHAPES, reciever);\r\n    }\r\n    emitSpectate = (user: string, game: string) => {\r\n        this.socket.emit(SPECTATE, { user, game });\r\n    }\r\n    emitSpectatorData = (matrix: any, shape: any, spectator: string, user: string, totalScore: number, score: number, blockSize: number) => {\r\n        this.socket.emit(SEND_TO_SPECTATOR, { matrix, shape, spectator, user, totalScore, score, blockSize });\r\n    }\r\n    emitInitializeGame = (sender: string, recievers: string[], difficulty: number) => {\r\n        this.socket.emit(INITIALIZE_GAME, { sender, recievers, difficulty });\r\n    }\r\n    emitRequestDenied = (user: string, reqSender: string) => {\r\n        this.socket.emit(REQUEST_DENIED, { user, reqSender })\r\n    }\r\n    emitGameOver = (user: string, recievers: string[], score: number, totalScore: number, difficulty: number) => {\r\n        this.socket.emit(GAME_OVER, { user, recievers, score, totalScore, difficulty });\r\n    }\r\n    emitGameSetup = (master: string, recievers: string[]) => {\r\n        this.socket.emit(GAME_SETUP, { master, recievers });\r\n    }\r\n\r\n    emitRegister = (name: string, password: string) => {\r\n        this.socket.emit(REGISTER, { name, password })\r\n    }\r\n\r\n    emitListUpdate = () => {\r\n        this.socket.emit(LIST_UPDATE);\r\n    }\r\n\r\n    emitMultiplayer = (user: string) => {\r\n        this.socket.emit(MULTIPLAYER, user);\r\n    }\r\n\r\n}\r\n\r\nlet CM = new ClientManager();\r\nexport default CM;","import React from 'react';\r\n\r\nimport CM from './ClientManager';\r\n\r\nclass Register extends React.Component<{ setDisplay: any }, {\r\n    name: string, password: string, error: string;\r\n}> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            name: '',\r\n            password: '',\r\n            error: ''\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        CM.initRegister(this.setError, this.props.setDisplay);\r\n    }\r\n\r\n    register = (event: any) => {\r\n        event.preventDefault();\r\n        const { name, password } = this.state;\r\n        if (password.length > 5) {\r\n            CM.emitRegister(name, password);\r\n            this.setError(\"\");\r\n\r\n        }\r\n        else {\r\n            this.setError(\"Password must contain at least 6 characters!\");\r\n        }\r\n    }\r\n    changeName = (event: any) => {\r\n        event.preventDefault();\r\n        this.setState({\r\n            name: event.target.value\r\n        })\r\n    }\r\n    changePass = (event: any) => {\r\n        event.preventDefault();\r\n        this.setState({\r\n            password: event.target.value\r\n        })\r\n    }\r\n    setError = (error: string) => {\r\n        this.setState({ error });\r\n    }\r\n    render = () => {\r\n        const { error } = this.state;\r\n        const { setDisplay } = this.props;\r\n        return (\r\n            <div className='loginForm'>\r\n            <div className='loginFormTitle'>\r\n                        Registration\r\n            </div>\r\n            \r\n                <div className='error'>{error ? error : null}</div>\r\n                <form onSubmit={this.register}>\r\n\r\n                    <div className='loginFormText'>\r\n                        Enter username:\r\n            </div>\r\n                    <input\r\n                        onChange={this.changeName}\r\n                        type='text'\r\n                        placeholder='username...'></input>\r\n                    <div className='loginFormText'>\r\n                        Enter password:\r\n            </div>\r\n                    <input\r\n                        onChange={this.changePass}\r\n                        type='password'\r\n                        placeholder='password...'></input>\r\n                    <input type='submit' value={'Submit'}></input>\r\n                </form>\r\n                <div>\r\n                <button value={0} onClick={setDisplay}>Back</button>\r\n                <button value={1} onClick={setDisplay}>Login</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Register;\r\n","import React from 'react'\r\nimport CM from './ClientManager'\r\n\r\nclass LoginForm extends React.Component<{ setUser: any; setDisplay: any}, { nickname: string; error: string; password: string;}> {\r\n\r\n    textInput: HTMLInputElement | null | undefined;\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            nickname: \"\",\r\n            error: \"\",\r\n            password: \"\"\r\n        }\r\n    }\r\n    setError = (error: string) => {\r\n        this.setState({ error: error })\r\n    }\r\n    setUser = ({ user, isUser }: any) => {\r\n        if (isUser == 0) {\r\n            this.setError('User is already logged in!');\r\n        }\r\n        else if (isUser == 1) {\r\n            this.setError('Incorrect username or password!');\r\n        }\r\n        else if(isUser == 2){\r\n            this.props.setUser(user);\r\n            this.setError('');\r\n        }\r\n    }\r\n    handleChange = (event: any) => {\r\n        const { value } = event.target\r\n        this.setState({\r\n            nickname: value\r\n        })\r\n    }\r\n    handlePassword = (event: any) => {\r\n        const { value } = event.target\r\n        this.setState({\r\n            password: value\r\n        }) \r\n    }\r\n    handleSubmit = (event: any) => {\r\n        event.preventDefault();\r\n        const { nickname, password } = this.state;\r\n        CM.emitVerifyUser(nickname, password, this.setUser);\r\n    }\r\n\r\n    render() {\r\n        const { nickname, error } = this.state;\r\n        const {setDisplay}= this.props;\r\n        return (\r\n            <div className={'loginForm'}>\r\n            <div className='loginFormTitle'>\r\n            Login\r\n            </div>\r\n                <form onSubmit={this.handleSubmit}>\r\n                <div className=\"error\">{error ? error : null}</div>\r\n                    <div className='loginFormText'>Username:</div>\r\n                    <input\r\n                        ref={(input) => { this.textInput = input }}\r\n                        type='text'\r\n                        id='nickname'\r\n                        value={nickname}\r\n                        onChange={this.handleChange}\r\n                        maxLength={16}\r\n                        placeholder={'username'}\r\n                        autoComplete={'off'}\r\n                    />\r\n                    <div className='loginFormText'>Password:</div>\r\n                    <input\r\n                        \r\n                        type='password'\r\n                        id='password'\r\n                        onChange={this.handlePassword}\r\n                        maxLength={16}\r\n                        placeholder={'password'}\r\n                    />\r\n                    <input type=\"submit\" onClick={this.handleSubmit} value=\"Login\"></input>\r\n\r\n                    \r\n                </form>\r\n                <div>\r\n                <button value={0} onClick={setDisplay}>Back</button>\r\n                <button value={2} onClick={setDisplay}>Register</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LoginForm","import React from 'react';\r\n\r\nclass GameRequest extends React.Component<{ name: string, accept: any }, {}> {\r\n    accept = (event: any) => {\r\n        if(event.target.value == 1)\r\n        this.props.accept(true);\r\n        else if(event.target.value == 0)\r\n        this.props.accept(false);\r\n    }\r\n    render() {\r\n        return (\r\n            <div className={'request'}>\r\n            <p>\r\n            {this.props.name} wants to play a game.\r\n            </p>\r\n            <div>\r\n                <button onClick={this.accept} value={1}>Accept</button>\r\n                <button onClick={this.accept} value={0}>Decline</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GameRequest","import React from 'react'\r\n\r\nclass GameSetupScreen extends React.Component<\r\n    {\r\n        selectedPlayers: string[],\r\n        recievers: string[], user: string,\r\n        initializeGame: any,\r\n        denied: string[],\r\n        showInitBtn: boolean,\r\n        invitedPlayers: string[],\r\n        isPlayer: boolean,\r\n        gameMaster: string,\r\n\r\n    },\r\n    {}> {\r\n\r\n    createStringFromArray = (array: string[], str: string) => {\r\n        array.forEach(name => {\r\n            if (str) {\r\n                str += ', ' + name;\r\n            }\r\n            else str += name;\r\n        })\r\n        return str;\r\n    }\r\n\r\n    render() {\r\n        const { recievers, initializeGame, showInitBtn, invitedPlayers, isPlayer, gameMaster } = this.props;\r\n        \r\n      \r\n\r\n        return (\r\n            <div className={'gameSetup'}>\r\n                <p>Game Setup</p>\r\n\r\n                {invitedPlayers.length > 0 ?\r\n                    <div>\r\n                        <table className='tableLeft'>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td className='tdNarrow'>\r\n                                        Player 1\r\n                            </td>\r\n                                    <td className='tdWide' id='leftAlign'>\r\n                                        {gameMaster ? gameMaster : ' '}\r\n                                    </td>\r\n\r\n                                </tr>\r\n                                <tr>\r\n                                    <td className='tdNarrow'>\r\n                                        Player 3\r\n                            </td>\r\n                                    <td className='tdWide' id='leftAlign'>\r\n                                        {invitedPlayers[1] ? invitedPlayers[1] : '  '}\r\n                                    </td>\r\n\r\n                                </tr>\r\n\r\n                            </tbody>\r\n                        </table>\r\n                        <table className='tableRight'>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td className='tdWide' id='rightAlign'>\r\n                                        {invitedPlayers[0] ? invitedPlayers[0] : '  '}\r\n                                    </td>\r\n                                    <td className='tdNarrow'>\r\n                                        Player 2\r\n                                </td>\r\n\r\n                                </tr>\r\n                                <tr>\r\n\r\n                                    <td className='tdWide' id='rightAlign'>\r\n                                        {invitedPlayers[2] ? invitedPlayers[2] : '  '}\r\n                                    </td>\r\n                                    <td className='tdNarrow'>\r\n                                        Player 4\r\n                                </td>\r\n                                </tr>\r\n\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                    : <p>Select players from left sidebar and then invite them or wait for an invite to enter a multiplayer game</p>}\r\n\r\n                \r\n                {(recievers.length > 0 && showInitBtn) ? <button className=\"roundBtn\" onClick={initializeGame} >Initialize Game</button> : null}\r\n                {isPlayer ? <div className=\"roundDiv\"><div className='innerRound'>Waiting for other players...</div></div> : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GameSetupScreen","import React from 'react';\r\nimport { values } from 'lodash';\r\nimport GameRequest from './GameRequest';\r\nimport CM from './ClientManager';\r\nimport GameSetupScreen from './GameSetupScreen';\r\n\r\n\r\nclass UserContainer extends React.Component<{\r\n    user: any, logout: any, setGeneratedShapes: any,\r\n    setRecievers: any, reciever: string[], startGame: any, isPlayerReady: boolean,\r\n    changeSpectatingStatus: any, running: boolean, reset: any,\r\n    addSpectator: any, initGame: any, denied: string[],\r\n    isSpectator: boolean\r\n},\r\n    {\r\n        users: any[],\r\n        reqSent: boolean,\r\n        sender: string,\r\n        showReq: boolean,\r\n        showSide: boolean,\r\n        selectedPlayers: string[],\r\n        games: any,\r\n        showInitBtn: boolean,\r\n        showStartBtn: boolean,\r\n        invitedPlayers: string[],\r\n        accepted: string[],\r\n        isGameMaster: boolean,\r\n        isPlayer: boolean,\r\n        gameMaster: string,\r\n\r\n    }>{\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            users: [],\r\n            reqSent: false,\r\n            sender: '',\r\n            showReq: true,\r\n            showSide: true,\r\n            selectedPlayers: [],\r\n            games: [],\r\n            showInitBtn: true,\r\n            showStartBtn: true,\r\n            invitedPlayers: [],\r\n            accepted: [],\r\n            isGameMaster: false,\r\n            isPlayer: false,\r\n            gameMaster: '',\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        CM.initUserContainer(\r\n            this.displayUsers,\r\n            this.setSender, this.finalizeStart,\r\n            this.showRequest, this.setSide,\r\n            this.props.setRecievers, this.props.addSpectator,\r\n            this.updateAvailableGames,\r\n            this.setInitBtn, this.updateGameSetupScreen, this.emitGameSetup,\r\n            this.reset, this.removeInvitedPlayer, this.removeGameMaster\r\n        )\r\n        CM.emitListUpdate();\r\n    }\r\n\r\n    componentWillUpdate() {\r\n        const { reciever, user, isPlayerReady } = this.props;\r\n        const { gameMaster } = this.state;\r\n        if (user == gameMaster && !isPlayerReady) {\r\n            CM.emitGameSetup(user, reciever);\r\n            \r\n        }\r\n    }\r\n    componentWillUnmount(){\r\n        const {isGameMaster, gameMaster, invitedPlayers} = this.state;\r\n        if(isGameMaster){\r\n            CM.emitReset(invitedPlayers, this.props.user, false);\r\n        }\r\n        else CM.emitReset([gameMaster], this.props.user, false);\r\n    }\r\n\r\n    updateGameSetupScreen = (obj: any) => {\r\n        \r\n        this.setState({\r\n            invitedPlayers: obj.recievers,\r\n            gameMaster: obj.master\r\n        })\r\n\r\n    }\r\n\r\n    removeGameMaster = (user: string) => {\r\n        const {gameMaster} = this.state;\r\n        if(user == gameMaster) {\r\n            this.reset();\r\n            CM.emitReset([], this.props.user, true);\r\n        }\r\n    }\r\n\r\n    finalizeStart = () => {\r\n        this.props.startGame();\r\n        this.setState({ showStartBtn: false })\r\n    }\r\n\r\n    setSender = (sender: string) => {\r\n        this.setState({ sender, reqSent: true })\r\n    }\r\n    setRequest = () => {\r\n        this.setState({ reqSent: true, showReq: false });\r\n    }\r\n    setSide = (status: boolean) => {\r\n        this.setState({ showSide: status });\r\n    }\r\n    showRequest = (status: boolean) => {\r\n        this.setState({\r\n            showReq: status,\r\n            reqSent: false\r\n        })\r\n    }\r\n\r\n\r\n    accept = (tf: boolean) => {\r\n        const { user, isSpectator, reciever, changeSpectatingStatus, setRecievers } = this.props;\r\n        const { sender } = this.state;\r\n        this.setState({ showReq: false });\r\n        if (tf) {\r\n\r\n            if (isSpectator) {\r\n                CM.emitReset(reciever, user, false);\r\n                changeSpectatingStatus(false);\r\n                setRecievers([]);\r\n                this.setInitBtn(true);\r\n            }\r\n\r\n            CM.emitUserReady(user, sender);\r\n            this.setState({\r\n                isGameMaster: false,\r\n                isPlayer: true\r\n            })\r\n        }\r\n        else {\r\n            CM.emitRequestDenied(user, sender);\r\n            if(!isSpectator)this.reset();\r\n        }\r\n    }\r\n    emitGameSetup = () => {\r\n        const { user, reciever } = this.props;\r\n        this.setState({ invitedPlayers: reciever })\r\n        CM.emitGameSetup(user, reciever);\r\n    }\r\n    removeInvitedPlayer = (user: string) => {\r\n        let {invitedPlayers}= this.state;\r\n        const index = invitedPlayers.indexOf(user);\r\n        if(index != -1){\r\n            invitedPlayers.splice(index, 1);\r\n            this.setState({\r\n                invitedPlayers\r\n            })\r\n        }\r\n    }\r\n\r\n    sendInvite = (event: any) => {\r\n        const { isPlayer } = this.state;\r\n        const { isSpectator, reciever, user, changeSpectatingStatus, setRecievers } = this.props;\r\n        let players = this.state.selectedPlayers;\r\n        let invited = this.state.invitedPlayers;\r\n        let index1 = players.indexOf(event.target.value);\r\n        let index2 = invited.indexOf(event.target.value);\r\n        if (!isPlayer) {\r\n            if (isSpectator) {\r\n                CM.emitReset(reciever, user, false);\r\n                changeSpectatingStatus(false);\r\n                setRecievers([]);\r\n                this.setInitBtn(true);\r\n            }\r\n            if (index1 == -1 && index2 == -1) {\r\n                players.push(event.target.value);\r\n                event.target.innerHTML = \"Invited\";\r\n                event.target.disabled = true;\r\n                event.target.style.backgroundColor = \"green\";\r\n                this.setState({ isGameMaster: true, gameMaster: user });\r\n                CM.emitGameRequest(user, event.target.value);\r\n            }\r\n        }\r\n    }\r\n\r\n    setInitBtn = (showInitBtn: boolean) => {\r\n        this.setState({ showInitBtn });\r\n    }\r\n\r\n\r\n    displayUsers = (allUsers: any) => {\r\n        const { user } = this.props;\r\n\r\n        let users: any = [];\r\n        users = values(allUsers).map((u) => {\r\n            if (u.name != user && !u.inGame && u.gameMode == 1) {\r\n                const className = (u.name.length >= 12) ? 'sideBtnSmall' : 'sideBtn';\r\n                return <div key={u.name} className={className}>{u.name}<button value={u.name} onClick={this.sendInvite}>Invite</button></div>;\r\n            }\r\n        })\r\n        /*let i =0;\r\n        while(i<20){\r\n            i++;\r\n            users.push(<div className='sideBtn'>Js<button>Invite</button></div>)\r\n        }*/\r\n        this.setState({ users: users })\r\n    }\r\n    updateAvailableGames = (games: any) => {\r\n        let users = values(games).map((u) => {\r\n            const className = (u.sender.length >= 12) ? 'sideBtnSmall' : 'sideBtn';\r\n            return <div className={className}>{u.sender}'s game<button value={u.sender} onClick={this.spectate}>Watch</button></div>;\r\n        })\r\n        this.setState({\r\n            games: users,\r\n        })\r\n    }\r\n    startGame = (event: any) => {\r\n        const { user, reciever } = this.props;\r\n        this.setState({ showReq: false });\r\n        setTimeout(() => CM.emitGameStart(reciever, user), 1500);\r\n    }\r\n    reset = () => {\r\n        let recievers = this.props.reciever;\r\n        if (this.state.gameMaster)\r\n            recievers.push(this.state.gameMaster);\r\n        CM.emitReset(recievers, this.props.user, true);\r\n\r\n        this.props.reset();\r\n        this.setState({\r\n            users: [],\r\n            reqSent: false,\r\n            sender: '',\r\n            showReq: true,\r\n            showSide: true,\r\n            selectedPlayers: [],\r\n            showInitBtn: true,\r\n            showStartBtn: true,\r\n            invitedPlayers: [],\r\n            accepted: [],\r\n            isGameMaster: false,\r\n            isPlayer: false,\r\n            gameMaster: ''\r\n\r\n        });\r\n\r\n    }\r\n\r\n    spectate = (event: any) => {\r\n        //this.reset();\r\n        CM.emitSpectate(this.props.user, event.target.value);\r\n        this.props.changeSpectatingStatus(true);\r\n        this.setInitBtn(false);\r\n    }\r\n\r\n    render = () => {\r\n        const { user, isPlayerReady, running, reciever, initGame, denied, isSpectator } = this.props;\r\n        const { sender, reqSent, showReq, showSide, games, showInitBtn, showStartBtn, invitedPlayers, selectedPlayers, isGameMaster, isPlayer, gameMaster } = this.state;\r\n        let displayRecievers = \"\";\r\n        let displayGames = null;\r\n        if (games && !running) {\r\n            displayGames = games;\r\n        }\r\n        reciever.forEach(name => {\r\n            if (displayRecievers == \"\") {\r\n                displayRecievers += name;\r\n            }\r\n            else displayRecievers += \", \" + name;\r\n        })\r\n        return (\r\n            <div className='setupWrapper'>\r\n                {(showSide && !isSpectator) ?\r\n                    <div className={'sideTab'}>\r\n                        <p>Available players:</p>{this.state.users}\r\n                    </div>\r\n                    : null}\r\n\r\n                {(showSide && isSpectator) ?\r\n                    <div className={'sideTab'}>\r\n                        <p>Games:</p>{displayGames}\r\n                    </div>\r\n                    : null}\r\n\r\n                {showInitBtn ?\r\n                    <div>\r\n\r\n                        <GameSetupScreen\r\n                            user={user}\r\n                            initializeGame={initGame}\r\n                            selectedPlayers={selectedPlayers}\r\n                            recievers={reciever} denied={denied}\r\n                            showInitBtn={showInitBtn && isGameMaster && !isPlayer}\r\n                            invitedPlayers={invitedPlayers}\r\n                            isPlayer={isPlayer}\r\n                            gameMaster={gameMaster}\r\n                        />\r\n                    </div> : null}\r\n\r\n                {(reqSent && showReq) ? <GameRequest name={sender} accept={this.accept} /> : null}\r\n                {(isPlayerReady && showStartBtn && isGameMaster) ? <div className='buttonsBlock'>\r\n\r\n                    <button className={'startBtn'} onClick={this.startGame}>Start</button><br></br>\r\n                </div> : null}\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UserContainer\r\n\r\n","import React from 'react'\r\n\r\nclass Canvas extends React.Component<\r\n    {\r\n         rows: number,\r\n        columns: number, blockSize: number, canvasFront: any,\r\n        canvasBack: any, running? : boolean, isPlayerReady?: boolean, fixed?: boolean\r\n    },\r\n    {}> {\r\n    constructor(props: any) {\r\n        super(props);\r\n       // this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\r\n    } \r\n    componentDidMount() {\r\n        const { canvasBack, canvasFront, rows, columns, blockSize } = this.props;\r\n        if (canvasBack) {\r\n            let c2: any = canvasBack.current;          \r\n            c2.width = columns * blockSize;\r\n            c2.height = rows * blockSize;\r\n            this.createGrid(c2.getContext('2d'));\r\n        }\r\n        if(canvasFront){\r\n            let c1: any = canvasFront.current;\r\n            c1.width = columns * blockSize;\r\n            c1.height = rows * blockSize;\r\n        }\r\n       \r\n        this.updateWindowDimensions();\r\n        window.addEventListener('resize', this.updateWindowDimensions);\r\n        \r\n    }\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.updateWindowDimensions);\r\n    }\r\n\r\n\r\n    updateWindowDimensions = () => {\r\n        const { canvasBack, canvasFront, rows, columns, blockSize, running, isPlayerReady, fixed } = this.props;\r\n        if(!running && isPlayerReady && !fixed){\r\n        if (canvasBack) {\r\n            let c2: any = canvasBack.current;          \r\n            c2.width = columns * blockSize;\r\n            c2.height = rows * blockSize;\r\n            this.createGrid(c2.getContext('2d'));\r\n        }\r\n        if(canvasFront){\r\n            let c1: any = canvasFront.current;\r\n            c1.width = columns * blockSize;\r\n            c1.height = rows * blockSize;\r\n        }\r\n    }\r\n    }\r\n    \r\n    createGrid = (ctx: any) => {\r\n        const { rows, columns, blockSize } = this.props;\r\n        ctx.lineWidth = 1;\r\n        ctx.strokeStyle = '#ccc';\r\n        for (let i = 1; i < rows; i++) {\r\n            ctx.beginPath()\r\n            ctx.moveTo(0, i * blockSize);\r\n            ctx.lineTo(columns * blockSize, i * blockSize);\r\n            ctx.stroke();\r\n        }\r\n        for (let i = 1; i < columns; i++) {\r\n            ctx.beginPath()\r\n            ctx.moveTo(i * blockSize, 0);\r\n            ctx.lineTo(i * blockSize, rows * blockSize);\r\n            ctx.stroke();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { rows, columns, blockSize, canvasFront, canvasBack } = this.props\r\n        const style = { \"height\": rows * blockSize, \"width\": columns * blockSize };\r\n        return (\r\n            <div >\r\n\r\n                <div className='canvasBlock'>\r\n                    <canvas className='FrontCanvas' style={style} ref={canvasFront}></canvas>\r\n                    <canvas className='BackCanvas' style={style} ref={canvasBack}></canvas>\r\n\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Canvas","import React from 'react';\r\n\r\nclass MiniCanvas extends React.Component<{\r\n    canvasSide: any, rowScore: number,\r\n     totalScore: number, blockSize: number, columns: number,\r\n      showSide: boolean, name: string, running?: boolean, isPlayerReady?: boolean\r\n},{}> {\r\n    constructor(props: any){\r\n        super(props);\r\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        const {canvasSide, columns, blockSize} = this.props;\r\n        if (canvasSide != null) {\r\n        let c3: any = canvasSide.current;\r\n        if(c3){\r\n            c3.width = columns / 2 * blockSize;\r\n            c3.height = blockSize * 2;\r\n        }\r\n        }\r\n        this.updateWindowDimensions();\r\n        window.addEventListener('resize', this.updateWindowDimensions);\r\n    }\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.updateWindowDimensions);\r\n    }\r\n\r\n\r\n    updateWindowDimensions() {\r\n        const { canvasSide, columns, blockSize, running, isPlayerReady } = this.props;\r\n        if(!running && isPlayerReady){\r\n            if (canvasSide != null) {\r\n                let c3: any = canvasSide.current;\r\n                if(c3){\r\n                    c3.width = columns / 2 * blockSize;\r\n                    c3.height = blockSize * 2;\r\n                }\r\n                }\r\n    }\r\n    }\r\n    render() {\r\n        const {canvasSide, rowScore, totalScore, blockSize, columns, showSide, name} = this.props;\r\n        const style2 = { \"height\": blockSize * 2, \"width\": columns / 2  * blockSize };      \r\n        return (\r\n            <div className='sideBlock'>\r\n                    {showSide ? <canvas className='SideCanvas' style={style2} ref={canvasSide}></canvas> : null }\r\n                    <div className={'score'}>\r\n                    <table className={'infoTable'}>\r\n                        <tbody>\r\n                        <tr>\r\n                            <td>User:</td><td className={'rightTD'}>{name}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Lines:</td><td className={'rightTD'}>{rowScore}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Score:</td><td className={'rightTD'}>{totalScore}</td>\r\n                        </tr>\r\n                        </tbody>\r\n                    </table>\r\n                    </div>\r\n                </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MiniCanvas;","import React from 'react';\r\n\r\nclass Popup extends React.Component<{user: string, accepted: boolean, resetPopup: any}, {}> {\r\n    close = () => {\r\n        this.props.resetPopup();\r\n    }\r\n    render() {\r\n        const {user, accepted} = this.props;\r\n        return (\r\n            <div className={'request'} >\r\n                \r\n                <p>\r\n                {user}{accepted ? ' accepted your request' : ' denied your request'}\r\n                </p>\r\n                <div>\r\n                <button onClick={this.close}>Close</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Popup;","import React from 'react';\r\n\r\nfunction WinnerPopup(props: any) {\r\n    return (\r\n        <div className='winnerPopup'>\r\n        <button onClick={props.close}>Close</button>\r\n        Winner is: {props.winner}<br></br>\r\n        Score is: {props.score}</div>\r\n    )\r\n}\r\n\r\nexport default WinnerPopup","import React from 'react';\r\nimport Canvas from './Canvas';\r\nimport UniversalShape from './UniversalShape';\r\nimport BaseBuildingSquare from './BaseBuildingSquare';\r\nconst { createEmptyMatrix, isRowComplete, createGrid } = require('./TetrisHelper')\r\nconst { generateShapes } = require('./Factories')\r\n\r\ninterface AutoProps {\r\n    rows: number, columns: number, blockSize: number\r\n}\r\ninterface AutoState {\r\n    index: number, moveCounter: number, matrix: any[], generatedShapes: any[], speed: number, intervalId: any\r\n}\r\n\r\nclass AutoComplete extends React.Component<AutoProps, AutoState> {\r\n    canvasBack = React.createRef<HTMLCanvasElement>();\r\n    canvasFront = React.createRef<HTMLCanvasElement>();\r\n\r\n    constructor(props: AutoProps) {\r\n        super(props);\r\n        let generatedShapes = this.setGeneratedShapes(generateShapes(1000, 7));\r\n        let matrix = createEmptyMatrix(props.columns, props.rows)\r\n        this.state = {\r\n            index: 0,\r\n            moveCounter: 0,\r\n            matrix,\r\n            generatedShapes,\r\n            speed: 50,\r\n            intervalId: null\r\n        }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        // this.setState({ matrix: this.props.createEmptyMatrix(), generatedShapes: this.setGeneratedShapes(generateShapes(1000, 7)) })\r\n        if (this.state.generatedShapes)\r\n            this.autoMove();\r\n\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.state.intervalId)\r\n    }\r\n\r\n    setGeneratedShapes = (shapes: any) => {\r\n        let generatedShapes = [];\r\n        const { columns, rows, blockSize } = this.props;\r\n        generatedShapes = shapes.map((elem: any) => {\r\n            const color = elem.color;\r\n            return new UniversalShape(elem.coords, columns, rows, blockSize, color);\r\n        });\r\n        return generatedShapes;\r\n    }\r\n\r\n    tempShape = (shape: UniversalShape): UniversalShape => {\r\n        let coordinatesArr: any[] = [];\r\n\r\n        shape.coordiantesArr.forEach((coords: any) => {\r\n            let innerC: any[] = []\r\n            coords.forEach((c: any) => {\r\n                innerC.push({ y: c.y, x: c.x });\r\n            })\r\n            coordinatesArr.push(innerC);\r\n        })\r\n        let copy: UniversalShape = new UniversalShape(coordinatesArr, shape.columns, shape.rows, shape.size, shape.color);\r\n        return copy;\r\n    }\r\n\r\n    numberOfFilledFields = (matrix: any[], newMatrix: any[]) => {\r\n        let counter = 0;\r\n        let max: number, maxNew: number, maxi = 0;\r\n        for (let i = 0; i < matrix.length - 1; i++) {\r\n            max = 0;\r\n            maxNew = 0;\r\n            matrix[i].forEach((element: any) => {\r\n                if (element.status) max++;\r\n            })\r\n            newMatrix[i].forEach((element: any) => {\r\n                if (element.status) maxNew++;\r\n            })\r\n            if (maxNew > max) {\r\n                counter = counter + (maxNew - max) * i;\r\n\r\n            }\r\n        }\r\n        return counter;\r\n    }\r\n\r\n    clearRow = (index: number) => {\r\n        const { columns } = this.props;\r\n        let mat = this.state.matrix;\r\n        function x() {\r\n            let sub: any[] = [];\r\n            for (let j = 0; j < columns; j++) {\r\n                sub.push({ status: false, color: 'white' });\r\n            }\r\n            return sub;\r\n        }\r\n        mat.splice(index, 1);\r\n        mat.unshift(x());\r\n\r\n        this.setState({\r\n            matrix: mat\r\n        })\r\n    }\r\n\r\n    autoMove = () => {\r\n        const { index, matrix, speed } = this.state;\r\n        let { generatedShapes } = this.state\r\n        const { columns, rows, blockSize } = this.props;\r\n        if (undefined == generatedShapes[index]) {\r\n            let gen = this.setGeneratedShapes(generateShapes(1000, 7));\r\n            generatedShapes = generatedShapes.concat(gen);\r\n            this.setState({ generatedShapes })\r\n        }\r\n        let shape: UniversalShape = generatedShapes[index];\r\n        const bestShape = this.findBestPosition(shape);\r\n        let rotation = 0;\r\n        let canvas = this.canvasFront.current;\r\n        let canvas2 = this.canvasBack.current;\r\n        if (canvas && canvas2) {\r\n            let ctx = canvas.getContext('2d');\r\n            let ctx2 = canvas2.getContext('2d');\r\n            let id = setInterval(() => {\r\n                this.setState({ intervalId: id });\r\n                if (rotation < bestShape.rotation) {\r\n                    shape.rotate();\r\n                    rotation++;\r\n                    if (ctx)\r\n                        ctx.clearRect(0, 0, 2000, 2000)\r\n                    if (shape)\r\n                        shape.updateCanvas(ctx);\r\n                }\r\n                else if (bestShape.bestShape.blocksArr)\r\n                    if (shape.blocksArr[0].left > bestShape.bestShape.blocksArr[0].left) {\r\n                        if (shape.areBlocksFreeToMoveLeft(matrix)) {\r\n                            shape.moveLeft();\r\n                            if (ctx)\r\n                                ctx.clearRect(0, 0, 2000, 2000)\r\n                            shape.updateCanvas(ctx);\r\n                        }\r\n                    }\r\n                    else if (shape && shape.blocksArr[0].left < bestShape.bestShape.blocksArr[0].left) {\r\n                        if (shape.areBlocksFreeToMoveRight(matrix)) {\r\n                            shape.moveRight();\r\n                            if (ctx)\r\n                                ctx.clearRect(0, 0, 2000, 2000)\r\n                            shape.updateCanvas(ctx);\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (shape && shape.areBlocksFreeToMoveDown(matrix)) {\r\n\r\n                            if (ctx)\r\n                                ctx.clearRect(0, 0, 2000, 2000);\r\n                            shape.updateCanvas(ctx);\r\n                            shape.moveDown();\r\n                        }\r\n                        else {\r\n                            shape.moveBack();\r\n                            shape.updateCanvas(ctx);\r\n                            let newMatrix = this.addShapeToMatrix(bestShape.bestShape, matrix);\r\n                            this.setState({ matrix: newMatrix, index: index + 1 })\r\n                            if (isRowComplete(columns, rows, matrix).length > 0) {\r\n                                isRowComplete(columns, rows, matrix).forEach((index: number) => {\r\n                                    this.clearRow(index);\r\n                                    if (ctx2)\r\n                                        ctx2.clearRect(0, 0, 2000, 2000)\r\n                                    createGrid(ctx2, columns, rows, blockSize);\r\n                                    this.fillCanvas(ctx2);\r\n                                });\r\n                            }\r\n                            if (ctx2)\r\n                                ctx2.clearRect(0, 0, 2000, 2000)\r\n                            createGrid(ctx2, columns, rows, blockSize);\r\n                            this.fillCanvas(ctx2);\r\n                            clearInterval(id);\r\n                            this.autoMove();\r\n                        }\r\n                    }\r\n            }, speed)\r\n        }\r\n\r\n    }\r\n\r\n    fillCanvas = (ctx: any) => {\r\n        const { matrix } = this.state;\r\n        const { columns, rows, blockSize } = this.props;\r\n        let temp: BaseBuildingSquare = new BaseBuildingSquare(0, blockSize, \"red\", blockSize)\r\n        for (let i = 0; i < rows; i++) {\r\n            for (let j = 0; j < columns; j++) {\r\n                if (matrix[i][j].status) {\r\n                    temp.draw(j * blockSize, i * blockSize, ctx, matrix[i][j].color);\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    copyBlocks = (blocks: BaseBuildingSquare[]): BaseBuildingSquare[] => {\r\n\r\n        let topNegative = false;\r\n        let leftNegative = false;\r\n        for (let i = 0; i < 4; i++) {\r\n            if (blocks[i].top < 0) topNegative = true;\r\n            if (blocks[i].left < 0) leftNegative = true;\r\n        }\r\n        let temp: BaseBuildingSquare[] = blocks.map(block => {\r\n\r\n            if (!topNegative && !leftNegative)\r\n                return new BaseBuildingSquare(block.left, block.top, block.color, block.size);\r\n            else return new BaseBuildingSquare(0, 0, block.color, block.size);\r\n        })\r\n        return temp\r\n    }\r\n\r\n    findBestPosition = (shape: UniversalShape) => {\r\n        const { rows, columns, blockSize } = this.props;\r\n        const { matrix } = this.state;\r\n        let counter = columns;\r\n        let max = 0;\r\n        let rowsToClean = 0, rowNum;\r\n        let bestShape: any = [];\r\n        let arr = this.copyMatrix(matrix);\r\n        let maxMoves = 0;\r\n        let moved = 0;\r\n        let rotation = 0;\r\n        let rowCountSum: number = 0;\r\n        let rowCountTemp: number = 0;\r\n\r\n        if (shape)\r\n            for (let j = 0; j < shape.coordiantesArr.length; j++) {\r\n                let temp: UniversalShape = this.tempShape(shape);\r\n                for (let i = 0; i < columns; i++) {\r\n                    temp = this.tempShape(shape);\r\n\r\n                    //if (temp.areBlocksFreeToRotate(matrix))\r\n                    temp.setBlocks(shape.fillArr(shape.coordiantesArr[j], blockSize, columns));\r\n                    if (temp.areBlocksFreeToMoveRight(matrix)) {\r\n                        while (temp.areBlockOutOfBoundsLeft()) temp.moveLeft();\r\n                        //if (i != 0) {\r\n                        for (let k = 0; k < i; k++)\r\n                            temp.moveRight();\r\n                        // }\r\n                        moved = 0;\r\n                        while (temp.areBlocksFreeToMoveDown(matrix)) {\r\n                            temp.moveDown();\r\n                            moved++;\r\n                        }\r\n                        counter = temp.areBlocksFreeToMoveDownNumber(matrix);\r\n                        temp.moveBack();\r\n\r\n                        arr = this.addShapeToMatrix(temp, arr);\r\n                        rowCountTemp = this.numberOfFilledFields(matrix, arr);\r\n                        rowNum = isRowComplete(columns, rows, arr).length\r\n                        if (this.isShapeAVerticalLine(temp)) {\r\n                            counter = 4;\r\n                            max = 4;\r\n                        }\r\n\r\n                        if (rowNum > 0 && counter == 4) {\r\n                            max = counter;\r\n                            bestShape = temp;\r\n                            rotation = j;\r\n                            rowsToClean = rowNum;\r\n                            return { bestShape, rotation };\r\n                        }\r\n                        else if (rowCountSum <= rowCountTemp && counter == 4) {\r\n\r\n                            max = counter;\r\n\r\n                            rowCountSum = rowCountTemp;\r\n                            maxMoves = moved;\r\n                            rotation = j;\r\n                            bestShape = temp;\r\n\r\n                        }\r\n\r\n                        else if (max <= counter && max != 4) {\r\n\r\n                            max = counter;\r\n                            rowCountSum = rowCountTemp;\r\n                            maxMoves = moved;\r\n                            rotation = j;\r\n                            bestShape = temp;\r\n\r\n                        }\r\n\r\n                        /*   else if (max < counter) {\r\n                               if (rowCountSum <= rowCountTemp) {\r\n       \r\n                                   max = counter;\r\n       \r\n                                   rowCountSum = rowCountTemp;\r\n                                   maxMoves = moved;\r\n                                   rotation = j;\r\n                                   bestShape = temp;\r\n                               }\r\n                               else if (!bestShape) {\r\n                                   bestShape = temp;\r\n                                   rotation = j\r\n                               }\r\n                           }*/\r\n                        /* rowCountSum = rowCountTemp;\r\n                         bestShape = temp;\r\n                         rotation = j;\r\n                         }\r\n                     \r\n                    else \r\n                   */\r\n                        /* if (rowNum > 0 && rowNum > rowsToClean) {\r\n                                bestShape = temp;\r\n                                rotation = j;\r\n                                rowsToClean = rowNum;\r\n                                \r\n                            }\r\n                            else if(rowCountSum<rowCountTemp){\r\n                                rowCountSum = rowCountTemp;\r\n                            if ((max < counter || this.isShapeAVerticalLine(temp)) && rowsToClean == 0) {\r\n                                if (this.isShapeAVerticalLine(temp) && max != 4) counter == 4;\r\n                                max = counter;\r\n                                \r\n                                if (maxMoves - 1 <= moved && moved > 4) {\r\n                                    maxMoves = moved;\r\n                                    rotation = j;\r\n                                    bestShape = temp;\r\n                                }\r\n                            }\r\n                                else if (!bestShape) {\r\n                                    bestShape = temp;\r\n                                    rotation = j\r\n                                }\r\n                            }*/\r\n                        else if (!bestShape) bestShape = temp;\r\n                        arr = this.removeShapeFromMatrix(temp, arr);\r\n                    }\r\n                }\r\n\r\n\r\n            }\r\n        return { bestShape, rotation }\r\n    }\r\n\r\n    getMatrixHeight = (columns: number, rows: number, matrix: any[]) => {\r\n        for (let i = 0; i < rows; i++) {\r\n            for (let j = 0; j < columns; j++) {\r\n                if (matrix[i][j].status) {\r\n                    return rows - i;\r\n                }\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n    getColumnHeight = (columnIndex: number, rows: number, matrix: any[]) => {\r\n        for (let i = 0; i < rows; i++) {\r\n\r\n            if (matrix[i][columnIndex].status) {\r\n                return rows - i;\r\n            }\r\n\r\n        }\r\n        return 0;\r\n    }\r\n\r\n\r\n\r\n    isShapeAVerticalLine = (shape: UniversalShape) => {\r\n        if (shape.blocksArr[0].left == shape.blocksArr[3].left && shape.blocksArr[0].left == shape.blocksArr[1].left && shape.blocksArr[0].left == shape.blocksArr[2].left) return true;\r\n        else return false;\r\n    }\r\n    doesShapeNeedOneBlock = (shape: UniversalShape) => {\r\n        if (\r\n            shape.blocksArr[0].left == shape.blocksArr[3].left && shape.blocksArr[0].left == shape.blocksArr[1].left\r\n        ) return true;\r\n        else return false;\r\n    }\r\n\r\n    copyMatrix = (matrix: any[]) => {\r\n        let newMatrix = matrix.map((row: any) => {\r\n            return row.map((field: any) => {\r\n                return { status: field.status, color: field.color };\r\n            })\r\n        });\r\n        return newMatrix\r\n    }\r\n\r\n    addShapeToMatrix = (shape: UniversalShape, matrix: any[]) => {\r\n        if (shape)\r\n            shape.blocksArr.forEach((element: any) => {\r\n                if (element && matrix) {\r\n                    if (matrix[Math.round(element.top / shape.size)]) {\r\n                        if (matrix[Math.round(element.top / shape.size)][Math.round(element.left / shape.size)]) {\r\n                            matrix[Math.round(element.top / shape.size)][Math.round(element.left / shape.size)].status = true;\r\n                            matrix[Math.round(element.top / shape.size)][Math.round(element.left / shape.size)].color = element.color;\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        return matrix;\r\n    }\r\n\r\n    removeShapeFromMatrix = (shape: any, matrix: any[]) => {\r\n        if (shape)\r\n            shape.blocksArr.forEach((element: any) => {\r\n                if (element && matrix) {\r\n                    if (matrix[Math.round(element.top / shape.size)]) {\r\n                        if (matrix[Math.round(element.top / shape.size)][Math.round(element.left / shape.size)]) {\r\n                            matrix[Math.round(element.top / shape.size)][Math.round(element.left / shape.size)].status = false;\r\n                            matrix[Math.round(element.top / shape.size)][Math.round(element.left / shape.size)].color = 'white';\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        return matrix;\r\n    }\r\n\r\n    changeSpeed = (event: any) => {\r\n        let speed: number = this.state.speed;\r\n        speed += (event.target.value) * 1;\r\n        if (speed >= 10) {\r\n            this.setState({ speed });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { rows, columns, blockSize } = this.props;\r\n        return (\r\n            <div className=\"transparent\">\r\n\r\n                <Canvas rows={rows} columns={columns} blockSize={blockSize} canvasBack={this.canvasBack} canvasFront={this.canvasFront} fixed={true} />\r\n                <button onClick={this.changeSpeed} value={-10}>Faster</button><button onClick={this.changeSpeed} value={10}>Slower</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AutoComplete","import React from 'react';\r\nimport BaseBuildingSquare from './BaseBuildingSquare';\r\nimport UniversalShape from './UniversalShape';\r\nimport UserContainer from './UserContainer';\r\nimport Canvas from './Canvas';\r\nimport MiniCanvas from './MiniCanvas';\r\nimport CM from './ClientManager';\r\nimport Popup from './Popup';\r\nimport WinnerPopup from './WinnerPopup';\r\nimport AutoComplete from './AutoComplete';\r\nconst { generateShapes } = require('./Factories')\r\nconst { createEmptyMatrix, isRowComplete, createGrid } = require('./TetrisHelper')\r\n\r\ninterface MyState {\r\n    currentShape: UniversalShape;\r\n    nextShape: UniversalShape;\r\n    allBlocks: UniversalShape[];\r\n    running: boolean;\r\n    matrix: any[];\r\n    score: number;\r\n    scorePlayer2: number;\r\n    totalScorePlayer2: number;\r\n    scorePlayer3: number;\r\n    totalScorePlayer3: number;\r\n    scorePlayer4: number;\r\n    totalScorePlayer4: number;\r\n    totalScore: number;\r\n    speed: number;\r\n    counterId: number;\r\n    delay: number;\r\n    baseDelay: number;\r\n    acceleration: number;\r\n    columns: number;\r\n    rows: number;\r\n    blockSize: number;\r\n    user: any;\r\n    recievers: string[];\r\n    generatedShapes: any;\r\n    generatedShapesIndex: number;\r\n    isPlayerReady: boolean;\r\n    spectators: string[];\r\n    isSpectator: boolean;\r\n    specCanvases: any;\r\n    reqAccepted: any;\r\n    denied: string[];\r\n    difficulty: number;\r\n    gameMode: number;\r\n    windowHeight: number;\r\n    windowWidth: number;\r\n    shapesCoords: any[];\r\n    winner: any;\r\n}\r\ninterface USCProps {\r\n    setDisplay: any;\r\n    user: any;\r\n    difficulty: number;\r\n    mode: number;\r\n}\r\n\r\nclass UniversalShapeContext extends React.Component<USCProps, MyState>{\r\n    canvasBack = React.createRef<HTMLCanvasElement>();\r\n    canvasFront = React.createRef<HTMLCanvasElement>();\r\n    canvasSide = React.createRef<HTMLCanvasElement>();\r\n    canvasBack2 = React.createRef<HTMLCanvasElement>();\r\n    canvasBack3 = React.createRef<HTMLCanvasElement>();\r\n    canvasBack4 = React.createRef<HTMLCanvasElement>();\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        let spect = (props.mode == 3) ? true : false;\r\n        this.state = {\r\n            currentShape: this.defaultShape(),\r\n            nextShape: this.defaultShape(),\r\n            allBlocks: [],\r\n            running: false,\r\n            matrix: [],\r\n            score: 0,\r\n            speed: 900,\r\n            counterId: -1,\r\n            delay: 1,\r\n            baseDelay: 20,\r\n            totalScore: 0,\r\n            acceleration: 0,\r\n            columns: 10,\r\n            rows: 20,\r\n            blockSize: 40,\r\n            user: props.user,\r\n            recievers: [],\r\n            scorePlayer2: 0,\r\n            totalScorePlayer2: 0,\r\n            scorePlayer3: 0,\r\n            totalScorePlayer3: 0,\r\n            scorePlayer4: 0,\r\n            totalScorePlayer4: 0,\r\n            generatedShapes: null,\r\n            generatedShapesIndex: 0,\r\n            isPlayerReady: false,\r\n            spectators: [],\r\n            isSpectator: spect,\r\n            specCanvases: null,\r\n            reqAccepted: null,\r\n            denied: [],\r\n            difficulty: props.difficulty,\r\n            gameMode: props.mode,\r\n            windowHeight: window.innerHeight,\r\n            windowWidth: window.innerWidth,\r\n            shapesCoords: [],\r\n            winner: null\r\n        }\r\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\r\n        this.onKeyUp = this.onKeyUp.bind(this);\r\n        this.handleKeyDown = this.handleKeyDown.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            matrix: createEmptyMatrix(10, 20)\r\n        })\r\n        window.addEventListener('keydown', this.handleKeyDown);\r\n        window.addEventListener('keyup', this.onKeyUp);\r\n        this.initSocket();\r\n\r\n        this.updateWindowDimensions();\r\n        window.addEventListener('resize', this.updateWindowDimensions);\r\n        if (this.state.gameMode == 1) {\r\n            this.singlePlayer();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.state.counterId);\r\n        CM.emitReset(this.state.recievers, this.state.user.name, false);\r\n\r\n        window.removeEventListener('resize', this.updateWindowDimensions);\r\n        window.removeEventListener('keydown', this.handleKeyDown);\r\n        window.removeEventListener('keyup', this.onKeyUp);\r\n\r\n        //   CM.emitLogout(this.stopGame)\r\n\r\n    }\r\n\r\n\r\n    updateWindowDimensions() {\r\n        const width = window.innerWidth;\r\n        const height = window.innerHeight;\r\n        this.setState({ windowWidth: width, windowHeight: height });\r\n        if (!this.state.running) {\r\n            let size = 40;\r\n            if (height >= 900) {\r\n                size = 40;\r\n            }\r\n            if (height < 900) {\r\n                size = 35;\r\n            }\r\n            if (height < 800) {\r\n                size = 30;\r\n            }\r\n            if (height < 700) {\r\n                size = 25;\r\n            }\r\n            this.setState({\r\n                blockSize: size\r\n\r\n            })\r\n            if (this.state.user) {\r\n\r\n                const shapes = this.setGeneratedShapes(this.state.shapesCoords);\r\n                this.setState({ generatedShapes: shapes });\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    initSocket = () => {\r\n        const { columns, rows, blockSize } = this.state;\r\n        const generatedShapes = CM.generateShapes(columns, rows, blockSize);\r\n        this.setState({\r\n            generatedShapes,\r\n            nextShape: generatedShapes[0]\r\n        });\r\n        CM.initMainTetrisContext(this.setGeneratedShapes, this.setReciever, this.addShapes, this.showAccepted, this.setRecievers, this.removeSpectator, this.opponentGameOver, this.removeReciever, this.setShapesCoords, this.setPlayerReady, this.setDifficulty, this.displayWinner);\r\n        CM.updateGame(this.updateSecondCanvas);\r\n        CM.spectatingGames(this.updateSpectatingCanvas);\r\n\r\n    }\r\n\r\n    displayWinner = (winnerData: any) => {\r\n        this.setState({\r\n            winner: <WinnerPopup winner={winnerData.winner} score={winnerData.score} close={this.hideWinner} />\r\n        })\r\n    }\r\n    hideWinner = () => {\r\n        this.setState({ winner: null });\r\n    }\r\n\r\n    setShapesCoords = (shapesCoords: any[]) => {\r\n        this.setState({ shapesCoords })\r\n    }\r\n\r\n    setDifficulty = (difficulty: number) => {\r\n        this.setState({ difficulty });\r\n    }\r\n\r\n    setRecievers = (recievers: string[]) => {\r\n        this.setState({ recievers });\r\n    }\r\n\r\n    removeReciever = (reciever: string) => {        \r\n        let recs = this.state.recievers;\r\n        const { running } = this.state;\r\n        let index = recs.indexOf(reciever);\r\n        if (index != -1 && !running) {\r\n            recs.splice(index, 1);\r\n            this.setState({\r\n                recievers: recs\r\n            })\r\n        }\r\n    }\r\n\r\n    opponentGameOver = (user: string) => {\r\n        const { recievers } = this.state;\r\n        const index = recievers.indexOf(user);\r\n        if(index !=-1){\r\n        let canvas = this.getCanvasBasedOnRecieverIndex(index);\r\n        this.gameOver(canvas);\r\n        }\r\n    }\r\n\r\n    addShapes = (newCoords: any) => {\r\n        let currentShapes = this.state.generatedShapes;\r\n        let generatedShapes = [];\r\n        const { columns, rows, blockSize } = this.state;\r\n        let newShapes = newCoords.map((elem: any) => {\r\n            const color = elem.color;\r\n            return new UniversalShape(elem.coords, columns, rows, blockSize, color);\r\n        });\r\n        generatedShapes = currentShapes.concat(newShapes);\r\n        this.setState({\r\n            generatedShapes\r\n        });\r\n    }\r\n\r\n    addSpectator = (spectator: string) => {\r\n        let specs = this.state.spectators;\r\n        let index = specs.indexOf(spectator);\r\n        if (index == -1) {\r\n            specs.push(spectator);\r\n            this.setState({\r\n                spectators: specs\r\n            })\r\n        }\r\n    }\r\n\r\n    removeSpectator = (spectator: string) => {\r\n        let specs = this.state.spectators;\r\n        let index = specs.indexOf(spectator)\r\n        if (index != -1) {\r\n            specs.splice(index, 1);\r\n        }\r\n        this.setState({\r\n            spectators: specs\r\n        })\r\n    }\r\n\r\n    showAccepted = (user: string, tf: boolean) => {\r\n        this.setState({\r\n            reqAccepted: <Popup user={user} accepted={tf} resetPopup={this.resetPopup} />\r\n        })\r\n        if (!tf) {\r\n            let d = this.state.denied;\r\n            d.push(user);\r\n            this.setState({\r\n                denied: d\r\n            })\r\n        }\r\n        setTimeout(this.resetPopup, 5000);\r\n    }\r\n\r\n    resetPopup = () => {\r\n        this.setState({\r\n            reqAccepted: null\r\n        })\r\n    }\r\n\r\n    setGeneratedShapes = (shapes: any) => {\r\n        let generatedShapes = [];\r\n        const { columns, rows, blockSize } = this.state;\r\n        generatedShapes = shapes.map((elem: any) => {\r\n            const color = elem.color;\r\n            return new UniversalShape(elem.coords, columns, rows, blockSize, color);\r\n        });\r\n        this.setState({\r\n            generatedShapes,\r\n            nextShape: generatedShapes[0],\r\n\r\n        });\r\n        return generatedShapes;\r\n    }\r\n\r\n    changeSpectatingStatus = (tf: boolean) => {\r\n        this.setState({\r\n            isSpectator: tf\r\n        })\r\n    }\r\n\r\n    setUser = (user: any) => {\r\n        CM.emitUserConnected(user);\r\n        this.setState({ user })\r\n    }\r\n\r\n    logout = (e: any) => {\r\n        e.preventDefault();\r\n        CM.emitLogout();\r\n        this.setState({\r\n            currentShape: this.defaultShape(),\r\n            allBlocks: [],\r\n            running: false,\r\n            score: 0,\r\n            speed: 900,\r\n            counterId: -1,\r\n            delay: 1,\r\n            baseDelay: 20,\r\n            totalScore: 0,\r\n            acceleration: 0,\r\n            columns: 10,\r\n            rows: 20,\r\n            blockSize: 40,\r\n            user: null,\r\n            recievers: [],\r\n            scorePlayer2: 0,\r\n            totalScorePlayer2: 0,\r\n            generatedShapes: null,\r\n            generatedShapesIndex: 0,\r\n            isPlayerReady: false,\r\n            matrix: createEmptyMatrix(10, 20),\r\n            nextShape: this.defaultShape(),\r\n        })\r\n    }\r\n\r\n\r\n    deepCopyShape(obj: any): any {\r\n        var copy: any = obj;\r\n        if (null == obj || \"object\" != typeof obj) return obj;\r\n        if (obj instanceof Object) {\r\n            for (var attr in obj) {\r\n                if (obj.hasOwnProperty(attr)) copy[attr] = this.deepCopyShape(obj[attr]);\r\n            }\r\n            return copy;\r\n        }\r\n    }\r\n\r\n    updateSecondCanvas = (obj: any) => {\r\n        const { columns, blockSize, rows, recievers } = this.state;\r\n        let acc = this.state.acceleration;\r\n        const userIndex = recievers.indexOf(obj.sender);\r\n        let c2: any;\r\n        if (obj.acceleration > acc) {\r\n            this.setState({ acceleration: obj.acceleration });\r\n\r\n        }\r\n        const shape1 = new BaseBuildingSquare(0, 0, 'red', blockSize / 2);\r\n        switch (userIndex) {\r\n            case 0: {\r\n                c2 = this.canvasBack2.current; this.setState({\r\n                    totalScorePlayer2: obj.totalScore,\r\n                    scorePlayer2: obj.score\r\n                });\r\n            };\r\n                break;\r\n            case 1: {\r\n                c2 = this.canvasBack3.current;\r\n                this.setState({\r\n                    totalScorePlayer3: obj.totalScore,\r\n                    scorePlayer3: obj.score\r\n                });\r\n            }; break;\r\n            case 2: {\r\n                c2 = this.canvasBack4.current;\r\n                this.setState({\r\n                    totalScorePlayer4: obj.totalScore,\r\n                    scorePlayer4: obj.score\r\n                });\r\n            }; break;\r\n        }\r\n        if (c2) {\r\n            let ctx2: any = c2.getContext('2d');\r\n            ctx2.clearRect(0, 0, columns * blockSize / 2, rows * blockSize / 2);\r\n            let shape = new UniversalShape(obj.shape.coordiantesArr, columns, rows, blockSize / 2, 'red');\r\n            shape.defineNewProperties(obj.shape.blocksArr, 2, blockSize / obj.blockSize);\r\n            createGrid(ctx2, columns, rows, blockSize, 0.5);\r\n            shape.updateCanvas(ctx2)\r\n\r\n            for (let i = 0; i < rows; i++) {\r\n                for (let j = 0; j < columns; j++) {\r\n                    if (obj.matrix[i][j].status) {\r\n                        shape1.draw(j * blockSize / 2, i * blockSize / 2, ctx2, 'red');\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    getCanvasBasedOnRecieverIndex = (index: number) => {\r\n        let c2: any = this.canvasBack.current;\r\n        switch (index) {\r\n            case 0:\r\n                c2 = this.canvasBack2.current;\r\n                ;\r\n                break;\r\n            case 1:\r\n                c2 = this.canvasBack3.current;\r\n                ; break;\r\n            case 2:\r\n                c2 = this.canvasBack4.current;\r\n                ; break;\r\n            case 3:\r\n                c2 = this.canvasBack.current;\r\n                ; break;\r\n\r\n        }\r\n        return c2;\r\n    }\r\n\r\n    setScoreBasedOnRecieverIndex = (index: number, obj: any) => {\r\n        switch (index) {\r\n            case 0:\r\n                this.setState({\r\n                    totalScorePlayer2: obj.totalScore,\r\n                    scorePlayer2: obj.score\r\n                }); break;\r\n            case 1:\r\n                this.setState({\r\n                    totalScorePlayer3: obj.totalScore,\r\n                    scorePlayer3: obj.score\r\n                })\r\n                    ; break;\r\n            case 2:\r\n                this.setState({\r\n                    totalScorePlayer4: obj.totalScore,\r\n                    scorePlayer4: obj.score\r\n                })\r\n                    ; break;\r\n            case 3:\r\n                this.setState({\r\n                    totalScore: obj.totalScore,\r\n                    score: obj.score\r\n                })\r\n                    ; break;\r\n\r\n        }\r\n    }\r\n\r\n    updateSpectatingCanvas = (obj: any) => {\r\n        const { recievers, columns, blockSize, rows } = this.state;\r\n        let c2: any = this.canvasBack.current;\r\n        const userIndex = recievers.indexOf(obj.user);\r\n        const shape1 = new BaseBuildingSquare(0, 0, 'red', blockSize / 2);\r\n        c2 = this.getCanvasBasedOnRecieverIndex(userIndex);\r\n        this.setScoreBasedOnRecieverIndex(userIndex, obj);\r\n        if (c2) {\r\n            let ctx2: any = c2.getContext('2d');\r\n            ctx2.clearRect(0, 0, columns * blockSize / 2, rows * blockSize / 2);\r\n            let shape = new UniversalShape(obj.shape.coordiantesArr, columns, rows, blockSize / 2, 'red');\r\n            shape.defineNewProperties(obj.shape.blocksArr, 2, blockSize / obj.blockSize);\r\n            createGrid(ctx2, columns, rows, blockSize, 0.5);\r\n            shape.updateCanvas(ctx2)\r\n\r\n            for (let i = 0; i < rows; i++) {\r\n                for (let j = 0; j < columns; j++) {\r\n                    if (obj.matrix[i][j].status) {\r\n                        shape1.draw(j * blockSize / 2, i * blockSize / 2, ctx2, 'red');\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    handleKeyDown(event: any) {\r\n        event.preventDefault();\r\n        if (this.state.running) {\r\n            let c1: any = this.canvasFront.current;\r\n            const ctx1: any = c1.getContext('2d');\r\n            let shape = this.state.currentShape;\r\n            const mat = this.state.matrix;\r\n            const col = this.state.columns;\r\n            const row = this.state.rows;\r\n            const size = this.state.blockSize;\r\n            const acc = this.state.acceleration;\r\n            let score = this.state.totalScore;\r\n            let delay = 22 - acc;\r\n\r\n            if (event.keyCode == 39 && shape.areBlocksFreeToMoveRight(mat)) {\r\n                shape.moveRight();\r\n                this.setState({\r\n                    baseDelay: delay\r\n                })\r\n            }\r\n            else if (event.keyCode == 37 && shape.areBlocksFreeToMoveLeft(mat)) {\r\n                shape.moveLeft();\r\n                this.setState({\r\n                    baseDelay: delay\r\n                })\r\n            }\r\n            ctx1.clearRect(0, 0, col * size, row * size);\r\n            shape.updateCanvas(ctx1);\r\n            if (event.keyCode == 38) {\r\n                this.handleRotate();\r\n                this.setState({\r\n                    baseDelay: delay\r\n                })\r\n            }\r\n            if (event.keyCode == 40) {\r\n                this.setState({\r\n                    baseDelay: 1\r\n                })\r\n            }\r\n            if (event.keyCode == 32) {\r\n                let i = 0;\r\n                while (shape.areBlocksFreeToMoveDown(mat)) {\r\n                    shape.moveDown();\r\n                    i += 1;\r\n                }\r\n                if (!shape.areBlocksFreeToMoveDown(mat)) {\r\n                    this.state.currentShape.moveBack()\r\n                    this.state.currentShape.blocksArr.forEach((element: any) => {\r\n                        if (element) {\r\n                            mat[Math.round(element.top / size)][Math.round(element.left / size)].status = true;\r\n                            mat[Math.round(element.top / size)][Math.round(element.left / size)].color = element.color;\r\n                        }\r\n                    });\r\n                    this.setState({\r\n                        matrix: mat,\r\n                        totalScore: score + i\r\n                    })\r\n                    this.updateStateOfTheGame(shape);\r\n                    clearInterval(this.state.counterId);\r\n                    this.run();\r\n\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    onKeyUp(event: any) {\r\n        event.preventDefault();\r\n        if (event.keyCode == 40) {\r\n            let acc = this.state.acceleration;\r\n            this.setState({\r\n                baseDelay: 20 - acc\r\n            })\r\n        }\r\n    }\r\n\r\n    defaultShape = (): UniversalShape => {\r\n        return new UniversalShape([[{ x: 0, y: 0 }]], 10, 20, 40, 'red');\r\n    }\r\n\r\n    startGame = () => {\r\n\r\n        if (!this.state.running) {\r\n            const { user, gameMode } = this.state;\r\n            if (gameMode == 2)\r\n                CM.emitUserInGame(user.name);\r\n            const col = this.state.columns;\r\n            const row = this.state.rows;\r\n            const size = this.state.blockSize;\r\n\r\n            this.run();\r\n            let c1: any = this.canvasBack.current;\r\n            if (c1) {\r\n                const ctx1: any = c1.getContext('2d');\r\n                ctx1.clearRect(0, 0, col * size, row * size);\r\n                this.setState({\r\n                    matrix: createEmptyMatrix(col, row),\r\n                    score: 0,\r\n                    totalScore: 0\r\n                })\r\n                createGrid(ctx1, col, row, size);\r\n            }\r\n        }\r\n    }\r\n\r\n    run = () => {\r\n        this.setState({\r\n            running: true\r\n        })\r\n        const col = this.state.columns;\r\n        const row = this.state.rows;\r\n        const size = this.state.blockSize;\r\n        let arr = this.state.matrix;\r\n        const { generatedShapes, nextShape, recievers, user, gameMode, score, totalScore, difficulty } = this.state;\r\n        let index = this.state.generatedShapesIndex;\r\n        let acc = this.state.acceleration;\r\n        if (generatedShapes)\r\n            if (index + 10 == generatedShapes.length) {\r\n                if (gameMode == 2)\r\n                    CM.emitAddShapes(recievers);\r\n            }\r\n        this.setState({\r\n            baseDelay: 20 - acc\r\n        })\r\n        let c1: any = this.canvasFront.current;\r\n        if (c1) {\r\n            const ctx1: any = c1.getContext('2d');\r\n            index += 1;\r\n            this.setState({ generatedShapesIndex: index });\r\n            const shape = generatedShapes[index];\r\n\r\n            const next: UniversalShape = this.deepCopyShape(nextShape);\r\n            ctx1.clearRect(0, 0, col * size, row * size);\r\n            const sidec: any = this.canvasSide.current;\r\n            const sidectx = sidec.getContext('2d');\r\n            sidectx.clearRect(0, 0, col * size, row * size);\r\n            if (nextShape != null) {\r\n                nextShape.updateCanvas(ctx1);\r\n            }\r\n            if (sidectx) {\r\n                let tempShape = this.deepCopyShape(shape);\r\n                tempShape.fitToSide(2.5);\r\n                tempShape.updateCanvas(sidectx);\r\n                tempShape.fitToSide(-2.5);\r\n            }\r\n            this.setState({\r\n                currentShape: next,\r\n                nextShape: shape\r\n            })\r\n            if (isRowComplete(col, row, arr).length > 0) {\r\n                isRowComplete(col, row, arr).forEach((index: number) => {\r\n                    this.clearRow(index);\r\n                });\r\n            }\r\n            if (!this.isGameOver(shape, arr)) {\r\n                let inter: any = setInterval(() => this.moveShape(next, inter), 50);\r\n                this.setState({\r\n                    counterId: inter,\r\n                })\r\n            }\r\n            else {\r\n                let totalScore = this.state.totalScore - 10;\r\n                this.setState({\r\n                    running: false, totalScore\r\n                });\r\n                this.gameOver(c1);\r\n\r\n                CM.emitGameOver(user.name, recievers, score, totalScore, difficulty);\r\n            }\r\n        }\r\n    }\r\n    gameOver = (canvas: any) => {\r\n        if (canvas) {\r\n            let ctx = canvas.getContext('2d');\r\n            let size = canvas.width / 10 + \"px\";\r\n            ctx.font = \"bold \" + size + \" Verdana\";\r\n            ctx.textAlign = \"center\";\r\n            ctx.fillText(\"GAME OVER\", canvas.width / 2, canvas.height / 2)\r\n            ctx.strokeStyle = 'black';\r\n            ctx.strokeText(\"GAME OVER\", canvas.width / 2, canvas.height / 2)\r\n        }\r\n    }\r\n    moveShape = (shape: any, inter: any) => {\r\n        let delay = this.state.delay;\r\n\r\n        const { user, columns, rows, blockSize, totalScore, score, recievers, acceleration, spectators, gameMode } = this.state;\r\n        let arr = this.state.matrix;\r\n        if (user && shape) {\r\n            if (gameMode == 2) {\r\n                CM.emitGameUpdate(arr, shape, recievers, user.name, totalScore, score, acceleration, blockSize);\r\n            }\r\n\r\n        }\r\n        if (spectators) {\r\n            spectators.forEach(name => {\r\n                CM.emitSpectatorData(arr, shape, name, user.name, totalScore, score, blockSize);\r\n            })\r\n        }\r\n        if (delay <= this.state.baseDelay) {\r\n            delay++;\r\n            this.setState({\r\n                delay: delay\r\n            })\r\n        }\r\n        else {\r\n            this.setState({\r\n                delay: 1,\r\n                baseDelay: 20 - acceleration\r\n            })\r\n            let c1: any = this.canvasFront.current;\r\n            if (c1) {\r\n                const ctx1: any = c1.getContext('2d');\r\n                ctx1.clearRect(0, 0, columns * blockSize, rows * blockSize);\r\n\r\n                shape.moveDown();\r\n\r\n                if (shape.areBlocksFreeToMoveDown(arr))\r\n                    shape.updateCanvas(ctx1);\r\n            }\r\n            if (!shape.areBlocksFreeToMoveDown(arr)) {\r\n                this.state.currentShape.moveBack();\r\n                this.state.currentShape.blocksArr.forEach((element: any) => {\r\n                    arr[Math.round(element.top / blockSize)][Math.round(element.left / blockSize)].status = true;\r\n                    arr[Math.round(element.top / blockSize)][Math.round(element.left / blockSize)].color = element.color;\r\n                });\r\n                this.setState({\r\n                    matrix: arr,\r\n\r\n                })\r\n\r\n                this.updateStateOfTheGame(shape);\r\n                clearInterval(inter);\r\n                this.run();\r\n\r\n            }\r\n        }\r\n    }\r\n    stopGame = () => {\r\n        clearInterval(this.state.counterId);\r\n    }\r\n    updateStateOfTheGame = (shape: any) => {\r\n        const col = this.state.columns;\r\n        const row = this.state.rows;\r\n        const size = this.state.blockSize;\r\n        let mat = this.state.matrix;\r\n        let c1: any = this.canvasBack.current;\r\n        let total = this.state.totalScore;\r\n        const ctx1: any = c1.getContext('2d');\r\n        const rowsToClear = isRowComplete(col, row, mat);\r\n        if (rowsToClear.length > 0) {\r\n            switch (rowsToClear.length) {\r\n                case 1: total += 100; break;\r\n                case 2: total += 250; break;\r\n                case 3: total += 450; break;\r\n                case 4: total += 800; break;\r\n            }\r\n            rowsToClear.forEach((index: number) => {\r\n                this.clearRow(index);\r\n            });\r\n            ctx1.clearRect(0, 0, col * size, row * size);\r\n            createGrid(ctx1, col, row, size);\r\n        }\r\n\r\n        const shape1 = new BaseBuildingSquare(0, 0, 'blue', size)\r\n        for (let i = 0; i < row; i++) {\r\n            for (let j = 0; j < col; j++) {\r\n                if (mat[i][j].status) {\r\n                    shape1.draw(j * size, i * size, ctx1, mat[i][j].color);\r\n                }\r\n            }\r\n        }\r\n        total += 10;\r\n        let arr = this.state.allBlocks;\r\n        shape.moveBack();\r\n        arr.push(this.state.currentShape);\r\n        this.setState({\r\n            totalScore: total\r\n        })\r\n        let acc = this.state.acceleration;\r\n        if (this.state.totalScore > 400 * (acc + 1)) {\r\n            acc++;\r\n            if (acc < 20)\r\n                this.setState({\r\n                    acceleration: acc\r\n                })\r\n        }\r\n    }\r\n\r\n    isGameOver = (shape: any, matrix: any[]) => {\r\n        return !shape.areBlocksFreeToMoveDown(matrix)\r\n    }\r\n\r\n    clearRow = (index: number) => {\r\n        const col = this.state.columns;\r\n        let mat = this.state.matrix;\r\n        function x() {\r\n            let sub: any[] = [];\r\n            for (let j = 0; j < col; j++) {\r\n                sub.push({ status: false, color: 'white' });\r\n            }\r\n            return sub;\r\n        }\r\n        mat.splice(index, 1);\r\n        mat.unshift(x());\r\n        let score = this.state.score;\r\n        score += 1;\r\n\r\n        this.setState({\r\n            matrix: mat,\r\n            score: score,\r\n        })\r\n    }\r\n\r\n    handleMove = (event: any) => {\r\n        const col = this.state.columns;\r\n        const row = this.state.rows;\r\n        const size = this.state.blockSize;\r\n        if (this.state.running) {\r\n            const id = event.target.id;\r\n            let c1: any = this.canvasFront.current;\r\n            const ctx1: any = c1.getContext('2d');\r\n            let shape = this.state.currentShape;\r\n            const mat = this.state.matrix;\r\n\r\n            if (id == 'right' && shape.areBlocksFreeToMoveRight(mat)) {\r\n                shape.moveRight();\r\n            }\r\n            else if (id == 'left' && shape.areBlocksFreeToMoveLeft(mat)) {\r\n                shape.moveLeft();\r\n\r\n            }\r\n            ctx1.clearRect(0, 0, size * col, size * row);\r\n            shape.updateCanvas(ctx1);\r\n        }\r\n    }\r\n\r\n    handleRotate = () => {\r\n        const col = this.state.columns;\r\n        const row = this.state.rows;\r\n        const size = this.state.blockSize;\r\n        if (this.state.running) {\r\n            let shape: UniversalShape = this.deepCopyShape(this.state.currentShape);\r\n            let shapehelp = this.state.currentShape;\r\n            shape.rotate();\r\n            if (!shape.areBlockOutOfRotateBoundsLeft() || !shape.areBlockOutOfRotateBoundsRight()) {\r\n                shape.rotate();\r\n                shape.rotate();\r\n                shape.rotate();\r\n                this.setState({\r\n                    currentShape: shapehelp\r\n                })\r\n            }\r\n            else if (shape.areBlocksFreeToRotate(this.state.matrix)) {\r\n\r\n                let c1: any = this.canvasFront.current;\r\n                const ctx1: any = c1.getContext('2d');\r\n                ctx1.clearRect(0, 0, size * col, size * row);\r\n                shape.updateCanvas(ctx1);\r\n            }\r\n            else {\r\n                shape.rotate();\r\n                shape.rotate();\r\n                shape.rotate();\r\n                this.setState({\r\n                    currentShape: shapehelp\r\n                })\r\n            }\r\n\r\n            this.setState({\r\n                currentShape: shape\r\n            });\r\n        }\r\n    }\r\n    setReciever = (reciever: any) => {\r\n        let rec = this.state.recievers;\r\n        if (rec.length < 3) {\r\n            rec.push(reciever);\r\n        }\r\n        this.setState({\r\n            recievers: rec\r\n        })\r\n    }\r\n    reset = () => {\r\n        clearInterval(this.state.counterId);\r\n        this.setState({\r\n            currentShape: this.defaultShape(),\r\n            nextShape: this.defaultShape(),\r\n            allBlocks: [],\r\n            running: false,\r\n            matrix: createEmptyMatrix(10, 20),\r\n            score: 0,\r\n            speed: 900,\r\n            counterId: -1,\r\n            delay: 1,\r\n            baseDelay: 20,\r\n            totalScore: 0,\r\n            acceleration: 0,\r\n            columns: 10,\r\n            rows: 20,\r\n            blockSize: 40,\r\n            recievers: [],\r\n            scorePlayer2: 0,\r\n            totalScorePlayer2: 0,\r\n            scorePlayer3: 0,\r\n            totalScorePlayer3: 0,\r\n            scorePlayer4: 0,\r\n            totalScorePlayer4: 0,\r\n            generatedShapes: null,\r\n            generatedShapesIndex: 0,\r\n            isPlayerReady: false,\r\n            spectators: [],\r\n            isSpectator: false,\r\n            specCanvases: null,\r\n            reqAccepted: null,\r\n            denied: [],\r\n            difficulty: 7,\r\n            windowHeight: window.innerHeight,\r\n            windowWidth: window.innerWidth\r\n        })\r\n    }\r\n\r\n    generateSpecCanvases = () => {\r\n        const { rows, columns, blockSize, recievers, running, isPlayerReady } = this.state;\r\n        let canvases = [];\r\n        for (let i = 0; i < recievers.length; i++) {\r\n            let info = this.generateCanvasData(i);\r\n            if (info) {\r\n                let data = (recievers[i]) ? <div key={'canvas'+i} className={info.className}>\r\n                    <Canvas\r\n                        rows={rows}\r\n                        columns={columns}\r\n                        blockSize={blockSize / 2}\r\n                        canvasFront={null}\r\n                        canvasBack={info.canvasBack}\r\n                        running={false}\r\n                        isPlayerReady={true}\r\n\r\n                    />\r\n                    <MiniCanvas\r\n                        canvasSide={null}\r\n                        showSide={false}\r\n                        rowScore={info.rowScore}\r\n                        totalScore={info.totalScore}\r\n                        columns={columns}\r\n                        blockSize={blockSize}\r\n                        name={recievers[i]}\r\n                    />\r\n                </div> : null;\r\n                canvases.push(data);\r\n            }\r\n        }\r\n        return canvases;\r\n    }\r\n\r\n\r\n    generateCanvasData = (index: number) => {\r\n        const { score, scorePlayer2, scorePlayer3, scorePlayer4, totalScore, totalScorePlayer2, totalScorePlayer3, totalScorePlayer4 } = this.state;\r\n        let data = null;\r\n        switch (index) {\r\n            case 0: data = {\r\n                className: 'canvas1',\r\n                rowScore: scorePlayer2,\r\n                totalScore: totalScorePlayer2,\r\n                canvasBack: this.canvasBack2\r\n            }; break;\r\n            case 1: data = {\r\n                className: 'canvas2',\r\n                rowScore: scorePlayer3,\r\n                totalScore: totalScorePlayer3,\r\n                canvasBack: this.canvasBack3\r\n            }; break;\r\n            case 2: data = {\r\n                className: 'canvas3',\r\n                rowScore: scorePlayer4,\r\n                totalScore: totalScorePlayer4,\r\n                canvasBack: this.canvasBack4\r\n            }; break;\r\n            case 3: data = {\r\n                className: 'canvas4',\r\n                rowScore: score,\r\n                totalScore: totalScore,\r\n                canvasBack: this.canvasBack\r\n            }; break;\r\n        }\r\n        return data;\r\n    }\r\n\r\n    initGame = () => {\r\n        const { user, recievers, difficulty } = this.state;\r\n        CM.emitInitializeGame(user.name, recievers, difficulty);\r\n        this.setPlayerReady(true);\r\n    }\r\n\r\n    setPlayerReady = (tf: boolean) => {\r\n        this.setState({ isPlayerReady: tf })\r\n    }\r\n\r\n    singlePlayer = () => {\r\n        const shapesCoords = generateShapes(1000, this.state.difficulty);\r\n        const shapes = this.setGeneratedShapes(shapesCoords);\r\n        this.setState({\r\n            shapesCoords,\r\n            generatedShapes: shapes,\r\n            nextShape: shapes[0],\r\n            gameMode: 1,\r\n            isPlayerReady: true,\r\n\r\n        })\r\n        CM.emitInitializeGame(this.state.user.name, [], this.state.difficulty)\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        const {\r\n            isSpectator, columns,\r\n            rows, blockSize, score,\r\n            totalScore, user, recievers,\r\n            isPlayerReady, running,\r\n            reqAccepted, denied, gameMode, winner } = this.state;\r\n        const canvases = this.generateSpecCanvases();\r\n        return (\r\n            <div onKeyUp={this.onKeyUp} className='mainWrapper' >\r\n                <div>\r\n                    {gameMode == 2 || gameMode == 3 ?\r\n                        <div>\r\n\r\n                            <UserContainer\r\n                                setGeneratedShapes={this.setGeneratedShapes}\r\n                                reciever={recievers} startGame={this.startGame}\r\n                                user={user.name} logout={this.logout}\r\n                                setRecievers={this.setRecievers}\r\n                                isPlayerReady={isPlayerReady}\r\n                                changeSpectatingStatus={this.changeSpectatingStatus}\r\n                                running={running} reset={this.reset}\r\n                                addSpectator={this.addSpectator}\r\n                                initGame={this.initGame}\r\n                                denied={denied}\r\n                                isSpectator={isSpectator}\r\n                            />\r\n                           \r\n                                {!isPlayerReady && !isSpectator ?\r\n                                <div className=\"transparentCanvasBackground\">\r\n                                    <AutoComplete\r\n                                        rows={20}\r\n                                        columns={25}\r\n                                        blockSize={40}\r\n                                    /> \r\n                                    </div>: null}\r\n                                \r\n                            \r\n                        </div>\r\n                        : null}\r\n\r\n\r\n                    {(isPlayerReady) ? <div className={'main'}>\r\n                    <div className='mainCanvasWrapper'>\r\n                        <div className='wrap'>\r\n                            <Canvas\r\n                                rows={rows}\r\n                                columns={columns}\r\n                                blockSize={blockSize}\r\n                                canvasFront={this.canvasFront}\r\n                                canvasBack={this.canvasBack}\r\n                                running={running}\r\n                                isPlayerReady={isPlayerReady}\r\n                            />\r\n                        </div>\r\n                        <div className='sideWrap'>\r\n                            <MiniCanvas\r\n                                canvasSide={this.canvasSide}\r\n                                showSide={true}\r\n                                rowScore={score}\r\n                                totalScore={totalScore}\r\n                                columns={columns}\r\n                                blockSize={blockSize}\r\n                                name={user.name}\r\n                                running={running}\r\n                                isPlayerReady={isPlayerReady}\r\n                            />\r\n                            {gameMode == 1 ? <div>\r\n                                <button className=\"startBtn\" onClick={this.startGame}>Start</button>\r\n                            </div> : null}\r\n                        </div>\r\n                        </div>\r\n                        {canvases}\r\n                        {winner}\r\n                    </div> : null}\r\n                    {isSpectator ? <div className='main'> \r\n                        <br></br>\r\n                        {canvases}\r\n                    </div> : null}\r\n                </div>\r\n                {reqAccepted}\r\n\r\n            </div>\r\n\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default UniversalShapeContext","import React from 'react'\r\n\r\nfunction Highscore(props: any) {\r\n\r\n    let scores: any[] = [];\r\n\r\n    for (let i = 0; i < 10; i++) {\r\n        if (props.scores[i])\r\n            scores.push(<tr>\r\n                <td>{i+1}.</td>\r\n                <td>{props.scores[i].name}</td>\r\n                <td>{props.scores[i].score}</td>\r\n                <td>{props.scores[i].rows}</td>\r\n            </tr>)\r\n\r\n    }\r\n    return (\r\n        <div className=\"highscore\">\r\n        Highscores - {props.title}\r\n        <table>\r\n            <tbody>\r\n                \r\n                <tr>\r\n                    <td> </td>\r\n                    <td>Name</td>\r\n                    <td>Score</td>\r\n                    <td>Lines</td>\r\n                </tr>\r\n                {scores}\r\n            </tbody>\r\n        </table>-----------</div>\r\n    )\r\n}\r\n\r\nexport default Highscore","import React from 'react'\r\n\r\nfunction UserInfo(props: any) {\r\n    let show;\r\n    switch (props.gameMode) {\r\n        case 1: show = '- Game mode: Singleplayer'; break;\r\n        case 2: show = '- Game mode: Multiplayer'; break;\r\n        case 3: show = '- Game mode: Spectating'; break;\r\n        default: show = null; break;\r\n    }\r\n    \r\n    return (\r\n        <div className={\"userInfo\"}>\r\n            <div className='usernameDisplay'>\r\n                User: {props.user} {show}\r\n            </div>\r\n            <div className='buttonDisplay'>\r\n                <button className=\"resetBtn\" onClick={props.setDisplay} value={0}>Menu</button>\r\n                <button onClick={props.logout}>Logout</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserInfo\r\n\r\n//{props.reciever.length > 0 && props.isPlayerReady ? 'Users in game: ' + props.displayRecievers : null}","import React from 'react';\r\nimport UniversalShapeContext from './UniversalShapeContext';\r\nimport Highscore from './Highscore';\r\nimport CM from './ClientManager';\r\nimport AutoComplete from './AutoComplete';\r\nimport UserInfo from './UserInfo';\r\n\r\nclass Menu extends React.Component<{ user: any, logout: any }, { width: number, display: number; difficulty: number; highscore: any[], highscoreEasy: any[] }> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            display: 0,\r\n            difficulty: 7,\r\n            highscore: [],\r\n            highscoreEasy: [],\r\n            width: window.innerWidth\r\n        }\r\n    }\r\n    componentDidMount = () => {\r\n        this.setState({width: window.innerWidth})\r\n        // change MySQL connetion first\r\n        CM.initMenu(this.setHighscore)\r\n    }\r\n    setDisplay = (event: any) => {\r\n        const value = event.target.value * 1\r\n        if (value == 2 || value == 3) {\r\n            CM.emitMultiplayer(this.props.user.name)\r\n        }\r\n        this.setState({\r\n            display: event.target.value * 1\r\n        })\r\n        \r\n    }\r\n\r\n    setHighscore = (highscore: any) => {\r\n        highscore.mode == 'normal' ? this.setState({ highscore: highscore.result }) : this.setState({ highscoreEasy: highscore.result });\r\n        \r\n    }\r\n\r\n    setDifficulty = (event: any) => {\r\n        this.setState({\r\n            difficulty: event.target.value * 1,\r\n            display: 0\r\n        })\r\n    }\r\n\r\n    logout = () => {\r\n        CM.emitLogout();\r\n        this.props.logout();\r\n    }\r\n\r\n    render() {\r\n        const { display, difficulty, highscore, highscoreEasy, width } = this.state;\r\n        const { user } = this.props\r\n        let show = <div></div>;\r\n        switch (display) {\r\n            case 0:\r\n                show =\r\n                    \r\n                        <div className=\"leftMenu\">\r\n                            <p className='title2'>TETRIS</p>\r\n\r\n                            <div className=\"menuButtons\">\r\n\r\n                                <p>Menu</p>\r\n                                <button onClick={this.setDisplay} value={1}>SINGLEPLAYER</button>\r\n                                <button onClick={this.setDisplay} value={2}>MULTIPLAYER</button>\r\n                                <button onClick={this.setDisplay} value={3}>SPECTATE</button>\r\n                                <button onClick={this.setDisplay} value={4}>SETTINGS</button>\r\n                                <button onClick={this.setDisplay} value={5}>HIGHSCORES</button>\r\n                            </div>\r\n                        </div>\r\n\r\n                    ; break;\r\n            case 1:\r\n                show = <UniversalShapeContext setDisplay={this.setDisplay} difficulty={difficulty} user={user} mode={display} />;\r\n                \r\n                    ; break;\r\n            case 2:\r\n                show = <UniversalShapeContext setDisplay={null} difficulty={difficulty} user={user} mode={display} />\r\n                    ; break;\r\n            case 3:\r\n                show = <UniversalShapeContext setDisplay={null} difficulty={difficulty} user={user} mode={display} />\r\n                    ; break;\r\n            case 4:\r\n                show =\r\n                    <div className=\"leftMenu\">\r\n                        <p className='title2'>TETRIS</p>\r\n                        <div className=\"menuButtons\">\r\n                            <p>Select difficulty</p>\r\n                            <button onClick={this.setDifficulty} value={7}>NORMAL</button>\r\n                            <button onClick={this.setDifficulty} value={10}>EASY</button>\r\n                            <button onClick={this.setDisplay} value={0}>Back</button>\r\n                        </div>\r\n                    </div>\r\n                    ; break;\r\n            case 5:\r\n                show = <div className=\"leftMenu\"><div className=\"highscoreWrapper\">\r\n\r\n                    {highscore != [] ? <Highscore scores={highscore} title={\"Normal\"} /> : null}\r\n                    {highscoreEasy != [] ? <Highscore scores={highscoreEasy} title={\"Easy\"} /> : null}\r\n                    <button onClick={this.setDisplay} value={0}>Back</button>\r\n                </div>\r\n                </div>; break;\r\n        }\r\n\r\n\r\n        return (\r\n            <div className='mainWrapper'>\r\n                <UserInfo user={user.name} logout={this.logout} setDisplay={this.setDisplay} gameMode={display} />\r\n                <div className='menuWrapper'>\r\n                    {show}\r\n                    {display == 0 || display == 4 || display == 5 ?\r\n                        <AutoComplete\r\n                            rows={20}\r\n                            columns={20}\r\n                            blockSize={Math.round(width / 2 / 22)}\r\n                        /> : null}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Menu;","import React, { Component } from 'react';\r\nimport Register from './Register';\r\nimport LoginForm from './LoginForm';\r\nimport CM from './ClientManager'\r\nimport Menu from './Menu';\r\nimport { Router, Link } from 'react-router-dom';\r\nimport { Timeline, TimelineLite, TimelineMax, Power2, TweenLite, TweenMax } from 'gsap';\r\n\r\n\r\n\r\nclass Main extends Component<{}, { display: number; user: any }> {\r\n  title = React.createRef<HTMLDivElement>();\r\n  t = document.getElementsByClassName('title');\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      display: 0,\r\n      user: null\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.animate();\r\n  }\r\n  componentDidUpdate() {\r\n    if (this.state.display == 0) {\r\n      this.animate();\r\n    }\r\n  }\r\n  animate = () => {\r\n    let tl = new TimelineMax();\r\n    tl.fromTo(this.t, 1, { width: \"0\", left: '50%' }, { width: '100%', left: '0%' })\r\n      .fromTo(this.t, 1, { color: 'rgba(255, 255, 255, 0)' }, { color: '#595959', ease: Power2.easeInOut, }, \"-=0.5\");\r\n  }\r\n  setDisplay = (display: number) => {\r\n    this.setState({\r\n      display\r\n    })\r\n  }\r\n  handleClick = (event: any) => {\r\n    this.setState({ display: event.target.value });\r\n  }\r\n  setUser = (user: any) => {\r\n    CM.emitUserConnected(user);\r\n    this.setState({ user, display: 4 })\r\n  }\r\n\r\n  logout = () => {\r\n    this.setState({\r\n      display: 0,\r\n      user: null\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { display, user } = this.state;\r\n    return (\r\n      <div className='main-container'>\r\n\r\n\r\n\r\n        {user ? <div ><Menu user={user} logout={this.logout} /> </div> : <div>\r\n\r\n          {display == 0 ? <div>\r\n            <nav>\r\n              <div className=\"register\">\r\n                <button onClick={this.handleClick} value={1}>Login</button>\r\n                <button onClick={this.handleClick} value={2}>Register</button>\r\n                \r\n              </div>\r\n            </nav>\r\n            <div className='title' id={'title'} ref={this.title}>TETRIS</div>\r\n          </div> : null}\r\n          {display == 1 ? <div><LoginForm setUser={this.setUser} setDisplay={this.handleClick} /> </div> : null}\r\n          {display == 2 ? <div ><Register setDisplay={this.handleClick} /> </div> : null}\r\n          {display == 3 ? <div className=\"register\">\r\n            Register Successful!\r\n          <button onClick={this.handleClick} value={1}>Login</button>\r\n          </div> : null}</div>}\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;","import React, { Component } from 'react';\nimport './App.css';\nimport Main from './Main';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Main />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './styles/style.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}